var bW=!1,hW=!1,k=[],gW=-1;function iq(W){aq(W)}function aq(W){if(!k.includes(W))k.push(W);lq()}function tq(W){let q=k.indexOf(W);if(q!==-1&&q>gW)k.splice(q,1)}function lq(){if(!hW&&!bW)bW=!0,queueMicrotask(eq)}function eq(){bW=!1,hW=!0;for(let W=0;W<k.length;W++)k[W](),gW=W;k.length=0,gW=-1,hW=!1}var m,p,n,V1,kW=!0;function Wz(W){kW=!1,W(),kW=!0}function qz(W){m=W.reactive,n=W.release,p=(q)=>W.effect(q,{scheduler:(z)=>{if(kW)iq(z);else z()}}),V1=W.raw}function D1(W){p=W}function zz(W){let q=()=>{};return[(J)=>{let Q=p(J);if(!W._x_effects)W._x_effects=new Set,W._x_runEffects=()=>{W._x_effects.forEach((U)=>U())};return W._x_effects.add(Q),q=()=>{if(Q===void 0)return;W._x_effects.delete(Q),n(Q)},Q},()=>{q()}]}function b1(W,q){let z=!0,J,Q=p(()=>{let U=W();if(JSON.stringify(U),!z)queueMicrotask(()=>{q(U,J),J=U});else J=U;z=!1});return()=>n(Q)}var h1=[],g1=[],k1=[];function Jz(W){k1.push(W)}function iW(W,q){if(typeof q==="function"){if(!W._x_cleanups)W._x_cleanups=[];W._x_cleanups.push(q)}else q=W,g1.push(q)}function x1(W){h1.push(W)}function y1(W,q,z){if(!W._x_attributeCleanups)W._x_attributeCleanups={};if(!W._x_attributeCleanups[q])W._x_attributeCleanups[q]=[];W._x_attributeCleanups[q].push(z)}function f1(W,q){if(!W._x_attributeCleanups)return;Object.entries(W._x_attributeCleanups).forEach(([z,J])=>{if(q===void 0||q.includes(z))J.forEach((Q)=>Q()),delete W._x_attributeCleanups[z]})}function Qz(W){W._x_effects?.forEach(tq);while(W._x_cleanups?.length)W._x_cleanups.pop()()}var aW=new MutationObserver(W1),tW=!1;function lW(){aW.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),tW=!0}function c1(){Uz(),aW.disconnect(),tW=!1}var a=[];function Uz(){let W=aW.takeRecords();a.push(()=>W.length>0&&W1(W));let q=a.length;queueMicrotask(()=>{if(a.length===q)while(a.length>0)a.shift()()})}function P(W){if(!tW)return W();c1();let q=W();return lW(),q}var eW=!1,GW=[];function Xz(){eW=!0}function Yz(){eW=!1,W1(GW),GW=[]}function W1(W){if(eW){GW=GW.concat(W);return}let q=[],z=new Set,J=new Map,Q=new Map;for(let U=0;U<W.length;U++){if(W[U].target._x_ignoreMutationObserver)continue;if(W[U].type==="childList")W[U].removedNodes.forEach((X)=>{if(X.nodeType!==1)return;if(!X._x_marker)return;z.add(X)}),W[U].addedNodes.forEach((X)=>{if(X.nodeType!==1)return;if(z.has(X)){z.delete(X);return}if(X._x_marker)return;q.push(X)});if(W[U].type==="attributes"){let X=W[U].target,Y=W[U].attributeName,Z=W[U].oldValue,_=()=>{if(!J.has(X))J.set(X,[]);J.get(X).push({name:Y,value:X.getAttribute(Y)})},$=()=>{if(!Q.has(X))Q.set(X,[]);Q.get(X).push(Y)};if(X.hasAttribute(Y)&&Z===null)_();else if(X.hasAttribute(Y))$(),_();else $()}}Q.forEach((U,X)=>{f1(X,U)}),J.forEach((U,X)=>{h1.forEach((Y)=>Y(X,U))});for(let U of z){if(q.some((X)=>X.contains(U)))continue;g1.forEach((X)=>X(U))}for(let U of q){if(!U.isConnected)continue;k1.forEach((X)=>X(U))}q=null,z=null,J=null,Q=null}function p1(W){return QW(d(W))}function JW(W,q,z){return W._x_dataStack=[q,...d(z||W)],()=>{W._x_dataStack=W._x_dataStack.filter((J)=>J!==q)}}function d(W){if(W._x_dataStack)return W._x_dataStack;if(typeof ShadowRoot==="function"&&W instanceof ShadowRoot)return d(W.host);if(!W.parentNode)return[];return d(W.parentNode)}function QW(W){return new Proxy({objects:W},Zz)}var Zz={ownKeys({objects:W}){return Array.from(new Set(W.flatMap((q)=>Object.keys(q))))},has({objects:W},q){if(q==Symbol.unscopables)return!1;return W.some((z)=>Object.prototype.hasOwnProperty.call(z,q)||Reflect.has(z,q))},get({objects:W},q,z){if(q=="toJSON")return _z;return Reflect.get(W.find((J)=>Reflect.has(J,q))||{},q,z)},set({objects:W},q,z,J){let Q=W.find((X)=>Object.prototype.hasOwnProperty.call(X,q))||W[W.length-1],U=Object.getOwnPropertyDescriptor(Q,q);if(U?.set&&U?.get)return U.set.call(J,z)||!0;return Reflect.set(Q,q,z)}};function _z(){return Reflect.ownKeys(this).reduce((q,z)=>{return q[z]=Reflect.get(this,z),q},{})}function v1(W){let q=(J)=>typeof J==="object"&&!Array.isArray(J)&&J!==null,z=(J,Q="")=>{Object.entries(Object.getOwnPropertyDescriptors(J)).forEach(([U,{value:X,enumerable:Y}])=>{if(Y===!1||X===void 0)return;if(typeof X==="object"&&X!==null&&X.__v_skip)return;let Z=Q===""?U:`${Q}.${U}`;if(typeof X==="object"&&X!==null&&X._x_interceptor)J[U]=X.initialize(W,Z,U);else if(q(X)&&X!==J&&!(X instanceof Element))z(X,Z)})};return z(W)}function d1(W,q=()=>{}){let z={initialValue:void 0,_x_interceptor:!0,initialize(J,Q,U){return W(this.initialValue,()=>$z(J,Q),(X)=>xW(J,Q,X),Q,U)}};return q(z),(J)=>{if(typeof J==="object"&&J!==null&&J._x_interceptor){let Q=z.initialize.bind(z);z.initialize=(U,X,Y)=>{let Z=J.initialize(U,X,Y);return z.initialValue=Z,Q(U,X,Y)}}else z.initialValue=J;return z}}function $z(W,q){return q.split(".").reduce((z,J)=>z[J],W)}function xW(W,q,z){if(typeof q==="string")q=q.split(".");if(q.length===1)W[q[0]]=z;else if(q.length===0)throw error;else if(W[q[0]])return xW(W[q[0]],q.slice(1),z);else return W[q[0]]={},xW(W[q[0]],q.slice(1),z)}var u1={};function I(W,q){u1[W]=q}function yW(W,q){let z=Bz(q);return Object.entries(u1).forEach(([J,Q])=>{Object.defineProperty(W,`$${J}`,{get(){return Q(q,z)},enumerable:!1})}),W}function Bz(W){let[q,z]=i1(W),J={interceptor:d1,...q};return iW(W,z),J}function Az(W,q,z,...J){try{return z(...J)}catch(Q){zW(Q,W,q)}}function zW(W,q,z=void 0){W=Object.assign(W??{message:"No error message given."},{el:q,expression:z}),console.warn(`Alpine Expression Error: ${W.message}

${z?'Expression: "'+z+`"

`:""}`,q),setTimeout(()=>{throw W},0)}var AW=!0;function m1(W){let q=AW;AW=!1;let z=W();return AW=q,z}function x(W,q,z={}){let J;return E(W,q)((Q)=>J=Q,z),J}function E(...W){return n1(...W)}var n1=o1;function Oz(W){n1=W}function o1(W,q){let z={};yW(z,W);let J=[z,...d(W)],Q=typeof q==="function"?Gz(J,q):Pz(J,q,W);return Az.bind(null,W,q,Q)}function Gz(W,q){return(z=()=>{},{scope:J={},params:Q=[]}={})=>{let U=q.apply(QW([J,...W]),Q);CW(z,U)}}var KW={};function Cz(W,q){if(KW[W])return KW[W];let z=Object.getPrototypeOf(async function(){}).constructor,J=/^[\n\s]*if.*\(.*\)/.test(W.trim())||/^(let|const)\s/.test(W.trim())?`(async()=>{ ${W} })()`:W,U=(()=>{try{let X=new z(["__self","scope"],`with (scope) { __self.result = ${J} }; __self.finished = true; return __self.result;`);return Object.defineProperty(X,"name",{value:`[Alpine] ${W}`}),X}catch(X){return zW(X,q,W),Promise.resolve()}})();return KW[W]=U,U}function Pz(W,q,z){let J=Cz(q,z);return(Q=()=>{},{scope:U={},params:X=[]}={})=>{J.result=void 0,J.finished=!1;let Y=QW([U,...W]);if(typeof J==="function"){let Z=J(J,Y).catch((_)=>zW(_,z,q));if(J.finished)CW(Q,J.result,Y,X,z),J.result=void 0;else Z.then((_)=>{CW(Q,_,Y,X,z)}).catch((_)=>zW(_,z,q)).finally(()=>J.result=void 0)}}}function CW(W,q,z,J,Q){if(AW&&typeof q==="function"){let U=q.apply(z,J);if(U instanceof Promise)U.then((X)=>CW(W,X,z,J)).catch((X)=>zW(X,Q,q));else W(U)}else if(typeof q==="object"&&q instanceof Promise)q.then((U)=>W(U));else W(q)}var q1="x-";function o(W=""){return q1+W}function Dz(W){q1=W}var PW={};function H(W,q){return PW[W]=q,{before(z){if(!PW[z]){console.warn(String.raw`Cannot find directive \`${z}\`. \`${W}\` will use the default order of execution`);return}let J=g.indexOf(z);g.splice(J>=0?J:g.indexOf("DEFAULT"),0,W)}}}function Hz(W){return Object.keys(PW).includes(W)}function z1(W,q,z){if(q=Array.from(q),W._x_virtualDirectives){let U=Object.entries(W._x_virtualDirectives).map(([Y,Z])=>({name:Y,value:Z})),X=s1(U);U=U.map((Y)=>{if(X.find((Z)=>Z.name===Y.name))return{name:`x-bind:${Y.name}`,value:`"${Y.value}"`};return Y}),q=q.concat(U)}let J={};return q.map(l1((U,X)=>J[U]=X)).filter(Wq).map(Ez(J,z)).sort(Rz).map((U)=>{return Lz(W,U)})}function s1(W){return Array.from(W).map(l1()).filter((q)=>!Wq(q))}var fW=!1,e=new Map,r1=Symbol();function Fz(W){fW=!0;let q=Symbol();r1=q,e.set(q,[]);let z=()=>{while(e.get(q).length)e.get(q).shift()();e.delete(q)},J=()=>{fW=!1,z()};W(z),J()}function i1(W){let q=[],z=(Y)=>q.push(Y),[J,Q]=zz(W);return q.push(Q),[{Alpine:UW,effect:J,cleanup:z,evaluateLater:E.bind(E,W),evaluate:x.bind(x,W)},()=>q.forEach((Y)=>Y())]}function Lz(W,q){let z=()=>{},J=PW[q.type]||z,[Q,U]=i1(W);y1(W,q.original,U);let X=()=>{if(W._x_ignore||W._x_ignoreSelf)return;J.inline&&J.inline(W,q,Q),J=J.bind(J,W,q,Q),fW?e.get(r1).push(J):J()};return X.runCleanups=U,X}var a1=(W,q)=>({name:z,value:J})=>{if(z.startsWith(W))z=z.replace(W,q);return{name:z,value:J}},t1=(W)=>W;function l1(W=()=>{}){return({name:q,value:z})=>{let{name:J,value:Q}=e1.reduce((U,X)=>{return X(U)},{name:q,value:z});if(J!==q)W(J,q);return{name:J,value:Q}}}var e1=[];function J1(W){e1.push(W)}function Wq({name:W}){return qq().test(W)}var qq=()=>new RegExp(`^${q1}([^:^.]+)\\b`);function Ez(W,q){return({name:z,value:J})=>{let Q=z.match(qq()),U=z.match(/:([a-zA-Z0-9\-_:]+)/),X=z.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],Y=q||W[z]||z;return{type:Q?Q[1]:null,value:U?U[1]:null,modifiers:X.map((Z)=>Z.replace(".","")),expression:J,original:Y}}}var cW="DEFAULT",g=["ignore","ref","data","id","anchor","bind","init","for","model","modelable","transition","show","if",cW,"teleport"];function Rz(W,q){let z=g.indexOf(W.type)===-1?cW:W.type,J=g.indexOf(q.type)===-1?cW:q.type;return g.indexOf(z)-g.indexOf(J)}function WW(W,q,z={}){W.dispatchEvent(new CustomEvent(q,{detail:z,bubbles:!0,composed:!0,cancelable:!0}))}function c(W,q){if(typeof ShadowRoot==="function"&&W instanceof ShadowRoot){Array.from(W.children).forEach((Q)=>c(Q,q));return}let z=!1;if(q(W,()=>z=!0),z)return;let J=W.firstElementChild;while(J)c(J,q,!1),J=J.nextElementSibling}function T(W,...q){console.warn(`Alpine Warning: ${W}`,...q)}var H1=!1;function Tz(){if(H1)T("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems.");if(H1=!0,!document.body)T("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?");WW(document,"alpine:init"),WW(document,"alpine:initializing"),lW(),Jz((q)=>K(q,c)),iW((q)=>r(q)),x1((q,z)=>{z1(q,z).forEach((J)=>J())});let W=(q)=>!HW(q.parentElement,!0);Array.from(document.querySelectorAll(Qq().join(","))).filter(W).forEach((q)=>{K(q)}),WW(document,"alpine:initialized"),setTimeout(()=>{Kz()})}var Q1=[],zq=[];function Jq(){return Q1.map((W)=>W())}function Qq(){return Q1.concat(zq).map((W)=>W())}function Uq(W){Q1.push(W)}function Xq(W){zq.push(W)}function HW(W,q=!1){return s(W,(z)=>{if((q?Qq():Jq()).some((Q)=>z.matches(Q)))return!0})}function s(W,q){if(!W)return;if(q(W))return W;if(W._x_teleportBack)W=W._x_teleportBack;if(!W.parentElement)return;return s(W.parentElement,q)}function jz(W){return Jq().some((q)=>W.matches(q))}var Yq=[];function Iz(W){Yq.push(W)}var Nz=1;function K(W,q=c,z=()=>{}){if(s(W,(J)=>J._x_ignore))return;Fz(()=>{q(W,(J,Q)=>{if(J._x_marker)return;if(z(J,Q),Yq.forEach((U)=>U(J,Q)),z1(J,J.attributes).forEach((U)=>U()),!J._x_ignore)J._x_marker=Nz++;J._x_ignore&&Q()})})}function r(W,q=c){q(W,(z)=>{Qz(z),f1(z),delete z._x_marker})}function Kz(){[["ui","dialog",["[x-dialog], [x-popover]"]],["anchor","anchor",["[x-anchor]"]],["sort","sort",["[x-sort]"]]].forEach(([q,z,J])=>{if(Hz(z))return;J.some((Q)=>{if(document.querySelector(Q))return T(`found "${Q}", but missing ${q} plugin`),!0})})}var pW=[],U1=!1;function X1(W=()=>{}){return queueMicrotask(()=>{U1||setTimeout(()=>{vW()})}),new Promise((q)=>{pW.push(()=>{W(),q()})})}function vW(){U1=!1;while(pW.length)pW.shift()()}function Mz(){U1=!0}function Y1(W,q){if(Array.isArray(q))return F1(W,q.join(" "));else if(typeof q==="object"&&q!==null)return Sz(W,q);else if(typeof q==="function")return Y1(W,q());return F1(W,q)}function F1(W,q){let z=(U)=>U.split(" ").filter(Boolean),J=(U)=>U.split(" ").filter((X)=>!W.classList.contains(X)).filter(Boolean),Q=(U)=>{return W.classList.add(...U),()=>{W.classList.remove(...U)}};return q=q===!0?q="":q||"",Q(J(q))}function Sz(W,q){let z=(Y)=>Y.split(" ").filter(Boolean),J=Object.entries(q).flatMap(([Y,Z])=>Z?z(Y):!1).filter(Boolean),Q=Object.entries(q).flatMap(([Y,Z])=>!Z?z(Y):!1).filter(Boolean),U=[],X=[];return Q.forEach((Y)=>{if(W.classList.contains(Y))W.classList.remove(Y),X.push(Y)}),J.forEach((Y)=>{if(!W.classList.contains(Y))W.classList.add(Y),U.push(Y)}),()=>{X.forEach((Y)=>W.classList.add(Y)),U.forEach((Y)=>W.classList.remove(Y))}}function FW(W,q){if(typeof q==="object"&&q!==null)return wz(W,q);return Vz(W,q)}function wz(W,q){let z={};return Object.entries(q).forEach(([J,Q])=>{if(z[J]=W.style[J],!J.startsWith("--"))J=bz(J);W.style.setProperty(J,Q)}),setTimeout(()=>{if(W.style.length===0)W.removeAttribute("style")}),()=>{FW(W,z)}}function Vz(W,q){let z=W.getAttribute("style",q);return W.setAttribute("style",q),()=>{W.setAttribute("style",z||"")}}function bz(W){return W.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function dW(W,q=()=>{}){let z=!1;return function(){if(!z)z=!0,W.apply(this,arguments);else q.apply(this,arguments)}}H("transition",(W,{value:q,modifiers:z,expression:J},{evaluate:Q})=>{if(typeof J==="function")J=Q(J);if(J===!1)return;if(!J||typeof J==="boolean")gz(W,z,q);else hz(W,J,q)});function hz(W,q,z){Zq(W,Y1,""),{enter:(Q)=>{W._x_transition.enter.during=Q},"enter-start":(Q)=>{W._x_transition.enter.start=Q},"enter-end":(Q)=>{W._x_transition.enter.end=Q},leave:(Q)=>{W._x_transition.leave.during=Q},"leave-start":(Q)=>{W._x_transition.leave.start=Q},"leave-end":(Q)=>{W._x_transition.leave.end=Q}}[z](q)}function gz(W,q,z){Zq(W,FW);let J=!q.includes("in")&&!q.includes("out")&&!z,Q=J||q.includes("in")||["enter"].includes(z),U=J||q.includes("out")||["leave"].includes(z);if(q.includes("in")&&!J)q=q.filter((C,D)=>D<q.indexOf("out"));if(q.includes("out")&&!J)q=q.filter((C,D)=>D>q.indexOf("out"));let X=!q.includes("opacity")&&!q.includes("scale"),Y=X||q.includes("opacity"),Z=X||q.includes("scale"),_=Y?0:1,$=Z?t(q,"scale",95)/100:1,A=t(q,"delay",0)/1000,O=t(q,"origin","center"),F="opacity, transform",M=t(q,"duration",150)/1000,XW=t(q,"duration",75)/1000,B="cubic-bezier(0.4, 0.0, 0.2, 1)";if(Q)W._x_transition.enter.during={transformOrigin:O,transitionDelay:`${A}s`,transitionProperty:F,transitionDuration:`${M}s`,transitionTimingFunction:B},W._x_transition.enter.start={opacity:_,transform:`scale(${$})`},W._x_transition.enter.end={opacity:1,transform:"scale(1)"};if(U)W._x_transition.leave.during={transformOrigin:O,transitionDelay:`${A}s`,transitionProperty:F,transitionDuration:`${XW}s`,transitionTimingFunction:B},W._x_transition.leave.start={opacity:1,transform:"scale(1)"},W._x_transition.leave.end={opacity:_,transform:`scale(${$})`}}function Zq(W,q,z={}){if(!W._x_transition)W._x_transition={enter:{during:z,start:z,end:z},leave:{during:z,start:z,end:z},in(J=()=>{},Q=()=>{}){uW(W,q,{during:this.enter.during,start:this.enter.start,end:this.enter.end},J,Q)},out(J=()=>{},Q=()=>{}){uW(W,q,{during:this.leave.during,start:this.leave.start,end:this.leave.end},J,Q)}}}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(W,q,z,J){let Q=document.visibilityState==="visible"?requestAnimationFrame:setTimeout,U=()=>Q(z);if(q){if(W._x_transition&&(W._x_transition.enter||W._x_transition.leave))W._x_transition.enter&&(Object.entries(W._x_transition.enter.during).length||Object.entries(W._x_transition.enter.start).length||Object.entries(W._x_transition.enter.end).length)?W._x_transition.in(z):U();else W._x_transition?W._x_transition.in(z):U();return}W._x_hidePromise=W._x_transition?new Promise((X,Y)=>{W._x_transition.out(()=>{},()=>X(J)),W._x_transitioning&&W._x_transitioning.beforeCancel(()=>Y({isFromCancelledTransition:!0}))}):Promise.resolve(J),queueMicrotask(()=>{let X=_q(W);if(X){if(!X._x_hideChildren)X._x_hideChildren=[];X._x_hideChildren.push(W)}else Q(()=>{let Y=(Z)=>{let _=Promise.all([Z._x_hidePromise,...(Z._x_hideChildren||[]).map(Y)]).then(([$])=>$?.());return delete Z._x_hidePromise,delete Z._x_hideChildren,_};Y(W).catch((Z)=>{if(!Z.isFromCancelledTransition)throw Z})})})};function _q(W){let q=W.parentNode;if(!q)return;return q._x_hidePromise?q:_q(q)}function uW(W,q,{during:z,start:J,end:Q}={},U=()=>{},X=()=>{}){if(W._x_transitioning)W._x_transitioning.cancel();if(Object.keys(z).length===0&&Object.keys(J).length===0&&Object.keys(Q).length===0){U(),X();return}let Y,Z,_;kz(W,{start(){Y=q(W,J)},during(){Z=q(W,z)},before:U,end(){Y(),_=q(W,Q)},after:X,cleanup(){Z(),_()}})}function kz(W,q){let z,J,Q,U=dW(()=>{P(()=>{if(z=!0,!J)q.before();if(!Q)q.end(),vW();if(q.after(),W.isConnected)q.cleanup();delete W._x_transitioning})});W._x_transitioning={beforeCancels:[],beforeCancel(X){this.beforeCancels.push(X)},cancel:dW(function(){while(this.beforeCancels.length)this.beforeCancels.shift()();U()}),finish:U},P(()=>{q.start(),q.during()}),Mz(),requestAnimationFrame(()=>{if(z)return;let X=Number(getComputedStyle(W).transitionDuration.replace(/,.*/,"").replace("s",""))*1000,Y=Number(getComputedStyle(W).transitionDelay.replace(/,.*/,"").replace("s",""))*1000;if(X===0)X=Number(getComputedStyle(W).animationDuration.replace("s",""))*1000;P(()=>{q.before()}),J=!0,requestAnimationFrame(()=>{if(z)return;P(()=>{q.end()}),vW(),setTimeout(W._x_transitioning.finish,X+Y),Q=!0})})}function t(W,q,z){if(W.indexOf(q)===-1)return z;let J=W[W.indexOf(q)+1];if(!J)return z;if(q==="scale"){if(isNaN(J))return z}if(q==="duration"||q==="delay"){let Q=J.match(/([0-9]+)ms/);if(Q)return Q[1]}if(q==="origin"){if(["top","right","left","center","bottom"].includes(W[W.indexOf(q)+2]))return[J,W[W.indexOf(q)+2]].join(" ")}return J}var w=!1;function b(W,q=()=>{}){return(...z)=>w?q(...z):W(...z)}function xz(W){return(...q)=>w&&W(...q)}var $q=[];function LW(W){$q.push(W)}function yz(W,q){$q.forEach((z)=>z(W,q)),w=!0,Bq(()=>{K(q,(z,J)=>{J(z,()=>{})})}),w=!1}var mW=!1;function fz(W,q){if(!q._x_dataStack)q._x_dataStack=W._x_dataStack;w=!0,mW=!0,Bq(()=>{cz(q)}),w=!1,mW=!1}function cz(W){let q=!1;K(W,(J,Q)=>{c(J,(U,X)=>{if(q&&jz(U))return X();q=!0,Q(U,X)})})}function Bq(W){let q=p;D1((z,J)=>{let Q=q(z);return n(Q),()=>{}}),W(),D1(q)}function Aq(W,q,z,J=[]){if(!W._x_bindings)W._x_bindings=m({});switch(W._x_bindings[q]=z,q=J.includes("camel")?sz(q):q,q){case"value":pz(W,z);break;case"style":dz(W,z);break;case"class":vz(W,z);break;case"selected":case"checked":uz(W,q,z);break;default:Oq(W,q,z);break}}function pz(W,q){if(Pq(W)){if(W.attributes.value===void 0)W.value=q;if(window.fromModel)if(typeof q==="boolean")W.checked=OW(W.value)===q;else W.checked=L1(W.value,q)}else if(Z1(W))if(Number.isInteger(q))W.value=q;else if(!Array.isArray(q)&&typeof q!=="boolean"&&![null,void 0].includes(q))W.value=String(q);else if(Array.isArray(q))W.checked=q.some((z)=>L1(z,W.value));else W.checked=!!q;else if(W.tagName==="SELECT")oz(W,q);else{if(W.value===q)return;W.value=q===void 0?"":q}}function vz(W,q){if(W._x_undoAddedClasses)W._x_undoAddedClasses();W._x_undoAddedClasses=Y1(W,q)}function dz(W,q){if(W._x_undoAddedStyles)W._x_undoAddedStyles();W._x_undoAddedStyles=FW(W,q)}function uz(W,q,z){Oq(W,q,z),nz(W,q,z)}function Oq(W,q,z){if([null,void 0,!1].includes(z)&&iz(q))W.removeAttribute(q);else{if(Gq(q))z=q;mz(W,q,z)}}function mz(W,q,z){if(W.getAttribute(q)!=z)W.setAttribute(q,z)}function nz(W,q,z){if(W[q]!==z)W[q]=z}function oz(W,q){let z=[].concat(q).map((J)=>{return J+""});Array.from(W.options).forEach((J)=>{J.selected=z.includes(J.value)})}function sz(W){return W.toLowerCase().replace(/-(\w)/g,(q,z)=>z.toUpperCase())}function L1(W,q){return W==q}function OW(W){if([1,"1","true","on","yes",!0].includes(W))return!0;if([0,"0","false","off","no",!1].includes(W))return!1;return W?Boolean(W):null}var rz=new Set(["allowfullscreen","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","inert","ismap","itemscope","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected","shadowrootclonable","shadowrootdelegatesfocus","shadowrootserializable"]);function Gq(W){return rz.has(W)}function iz(W){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(W)}function az(W,q,z){if(W._x_bindings&&W._x_bindings[q]!==void 0)return W._x_bindings[q];return Cq(W,q,z)}function tz(W,q,z,J=!0){if(W._x_bindings&&W._x_bindings[q]!==void 0)return W._x_bindings[q];if(W._x_inlineBindings&&W._x_inlineBindings[q]!==void 0){let Q=W._x_inlineBindings[q];return Q.extract=J,m1(()=>{return x(W,Q.expression)})}return Cq(W,q,z)}function Cq(W,q,z){let J=W.getAttribute(q);if(J===null)return typeof z==="function"?z():z;if(J==="")return!0;if(Gq(q))return!![q,"true"].includes(J);return J}function Z1(W){return W.type==="checkbox"||W.localName==="ui-checkbox"||W.localName==="ui-switch"}function Pq(W){return W.type==="radio"||W.localName==="ui-radio"}function Dq(W,q){var z;return function(){var J=this,Q=arguments,U=function(){z=null,W.apply(J,Q)};clearTimeout(z),z=setTimeout(U,q)}}function Hq(W,q){let z;return function(){let J=this,Q=arguments;if(!z)W.apply(J,Q),z=!0,setTimeout(()=>z=!1,q)}}function Fq({get:W,set:q},{get:z,set:J}){let Q=!0,U,X,Y=p(()=>{let Z=W(),_=z();if(Q)J(MW(Z)),Q=!1;else{let $=JSON.stringify(Z),A=JSON.stringify(_);if($!==U)J(MW(Z));else if($!==A)q(MW(_))}U=JSON.stringify(W()),X=JSON.stringify(z())});return()=>{n(Y)}}function MW(W){return typeof W==="object"?JSON.parse(JSON.stringify(W)):W}function lz(W){(Array.isArray(W)?W:[W]).forEach((z)=>z(UW))}var h={},E1=!1;function ez(W,q){if(!E1)h=m(h),E1=!0;if(q===void 0)return h[W];if(h[W]=q,v1(h[W]),typeof q==="object"&&q!==null&&q.hasOwnProperty("init")&&typeof q.init==="function")h[W].init()}function WJ(){return h}var Lq={};function qJ(W,q){let z=typeof q!=="function"?()=>q:q;if(W instanceof Element)return Eq(W,z());else Lq[W]=z;return()=>{}}function zJ(W){return Object.entries(Lq).forEach(([q,z])=>{Object.defineProperty(W,q,{get(){return(...J)=>{return z(...J)}}})}),W}function Eq(W,q,z){let J=[];while(J.length)J.pop()();let Q=Object.entries(q).map(([X,Y])=>({name:X,value:Y})),U=s1(Q);return Q=Q.map((X)=>{if(U.find((Y)=>Y.name===X.name))return{name:`x-bind:${X.name}`,value:`"${X.value}"`};return X}),z1(W,Q,z).map((X)=>{J.push(X.runCleanups),X()}),()=>{while(J.length)J.pop()()}}var Rq={};function JJ(W,q){Rq[W]=q}function QJ(W,q){return Object.entries(Rq).forEach(([z,J])=>{Object.defineProperty(W,z,{get(){return(...Q)=>{return J.bind(q)(...Q)}},enumerable:!1})}),W}var UJ={get reactive(){return m},get release(){return n},get effect(){return p},get raw(){return V1},version:"3.14.9",flushAndStopDeferringMutations:Yz,dontAutoEvaluateFunctions:m1,disableEffectScheduling:Wz,startObservingMutations:lW,stopObservingMutations:c1,setReactivityEngine:qz,onAttributeRemoved:y1,onAttributesAdded:x1,closestDataStack:d,skipDuringClone:b,onlyDuringClone:xz,addRootSelector:Uq,addInitSelector:Xq,interceptClone:LW,addScopeToNode:JW,deferMutations:Xz,mapAttributes:J1,evaluateLater:E,interceptInit:Iz,setEvaluator:Oz,mergeProxies:QW,extractProp:tz,findClosest:s,onElRemoved:iW,closestRoot:HW,destroyTree:r,interceptor:d1,transition:uW,setStyles:FW,mutateDom:P,directive:H,entangle:Fq,throttle:Hq,debounce:Dq,evaluate:x,initTree:K,nextTick:X1,prefixed:o,prefix:Dz,plugin:lz,magic:I,store:ez,start:Tz,clone:fz,cloneNode:yz,bound:az,$data:p1,watch:b1,walk:c,data:JJ,bind:qJ},UW=UJ;function Tq(W,q){let z=Object.create(null),J=W.split(",");for(let Q=0;Q<J.length;Q++)z[J[Q]]=!0;return q?(Q)=>!!z[Q.toLowerCase()]:(Q)=>!!z[Q]}var XJ="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",XQ=Tq(XJ+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected"),YJ=Object.freeze({}),YQ=Object.freeze([]),ZJ=Object.prototype.hasOwnProperty,EW=(W,q)=>ZJ.call(W,q),y=Array.isArray,qW=(W)=>jq(W)==="[object Map]",_J=(W)=>typeof W==="string",_1=(W)=>typeof W==="symbol",RW=(W)=>W!==null&&typeof W==="object",$J=Object.prototype.toString,jq=(W)=>$J.call(W),Iq=(W)=>{return jq(W).slice(8,-1)},$1=(W)=>_J(W)&&W!=="NaN"&&W[0]!=="-"&&""+parseInt(W,10)===W,TW=(W)=>{let q=Object.create(null);return(z)=>{return q[z]||(q[z]=W(z))}},BJ=/-(\w)/g,ZQ=TW((W)=>{return W.replace(BJ,(q,z)=>z?z.toUpperCase():"")}),AJ=/\B([A-Z])/g,_Q=TW((W)=>W.replace(AJ,"-$1").toLowerCase()),Nq=TW((W)=>W.charAt(0).toUpperCase()+W.slice(1)),$Q=TW((W)=>W?`on${Nq(W)}`:""),Kq=(W,q)=>W!==q&&(W===W||q===q),nW=new WeakMap,l=[],N,f=Symbol("iterate"),oW=Symbol("Map key iterate");function OJ(W){return W&&W._isEffect===!0}function GJ(W,q=YJ){if(OJ(W))W=W.raw;let z=DJ(W,q);if(!q.lazy)z();return z}function CJ(W){if(W.active){if(Mq(W),W.options.onStop)W.options.onStop();W.active=!1}}var PJ=0;function DJ(W,q){let z=function J(){if(!z.active)return W();if(!l.includes(z)){Mq(z);try{return FJ(),l.push(z),N=z,W()}finally{l.pop(),Sq(),N=l[l.length-1]}}};return z.id=PJ++,z.allowRecurse=!!q.allowRecurse,z._isEffect=!0,z.active=!0,z.raw=W,z.deps=[],z.options=q,z}function Mq(W){let{deps:q}=W;if(q.length){for(let z=0;z<q.length;z++)q[z].delete(W);q.length=0}}var u=!0,B1=[];function HJ(){B1.push(u),u=!1}function FJ(){B1.push(u),u=!0}function Sq(){let W=B1.pop();u=W===void 0?!0:W}function j(W,q,z){if(!u||N===void 0)return;let J=nW.get(W);if(!J)nW.set(W,J=new Map);let Q=J.get(z);if(!Q)J.set(z,Q=new Set);if(!Q.has(N)){if(Q.add(N),N.deps.push(Q),N.options.onTrack)N.options.onTrack({effect:N,target:W,type:q,key:z})}}function V(W,q,z,J,Q,U){let X=nW.get(W);if(!X)return;let Y=new Set,Z=($)=>{if($)$.forEach((A)=>{if(A!==N||A.allowRecurse)Y.add(A)})};if(q==="clear")X.forEach(Z);else if(z==="length"&&y(W))X.forEach(($,A)=>{if(A==="length"||A>=J)Z($)});else{if(z!==void 0)Z(X.get(z));switch(q){case"add":if(!y(W)){if(Z(X.get(f)),qW(W))Z(X.get(oW))}else if($1(z))Z(X.get("length"));break;case"delete":if(!y(W)){if(Z(X.get(f)),qW(W))Z(X.get(oW))}break;case"set":if(qW(W))Z(X.get(f));break}}let _=($)=>{if($.options.onTrigger)$.options.onTrigger({effect:$,target:W,key:z,type:q,newValue:J,oldValue:Q,oldTarget:U});if($.options.scheduler)$.options.scheduler($);else $()};Y.forEach(_)}var LJ=Tq("__proto__,__v_isRef,__isVue"),wq=new Set(Object.getOwnPropertyNames(Symbol).map((W)=>Symbol[W]).filter(_1)),EJ=Vq(),RJ=Vq(!0),R1=TJ();function TJ(){let W={};return["includes","indexOf","lastIndexOf"].forEach((q)=>{W[q]=function(...z){let J=G(this);for(let U=0,X=this.length;U<X;U++)j(J,"get",U+"");let Q=J[q](...z);if(Q===-1||Q===!1)return J[q](...z.map(G));else return Q}}),["push","pop","shift","unshift","splice"].forEach((q)=>{W[q]=function(...z){HJ();let J=G(this)[q].apply(this,z);return Sq(),J}}),W}function Vq(W=!1,q=!1){return function z(J,Q,U){if(Q==="__v_isReactive")return!W;else if(Q==="__v_isReadonly")return W;else if(Q==="__v_raw"&&U===(W?q?cJ:kq:q?fJ:gq).get(J))return J;let X=y(J);if(!W&&X&&EW(R1,Q))return Reflect.get(R1,Q,U);let Y=Reflect.get(J,Q,U);if(_1(Q)?wq.has(Q):LJ(Q))return Y;if(!W)j(J,"get",Q);if(q)return Y;if(sW(Y))return!X||!$1(Q)?Y.value:Y;if(RW(Y))return W?xq(Y):C1(Y);return Y}}var jJ=IJ();function IJ(W=!1){return function q(z,J,Q,U){let X=z[J];if(!W){if(Q=G(Q),X=G(X),!y(z)&&sW(X)&&!sW(Q))return X.value=Q,!0}let Y=y(z)&&$1(J)?Number(J)<z.length:EW(z,J),Z=Reflect.set(z,J,Q,U);if(z===G(U)){if(!Y)V(z,"add",J,Q);else if(Kq(Q,X))V(z,"set",J,Q,X)}return Z}}function NJ(W,q){let z=EW(W,q),J=W[q],Q=Reflect.deleteProperty(W,q);if(Q&&z)V(W,"delete",q,void 0,J);return Q}function KJ(W,q){let z=Reflect.has(W,q);if(!_1(q)||!wq.has(q))j(W,"has",q);return z}function MJ(W){return j(W,"iterate",y(W)?"length":f),Reflect.ownKeys(W)}var SJ={get:EJ,set:jJ,deleteProperty:NJ,has:KJ,ownKeys:MJ},wJ={get:RJ,set(W,q){return console.warn(`Set operation on key "${String(q)}" failed: target is readonly.`,W),!0},deleteProperty(W,q){return console.warn(`Delete operation on key "${String(q)}" failed: target is readonly.`,W),!0}},A1=(W)=>RW(W)?C1(W):W,O1=(W)=>RW(W)?xq(W):W,G1=(W)=>W,jW=(W)=>Reflect.getPrototypeOf(W);function YW(W,q,z=!1,J=!1){W=W.__v_raw;let Q=G(W),U=G(q);if(q!==U)!z&&j(Q,"get",q);!z&&j(Q,"get",U);let{has:X}=jW(Q),Y=J?G1:z?O1:A1;if(X.call(Q,q))return Y(W.get(q));else if(X.call(Q,U))return Y(W.get(U));else if(W!==Q)W.get(q)}function ZW(W,q=!1){let z=this.__v_raw,J=G(z),Q=G(W);if(W!==Q)!q&&j(J,"has",W);return!q&&j(J,"has",Q),W===Q?z.has(W):z.has(W)||z.has(Q)}function _W(W,q=!1){return W=W.__v_raw,!q&&j(G(W),"iterate",f),Reflect.get(W,"size",W)}function T1(W){W=G(W);let q=G(this);if(!jW(q).has.call(q,W))q.add(W),V(q,"add",W,W);return this}function j1(W,q){q=G(q);let z=G(this),{has:J,get:Q}=jW(z),U=J.call(z,W);if(!U)W=G(W),U=J.call(z,W);else hq(z,J,W);let X=Q.call(z,W);if(z.set(W,q),!U)V(z,"add",W,q);else if(Kq(q,X))V(z,"set",W,q,X);return this}function I1(W){let q=G(this),{has:z,get:J}=jW(q),Q=z.call(q,W);if(!Q)W=G(W),Q=z.call(q,W);else hq(q,z,W);let U=J?J.call(q,W):void 0,X=q.delete(W);if(Q)V(q,"delete",W,void 0,U);return X}function N1(){let W=G(this),q=W.size!==0,z=qW(W)?new Map(W):new Set(W),J=W.clear();if(q)V(W,"clear",void 0,void 0,z);return J}function $W(W,q){return function z(J,Q){let U=this,X=U.__v_raw,Y=G(X),Z=q?G1:W?O1:A1;return!W&&j(Y,"iterate",f),X.forEach((_,$)=>{return J.call(Q,Z(_),Z($),U)})}}function BW(W,q,z){return function(...J){let Q=this.__v_raw,U=G(Q),X=qW(U),Y=W==="entries"||W===Symbol.iterator&&X,Z=W==="keys"&&X,_=Q[W](...J),$=z?G1:q?O1:A1;return!q&&j(U,"iterate",Z?oW:f),{next(){let{value:A,done:O}=_.next();return O?{value:A,done:O}:{value:Y?[$(A[0]),$(A[1])]:$(A),done:O}},[Symbol.iterator](){return this}}}}function S(W){return function(...q){{let z=q[0]?`on key "${q[0]}" `:"";console.warn(`${Nq(W)} operation ${z}failed: target is readonly.`,G(this))}return W==="delete"?!1:this}}function VJ(){let W={get(U){return YW(this,U)},get size(){return _W(this)},has:ZW,add:T1,set:j1,delete:I1,clear:N1,forEach:$W(!1,!1)},q={get(U){return YW(this,U,!1,!0)},get size(){return _W(this)},has:ZW,add:T1,set:j1,delete:I1,clear:N1,forEach:$W(!1,!0)},z={get(U){return YW(this,U,!0)},get size(){return _W(this,!0)},has(U){return ZW.call(this,U,!0)},add:S("add"),set:S("set"),delete:S("delete"),clear:S("clear"),forEach:$W(!0,!1)},J={get(U){return YW(this,U,!0,!0)},get size(){return _W(this,!0)},has(U){return ZW.call(this,U,!0)},add:S("add"),set:S("set"),delete:S("delete"),clear:S("clear"),forEach:$W(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((U)=>{W[U]=BW(U,!1,!1),z[U]=BW(U,!0,!1),q[U]=BW(U,!1,!0),J[U]=BW(U,!0,!0)}),[W,z,q,J]}var[bJ,hJ,gJ,kJ]=VJ();function bq(W,q){let z=q?W?kJ:gJ:W?hJ:bJ;return(J,Q,U)=>{if(Q==="__v_isReactive")return!W;else if(Q==="__v_isReadonly")return W;else if(Q==="__v_raw")return J;return Reflect.get(EW(z,Q)&&Q in J?z:J,Q,U)}}var xJ={get:bq(!1,!1)},yJ={get:bq(!0,!1)};function hq(W,q,z){let J=G(z);if(J!==z&&q.call(W,J)){let Q=Iq(W);console.warn(`Reactive ${Q} contains both the raw and reactive versions of the same object${Q==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var gq=new WeakMap,fJ=new WeakMap,kq=new WeakMap,cJ=new WeakMap;function pJ(W){switch(W){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function vJ(W){return W.__v_skip||!Object.isExtensible(W)?0:pJ(Iq(W))}function C1(W){if(W&&W.__v_isReadonly)return W;return yq(W,!1,SJ,xJ,gq)}function xq(W){return yq(W,!0,wJ,yJ,kq)}function yq(W,q,z,J,Q){if(!RW(W))return console.warn(`value cannot be made reactive: ${String(W)}`),W;if(W.__v_raw&&!(q&&W.__v_isReactive))return W;let U=Q.get(W);if(U)return U;let X=vJ(W);if(X===0)return W;let Y=new Proxy(W,X===2?J:z);return Q.set(W,Y),Y}function G(W){return W&&G(W.__v_raw)||W}function sW(W){return Boolean(W&&W.__v_isRef===!0)}I("nextTick",()=>X1);I("dispatch",(W)=>WW.bind(WW,W));I("watch",(W,{evaluateLater:q,cleanup:z})=>(J,Q)=>{let U=q(J),Y=b1(()=>{let Z;return U((_)=>Z=_),Z},Q);z(Y)});I("store",WJ);I("data",(W)=>p1(W));I("root",(W)=>HW(W));I("refs",(W)=>{if(W._x_refs_proxy)return W._x_refs_proxy;return W._x_refs_proxy=QW(dJ(W)),W._x_refs_proxy});function dJ(W){let q=[];return s(W,(z)=>{if(z._x_refs)q.push(z._x_refs)}),q}var SW={};function fq(W){if(!SW[W])SW[W]=0;return++SW[W]}function uJ(W,q){return s(W,(z)=>{if(z._x_ids&&z._x_ids[q])return!0})}function mJ(W,q){if(!W._x_ids)W._x_ids={};if(!W._x_ids[q])W._x_ids[q]=fq(q)}I("id",(W,{cleanup:q})=>(z,J=null)=>{let Q=`${z}${J?`-${J}`:""}`;return nJ(W,Q,q,()=>{let U=uJ(W,z),X=U?U._x_ids[z]:fq(z);return J?`${z}-${X}-${J}`:`${z}-${X}`})});LW((W,q)=>{if(W._x_id)q._x_id=W._x_id});function nJ(W,q,z,J){if(!W._x_id)W._x_id={};if(W._x_id[q])return W._x_id[q];let Q=J();return W._x_id[q]=Q,z(()=>{delete W._x_id[q]}),Q}I("el",(W)=>W);cq("Focus","focus","focus");cq("Persist","persist","persist");function cq(W,q,z){I(q,(J)=>T(`You can't use [$${q}] without first installing the "${W}" plugin here: https://alpinejs.dev/plugins/${z}`,J))}H("modelable",(W,{expression:q},{effect:z,evaluateLater:J,cleanup:Q})=>{let U=J(q),X=()=>{let $;return U((A)=>$=A),$},Y=J(`${q} = __placeholder`),Z=($)=>Y(()=>{},{scope:{__placeholder:$}}),_=X();Z(_),queueMicrotask(()=>{if(!W._x_model)return;W._x_removeModelListeners.default();let $=W._x_model.get,A=W._x_model.set,O=Fq({get(){return $()},set(F){A(F)}},{get(){return X()},set(F){Z(F)}});Q(O)})});H("teleport",(W,{modifiers:q,expression:z},{cleanup:J})=>{if(W.tagName.toLowerCase()!=="template")T("x-teleport can only be used on a <template> tag",W);let Q=K1(z),U=W.content.cloneNode(!0).firstElementChild;if(W._x_teleport=U,U._x_teleportBack=W,W.setAttribute("data-teleport-template",!0),U.setAttribute("data-teleport-target",!0),W._x_forwardEvents)W._x_forwardEvents.forEach((Y)=>{U.addEventListener(Y,(Z)=>{Z.stopPropagation(),W.dispatchEvent(new Z.constructor(Z.type,Z))})});JW(U,{},W);let X=(Y,Z,_)=>{if(_.includes("prepend"))Z.parentNode.insertBefore(Y,Z);else if(_.includes("append"))Z.parentNode.insertBefore(Y,Z.nextSibling);else Z.appendChild(Y)};P(()=>{X(U,Q,q),b(()=>{K(U)})()}),W._x_teleportPutBack=()=>{let Y=K1(z);P(()=>{X(W._x_teleport,Y,q)})},J(()=>P(()=>{U.remove(),r(U)}))});var oJ=document.createElement("div");function K1(W){let q=b(()=>{return document.querySelector(W)},()=>{return oJ})();if(!q)T(`Cannot find x-teleport element for selector: "${W}"`);return q}var pq=()=>{};pq.inline=(W,{modifiers:q},{cleanup:z})=>{q.includes("self")?W._x_ignoreSelf=!0:W._x_ignore=!0,z(()=>{q.includes("self")?delete W._x_ignoreSelf:delete W._x_ignore})};H("ignore",pq);H("effect",b((W,{expression:q},{effect:z})=>{z(E(W,q))}));function rW(W,q,z,J){let Q=W,U=(Z)=>J(Z),X={},Y=(Z,_)=>($)=>_(Z,$);if(z.includes("dot"))q=sJ(q);if(z.includes("camel"))q=rJ(q);if(z.includes("passive"))X.passive=!0;if(z.includes("capture"))X.capture=!0;if(z.includes("window"))Q=window;if(z.includes("document"))Q=document;if(z.includes("debounce")){let Z=z[z.indexOf("debounce")+1]||"invalid-wait",_=DW(Z.split("ms")[0])?Number(Z.split("ms")[0]):250;U=Dq(U,_)}if(z.includes("throttle")){let Z=z[z.indexOf("throttle")+1]||"invalid-wait",_=DW(Z.split("ms")[0])?Number(Z.split("ms")[0]):250;U=Hq(U,_)}if(z.includes("prevent"))U=Y(U,(Z,_)=>{_.preventDefault(),Z(_)});if(z.includes("stop"))U=Y(U,(Z,_)=>{_.stopPropagation(),Z(_)});if(z.includes("once"))U=Y(U,(Z,_)=>{Z(_),Q.removeEventListener(q,U,X)});if(z.includes("away")||z.includes("outside"))Q=document,U=Y(U,(Z,_)=>{if(W.contains(_.target))return;if(_.target.isConnected===!1)return;if(W.offsetWidth<1&&W.offsetHeight<1)return;if(W._x_isShown===!1)return;Z(_)});if(z.includes("self"))U=Y(U,(Z,_)=>{_.target===W&&Z(_)});if(aJ(q)||vq(q))U=Y(U,(Z,_)=>{if(tJ(_,z))return;Z(_)});return Q.addEventListener(q,U,X),()=>{Q.removeEventListener(q,U,X)}}function sJ(W){return W.replace(/-/g,".")}function rJ(W){return W.toLowerCase().replace(/-(\w)/g,(q,z)=>z.toUpperCase())}function DW(W){return!Array.isArray(W)&&!isNaN(W)}function iJ(W){if([" ","_"].includes(W))return W;return W.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function aJ(W){return["keydown","keyup"].includes(W)}function vq(W){return["contextmenu","click","mouse"].some((q)=>W.includes(q))}function tJ(W,q){let z=q.filter((U)=>{return!["window","document","prevent","stop","once","capture","self","away","outside","passive"].includes(U)});if(z.includes("debounce")){let U=z.indexOf("debounce");z.splice(U,DW((z[U+1]||"invalid-wait").split("ms")[0])?2:1)}if(z.includes("throttle")){let U=z.indexOf("throttle");z.splice(U,DW((z[U+1]||"invalid-wait").split("ms")[0])?2:1)}if(z.length===0)return!1;if(z.length===1&&M1(W.key).includes(z[0]))return!1;let Q=["ctrl","shift","alt","meta","cmd","super"].filter((U)=>z.includes(U));if(z=z.filter((U)=>!Q.includes(U)),Q.length>0){if(Q.filter((X)=>{if(X==="cmd"||X==="super")X="meta";return W[`${X}Key`]}).length===Q.length){if(vq(W.type))return!1;if(M1(W.key).includes(z[0]))return!1}}return!0}function M1(W){if(!W)return[];W=iJ(W);let q={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",comma:",",equal:"=",minus:"-",underscore:"_"};return q[W]=W,Object.keys(q).map((z)=>{if(q[z]===W)return z}).filter((z)=>z)}H("model",(W,{modifiers:q,expression:z},{effect:J,cleanup:Q})=>{let U=W;if(q.includes("parent"))U=W.parentNode;let X=E(U,z),Y;if(typeof z==="string")Y=E(U,`${z} = __placeholder`);else if(typeof z==="function"&&typeof z()==="string")Y=E(U,`${z()} = __placeholder`);else Y=()=>{};let Z=()=>{let O;return X((F)=>O=F),S1(O)?O.get():O},_=(O)=>{let F;if(X((M)=>F=M),S1(F))F.set(O);else Y(()=>{},{scope:{__placeholder:O}})};if(typeof z==="string"&&W.type==="radio")P(()=>{if(!W.hasAttribute("name"))W.setAttribute("name",z)});var $=W.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(W.type)||q.includes("lazy")?"change":"input";let A=w?()=>{}:rW(W,$,q,(O)=>{_(wW(W,q,O,Z()))});if(q.includes("fill")){if([void 0,null,""].includes(Z())||Z1(W)&&Array.isArray(Z())||W.tagName.toLowerCase()==="select"&&W.multiple)_(wW(W,q,{target:W},Z()))}if(!W._x_removeModelListeners)W._x_removeModelListeners={};if(W._x_removeModelListeners.default=A,Q(()=>W._x_removeModelListeners.default()),W.form){let O=rW(W.form,"reset",[],(F)=>{X1(()=>W._x_model&&W._x_model.set(wW(W,q,{target:W},Z())))});Q(()=>O())}W._x_model={get(){return Z()},set(O){_(O)}},W._x_forceModelUpdate=(O)=>{if(O===void 0&&typeof z==="string"&&z.match(/\./))O="";window.fromModel=!0,P(()=>Aq(W,"value",O)),delete window.fromModel},J(()=>{let O=Z();if(q.includes("unintrusive")&&document.activeElement.isSameNode(W))return;W._x_forceModelUpdate(O)})});function wW(W,q,z,J){return P(()=>{if(z instanceof CustomEvent&&z.detail!==void 0)return z.detail!==null&&z.detail!==void 0?z.detail:z.target.value;else if(Z1(W))if(Array.isArray(J)){let Q=null;if(q.includes("number"))Q=VW(z.target.value);else if(q.includes("boolean"))Q=OW(z.target.value);else Q=z.target.value;return z.target.checked?J.includes(Q)?J:J.concat([Q]):J.filter((U)=>!lJ(U,Q))}else return z.target.checked;else if(W.tagName.toLowerCase()==="select"&&W.multiple){if(q.includes("number"))return Array.from(z.target.selectedOptions).map((Q)=>{let U=Q.value||Q.text;return VW(U)});else if(q.includes("boolean"))return Array.from(z.target.selectedOptions).map((Q)=>{let U=Q.value||Q.text;return OW(U)});return Array.from(z.target.selectedOptions).map((Q)=>{return Q.value||Q.text})}else{let Q;if(Pq(W))if(z.target.checked)Q=z.target.value;else Q=J;else Q=z.target.value;if(q.includes("number"))return VW(Q);else if(q.includes("boolean"))return OW(Q);else if(q.includes("trim"))return Q.trim();else return Q}})}function VW(W){let q=W?parseFloat(W):null;return eJ(q)?q:W}function lJ(W,q){return W==q}function eJ(W){return!Array.isArray(W)&&!isNaN(W)}function S1(W){return W!==null&&typeof W==="object"&&typeof W.get==="function"&&typeof W.set==="function"}H("cloak",(W)=>queueMicrotask(()=>P(()=>W.removeAttribute(o("cloak")))));Xq(()=>`[${o("init")}]`);H("init",b((W,{expression:q},{evaluate:z})=>{if(typeof q==="string")return!!q.trim()&&z(q,{},!1);return z(q,{},!1)}));H("text",(W,{expression:q},{effect:z,evaluateLater:J})=>{let Q=J(q);z(()=>{Q((U)=>{P(()=>{W.textContent=U})})})});H("html",(W,{expression:q},{effect:z,evaluateLater:J})=>{let Q=J(q);z(()=>{Q((U)=>{P(()=>{W.innerHTML=U,W._x_ignoreSelf=!0,K(W),delete W._x_ignoreSelf})})})});J1(a1(":",t1(o("bind:"))));var dq=(W,{value:q,modifiers:z,expression:J,original:Q},{effect:U,cleanup:X})=>{if(!q){let Z={};zJ(Z),E(W,J)(($)=>{Eq(W,$,Q)},{scope:Z});return}if(q==="key")return WQ(W,J);if(W._x_inlineBindings&&W._x_inlineBindings[q]&&W._x_inlineBindings[q].extract)return;let Y=E(W,J);U(()=>Y((Z)=>{if(Z===void 0&&typeof J==="string"&&J.match(/\./))Z="";P(()=>Aq(W,q,Z,z))})),X(()=>{W._x_undoAddedClasses&&W._x_undoAddedClasses(),W._x_undoAddedStyles&&W._x_undoAddedStyles()})};dq.inline=(W,{value:q,modifiers:z,expression:J})=>{if(!q)return;if(!W._x_inlineBindings)W._x_inlineBindings={};W._x_inlineBindings[q]={expression:J,extract:!1}};H("bind",dq);function WQ(W,q){W._x_keyExpression=q}Uq(()=>`[${o("data")}]`);H("data",(W,{expression:q},{cleanup:z})=>{if(qQ(W))return;q=q===""?"{}":q;let J={};yW(J,W);let Q={};QJ(Q,J);let U=x(W,q,{scope:Q});if(U===void 0||U===!0)U={};yW(U,W);let X=m(U);v1(X);let Y=JW(W,X);X.init&&x(W,X.init),z(()=>{X.destroy&&x(W,X.destroy),Y()})});LW((W,q)=>{if(W._x_dataStack)q._x_dataStack=W._x_dataStack,q.setAttribute("data-has-alpine-state",!0)});function qQ(W){if(!w)return!1;if(mW)return!0;return W.hasAttribute("data-has-alpine-state")}H("show",(W,{modifiers:q,expression:z},{effect:J})=>{let Q=E(W,z);if(!W._x_doHide)W._x_doHide=()=>{P(()=>{W.style.setProperty("display","none",q.includes("important")?"important":void 0)})};if(!W._x_doShow)W._x_doShow=()=>{P(()=>{if(W.style.length===1&&W.style.display==="none")W.removeAttribute("style");else W.style.removeProperty("display")})};let U=()=>{W._x_doHide(),W._x_isShown=!1},X=()=>{W._x_doShow(),W._x_isShown=!0},Y=()=>setTimeout(X),Z=dW((A)=>A?X():U(),(A)=>{if(typeof W._x_toggleAndCascadeWithTransitions==="function")W._x_toggleAndCascadeWithTransitions(W,A,X,U);else A?Y():U()}),_,$=!0;J(()=>Q((A)=>{if(!$&&A===_)return;if(q.includes("immediate"))A?Y():U();Z(A),_=A,$=!1}))});H("for",(W,{expression:q},{effect:z,cleanup:J})=>{let Q=JQ(q),U=E(W,Q.items),X=E(W,W._x_keyExpression||"index");W._x_prevKeys=[],W._x_lookup={},z(()=>zQ(W,Q,U,X)),J(()=>{Object.values(W._x_lookup).forEach((Y)=>P(()=>{r(Y),Y.remove()})),delete W._x_prevKeys,delete W._x_lookup})});function zQ(W,q,z,J){let Q=(X)=>typeof X==="object"&&!Array.isArray(X),U=W;z((X)=>{if(QQ(X)&&X>=0)X=Array.from(Array(X).keys(),(B)=>B+1);if(X===void 0)X=[];let{_x_lookup:Y,_x_prevKeys:Z}=W,_=[],$=[];if(Q(X))X=Object.entries(X).map(([B,C])=>{let D=w1(q,C,B,X);J((L)=>{if($.includes(L))T("Duplicate key on x-for",W);$.push(L)},{scope:{index:B,...D}}),_.push(D)});else for(let B=0;B<X.length;B++){let C=w1(q,X[B],B,X);J((D)=>{if($.includes(D))T("Duplicate key on x-for",W);$.push(D)},{scope:{index:B,...C}}),_.push(C)}let A=[],O=[],F=[],M=[];for(let B=0;B<Z.length;B++){let C=Z[B];if($.indexOf(C)===-1)F.push(C)}Z=Z.filter((B)=>!F.includes(B));let XW="template";for(let B=0;B<$.length;B++){let C=$[B],D=Z.indexOf(C);if(D===-1)Z.splice(B,0,C),A.push([XW,B]);else if(D!==B){let L=Z.splice(B,1)[0],R=Z.splice(D-1,1)[0];Z.splice(B,0,R),Z.splice(D,0,L),O.push([L,R])}else M.push(C);XW=C}for(let B=0;B<F.length;B++){let C=F[B];if(!(C in Y))continue;P(()=>{r(Y[C]),Y[C].remove()}),delete Y[C]}for(let B=0;B<O.length;B++){let[C,D]=O[B],L=Y[C],R=Y[D],v=document.createElement("div");P(()=>{if(!R)T('x-for ":key" is undefined or invalid',U,D,Y);R.after(v),L.after(R),R._x_currentIfEl&&R.after(R._x_currentIfEl),v.before(L),L._x_currentIfEl&&L.after(L._x_currentIfEl),v.remove()}),R._x_refreshXForScope(_[$.indexOf(D)])}for(let B=0;B<A.length;B++){let[C,D]=A[B],L=C==="template"?U:Y[C];if(L._x_currentIfEl)L=L._x_currentIfEl;let R=_[D],v=$[D],i=document.importNode(U.content,!0).firstElementChild,P1=m(R);if(JW(i,P1,U),i._x_refreshXForScope=(oq)=>{Object.entries(oq).forEach(([sq,rq])=>{P1[sq]=rq})},P(()=>{L.after(i),b(()=>K(i))()}),typeof v==="object")T("x-for key cannot be an object, it must be a string or an integer",U);Y[v]=i}for(let B=0;B<M.length;B++)Y[M[B]]._x_refreshXForScope(_[$.indexOf(M[B])]);U._x_prevKeys=$})}function JQ(W){let q=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,z=/^\s*\(|\)\s*$/g,J=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Q=W.match(J);if(!Q)return;let U={};U.items=Q[2].trim();let X=Q[1].replace(z,"").trim(),Y=X.match(q);if(Y){if(U.item=X.replace(q,"").trim(),U.index=Y[1].trim(),Y[2])U.collection=Y[2].trim()}else U.item=X;return U}function w1(W,q,z,J){let Q={};if(/^\[.*\]$/.test(W.item)&&Array.isArray(q))W.item.replace("[","").replace("]","").split(",").map((X)=>X.trim()).forEach((X,Y)=>{Q[X]=q[Y]});else if(/^\{.*\}$/.test(W.item)&&!Array.isArray(q)&&typeof q==="object")W.item.replace("{","").replace("}","").split(",").map((X)=>X.trim()).forEach((X)=>{Q[X]=q[X]});else Q[W.item]=q;if(W.index)Q[W.index]=z;if(W.collection)Q[W.collection]=J;return Q}function QQ(W){return!Array.isArray(W)&&!isNaN(W)}function uq(){}uq.inline=(W,{expression:q},{cleanup:z})=>{let J=HW(W);if(!J._x_refs)J._x_refs={};J._x_refs[q]=W,z(()=>delete J._x_refs[q])};H("ref",uq);H("if",(W,{expression:q},{effect:z,cleanup:J})=>{if(W.tagName.toLowerCase()!=="template")T("x-if can only be used on a <template> tag",W);let Q=E(W,q),U=()=>{if(W._x_currentIfEl)return W._x_currentIfEl;let Y=W.content.cloneNode(!0).firstElementChild;return JW(Y,{},W),P(()=>{W.after(Y),b(()=>K(Y))()}),W._x_currentIfEl=Y,W._x_undoIf=()=>{P(()=>{r(Y),Y.remove()}),delete W._x_currentIfEl},Y},X=()=>{if(!W._x_undoIf)return;W._x_undoIf(),delete W._x_undoIf};z(()=>Q((Y)=>{Y?U():X()})),J(()=>W._x_undoIf&&W._x_undoIf())});H("id",(W,{expression:q},{evaluate:z})=>{z(q).forEach((Q)=>mJ(W,Q))});LW((W,q)=>{if(W._x_ids)q._x_ids=W._x_ids});J1(a1("@",t1(o("on:"))));H("on",b((W,{value:q,modifiers:z,expression:J},{cleanup:Q})=>{let U=J?E(W,J):()=>{};if(W.tagName.toLowerCase()==="template"){if(!W._x_forwardEvents)W._x_forwardEvents=[];if(!W._x_forwardEvents.includes(q))W._x_forwardEvents.push(q)}let X=rW(W,q,z,(Y)=>{U(()=>{},{scope:{$event:Y},params:[Y]})});Q(()=>X())}));IW("Collapse","collapse","collapse");IW("Intersect","intersect","intersect");IW("Focus","trap","focus");IW("Mask","mask","mask");function IW(W,q,z){H(q,(J)=>T(`You can't use [x-${q}] without first installing the "${W}" plugin here: https://alpinejs.dev/plugins/${z}`,J))}UW.setEvaluator(o1);UW.setReactivityEngine({reactive:C1,effect:GJ,release:CJ,raw:G});var UQ=UW,NW=UQ;class mq{}var nq=mq;NW.store("words",{words:[],add(){this.words.push(new nq)},remove(W){this.words.splice(W,1)}});window.Alpine=NW;NW.start();

//# debugId=60839D51F32F4A8364756E2164756E21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2FscGluZWpzL2Rpc3QvbW9kdWxlLmVzbS5qcyIsICJzcmMvd29yZC5qcyIsICJzcmMvYXBwLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgIi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9zY2hlZHVsZXIuanNcbnZhciBmbHVzaFBlbmRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIHF1ZXVlID0gW107XG52YXIgbGFzdEZsdXNoZWRJbmRleCA9IC0xO1xuZnVuY3Rpb24gc2NoZWR1bGVyKGNhbGxiYWNrKSB7XG4gIHF1ZXVlSm9iKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIHF1ZXVlSm9iKGpvYikge1xuICBpZiAoIXF1ZXVlLmluY2x1ZGVzKGpvYikpXG4gICAgcXVldWUucHVzaChqb2IpO1xuICBxdWV1ZUZsdXNoKCk7XG59XG5mdW5jdGlvbiBkZXF1ZXVlSm9iKGpvYikge1xuICBsZXQgaW5kZXggPSBxdWV1ZS5pbmRleE9mKGpvYik7XG4gIGlmIChpbmRleCAhPT0gLTEgJiYgaW5kZXggPiBsYXN0Rmx1c2hlZEluZGV4KVxuICAgIHF1ZXVlLnNwbGljZShpbmRleCwgMSk7XG59XG5mdW5jdGlvbiBxdWV1ZUZsdXNoKCkge1xuICBpZiAoIWZsdXNoaW5nICYmICFmbHVzaFBlbmRpbmcpIHtcbiAgICBmbHVzaFBlbmRpbmcgPSB0cnVlO1xuICAgIHF1ZXVlTWljcm90YXNrKGZsdXNoSm9icyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoSm9icygpIHtcbiAgZmx1c2hQZW5kaW5nID0gZmFsc2U7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldKCk7XG4gICAgbGFzdEZsdXNoZWRJbmRleCA9IGk7XG4gIH1cbiAgcXVldWUubGVuZ3RoID0gMDtcbiAgbGFzdEZsdXNoZWRJbmRleCA9IC0xO1xuICBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvcmVhY3Rpdml0eS5qc1xudmFyIHJlYWN0aXZlO1xudmFyIGVmZmVjdDtcbnZhciByZWxlYXNlO1xudmFyIHJhdztcbnZhciBzaG91bGRTY2hlZHVsZSA9IHRydWU7XG5mdW5jdGlvbiBkaXNhYmxlRWZmZWN0U2NoZWR1bGluZyhjYWxsYmFjaykge1xuICBzaG91bGRTY2hlZHVsZSA9IGZhbHNlO1xuICBjYWxsYmFjaygpO1xuICBzaG91bGRTY2hlZHVsZSA9IHRydWU7XG59XG5mdW5jdGlvbiBzZXRSZWFjdGl2aXR5RW5naW5lKGVuZ2luZSkge1xuICByZWFjdGl2ZSA9IGVuZ2luZS5yZWFjdGl2ZTtcbiAgcmVsZWFzZSA9IGVuZ2luZS5yZWxlYXNlO1xuICBlZmZlY3QgPSAoY2FsbGJhY2spID0+IGVuZ2luZS5lZmZlY3QoY2FsbGJhY2ssIHsgc2NoZWR1bGVyOiAodGFzaykgPT4ge1xuICAgIGlmIChzaG91bGRTY2hlZHVsZSkge1xuICAgICAgc2NoZWR1bGVyKHRhc2spO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXNrKCk7XG4gICAgfVxuICB9IH0pO1xuICByYXcgPSBlbmdpbmUucmF3O1xufVxuZnVuY3Rpb24gb3ZlcnJpZGVFZmZlY3Qob3ZlcnJpZGUpIHtcbiAgZWZmZWN0ID0gb3ZlcnJpZGU7XG59XG5mdW5jdGlvbiBlbGVtZW50Qm91bmRFZmZlY3QoZWwpIHtcbiAgbGV0IGNsZWFudXAyID0gKCkgPT4ge1xuICB9O1xuICBsZXQgd3JhcHBlZEVmZmVjdCA9IChjYWxsYmFjaykgPT4ge1xuICAgIGxldCBlZmZlY3RSZWZlcmVuY2UgPSBlZmZlY3QoY2FsbGJhY2spO1xuICAgIGlmICghZWwuX3hfZWZmZWN0cykge1xuICAgICAgZWwuX3hfZWZmZWN0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICBlbC5feF9ydW5FZmZlY3RzID0gKCkgPT4ge1xuICAgICAgICBlbC5feF9lZmZlY3RzLmZvckVhY2goKGkpID0+IGkoKSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBlbC5feF9lZmZlY3RzLmFkZChlZmZlY3RSZWZlcmVuY2UpO1xuICAgIGNsZWFudXAyID0gKCkgPT4ge1xuICAgICAgaWYgKGVmZmVjdFJlZmVyZW5jZSA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBlbC5feF9lZmZlY3RzLmRlbGV0ZShlZmZlY3RSZWZlcmVuY2UpO1xuICAgICAgcmVsZWFzZShlZmZlY3RSZWZlcmVuY2UpO1xuICAgIH07XG4gICAgcmV0dXJuIGVmZmVjdFJlZmVyZW5jZTtcbiAgfTtcbiAgcmV0dXJuIFt3cmFwcGVkRWZmZWN0LCAoKSA9PiB7XG4gICAgY2xlYW51cDIoKTtcbiAgfV07XG59XG5mdW5jdGlvbiB3YXRjaChnZXR0ZXIsIGNhbGxiYWNrKSB7XG4gIGxldCBmaXJzdFRpbWUgPSB0cnVlO1xuICBsZXQgb2xkVmFsdWU7XG4gIGxldCBlZmZlY3RSZWZlcmVuY2UgPSBlZmZlY3QoKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGdldHRlcigpO1xuICAgIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoIWZpcnN0VGltZSkge1xuICAgICAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgICAgICBjYWxsYmFjayh2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9sZFZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuICgpID0+IHJlbGVhc2UoZWZmZWN0UmVmZXJlbmNlKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL211dGF0aW9uLmpzXG52YXIgb25BdHRyaWJ1dGVBZGRlZHMgPSBbXTtcbnZhciBvbkVsUmVtb3ZlZHMgPSBbXTtcbnZhciBvbkVsQWRkZWRzID0gW107XG5mdW5jdGlvbiBvbkVsQWRkZWQoY2FsbGJhY2spIHtcbiAgb25FbEFkZGVkcy5wdXNoKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIG9uRWxSZW1vdmVkKGVsLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBpZiAoIWVsLl94X2NsZWFudXBzKVxuICAgICAgZWwuX3hfY2xlYW51cHMgPSBbXTtcbiAgICBlbC5feF9jbGVhbnVwcy5wdXNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayA9IGVsO1xuICAgIG9uRWxSZW1vdmVkcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gb25BdHRyaWJ1dGVzQWRkZWQoY2FsbGJhY2spIHtcbiAgb25BdHRyaWJ1dGVBZGRlZHMucHVzaChjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBvbkF0dHJpYnV0ZVJlbW92ZWQoZWwsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGlmICghZWwuX3hfYXR0cmlidXRlQ2xlYW51cHMpXG4gICAgZWwuX3hfYXR0cmlidXRlQ2xlYW51cHMgPSB7fTtcbiAgaWYgKCFlbC5feF9hdHRyaWJ1dGVDbGVhbnVwc1tuYW1lXSlcbiAgICBlbC5feF9hdHRyaWJ1dGVDbGVhbnVwc1tuYW1lXSA9IFtdO1xuICBlbC5feF9hdHRyaWJ1dGVDbGVhbnVwc1tuYW1lXS5wdXNoKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGNsZWFudXBBdHRyaWJ1dGVzKGVsLCBuYW1lcykge1xuICBpZiAoIWVsLl94X2F0dHJpYnV0ZUNsZWFudXBzKVxuICAgIHJldHVybjtcbiAgT2JqZWN0LmVudHJpZXMoZWwuX3hfYXR0cmlidXRlQ2xlYW51cHMpLmZvckVhY2goKFtuYW1lLCB2YWx1ZV0pID0+IHtcbiAgICBpZiAobmFtZXMgPT09IHZvaWQgMCB8fCBuYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgdmFsdWUuZm9yRWFjaCgoaSkgPT4gaSgpKTtcbiAgICAgIGRlbGV0ZSBlbC5feF9hdHRyaWJ1dGVDbGVhbnVwc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gY2xlYW51cEVsZW1lbnQoZWwpIHtcbiAgZWwuX3hfZWZmZWN0cz8uZm9yRWFjaChkZXF1ZXVlSm9iKTtcbiAgd2hpbGUgKGVsLl94X2NsZWFudXBzPy5sZW5ndGgpXG4gICAgZWwuX3hfY2xlYW51cHMucG9wKCkoKTtcbn1cbnZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG9uTXV0YXRlKTtcbnZhciBjdXJyZW50bHlPYnNlcnZpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0T2JzZXJ2aW5nTXV0YXRpb25zKCkge1xuICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LCB7IHN1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgYXR0cmlidXRlczogdHJ1ZSwgYXR0cmlidXRlT2xkVmFsdWU6IHRydWUgfSk7XG4gIGN1cnJlbnRseU9ic2VydmluZyA9IHRydWU7XG59XG5mdW5jdGlvbiBzdG9wT2JzZXJ2aW5nTXV0YXRpb25zKCkge1xuICBmbHVzaE9ic2VydmVyKCk7XG4gIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgY3VycmVudGx5T2JzZXJ2aW5nID0gZmFsc2U7XG59XG52YXIgcXVldWVkTXV0YXRpb25zID0gW107XG5mdW5jdGlvbiBmbHVzaE9ic2VydmVyKCkge1xuICBsZXQgcmVjb3JkcyA9IG9ic2VydmVyLnRha2VSZWNvcmRzKCk7XG4gIHF1ZXVlZE11dGF0aW9ucy5wdXNoKCgpID0+IHJlY29yZHMubGVuZ3RoID4gMCAmJiBvbk11dGF0ZShyZWNvcmRzKSk7XG4gIGxldCBxdWV1ZUxlbmd0aFdoZW5UcmlnZ2VyZWQgPSBxdWV1ZWRNdXRhdGlvbnMubGVuZ3RoO1xuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgaWYgKHF1ZXVlZE11dGF0aW9ucy5sZW5ndGggPT09IHF1ZXVlTGVuZ3RoV2hlblRyaWdnZXJlZCkge1xuICAgICAgd2hpbGUgKHF1ZXVlZE11dGF0aW9ucy5sZW5ndGggPiAwKVxuICAgICAgICBxdWV1ZWRNdXRhdGlvbnMuc2hpZnQoKSgpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBtdXRhdGVEb20oY2FsbGJhY2spIHtcbiAgaWYgKCFjdXJyZW50bHlPYnNlcnZpbmcpXG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIHN0b3BPYnNlcnZpbmdNdXRhdGlvbnMoKTtcbiAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gIHN0YXJ0T2JzZXJ2aW5nTXV0YXRpb25zKCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG52YXIgaXNDb2xsZWN0aW5nID0gZmFsc2U7XG52YXIgZGVmZXJyZWRNdXRhdGlvbnMgPSBbXTtcbmZ1bmN0aW9uIGRlZmVyTXV0YXRpb25zKCkge1xuICBpc0NvbGxlY3RpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gZmx1c2hBbmRTdG9wRGVmZXJyaW5nTXV0YXRpb25zKCkge1xuICBpc0NvbGxlY3RpbmcgPSBmYWxzZTtcbiAgb25NdXRhdGUoZGVmZXJyZWRNdXRhdGlvbnMpO1xuICBkZWZlcnJlZE11dGF0aW9ucyA9IFtdO1xufVxuZnVuY3Rpb24gb25NdXRhdGUobXV0YXRpb25zKSB7XG4gIGlmIChpc0NvbGxlY3RpbmcpIHtcbiAgICBkZWZlcnJlZE11dGF0aW9ucyA9IGRlZmVycmVkTXV0YXRpb25zLmNvbmNhdChtdXRhdGlvbnMpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgYWRkZWROb2RlcyA9IFtdO1xuICBsZXQgcmVtb3ZlZE5vZGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgbGV0IGFkZGVkQXR0cmlidXRlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGxldCByZW1vdmVkQXR0cmlidXRlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbXV0YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG11dGF0aW9uc1tpXS50YXJnZXQuX3hfaWdub3JlTXV0YXRpb25PYnNlcnZlcilcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmIChtdXRhdGlvbnNbaV0udHlwZSA9PT0gXCJjaGlsZExpc3RcIikge1xuICAgICAgbXV0YXRpb25zW2ldLnJlbW92ZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSAxKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKCFub2RlLl94X21hcmtlcilcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJlbW92ZWROb2Rlcy5hZGQobm9kZSk7XG4gICAgICB9KTtcbiAgICAgIG11dGF0aW9uc1tpXS5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IDEpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAocmVtb3ZlZE5vZGVzLmhhcyhub2RlKSkge1xuICAgICAgICAgIHJlbW92ZWROb2Rlcy5kZWxldGUobm9kZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLl94X21hcmtlcilcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGFkZGVkTm9kZXMucHVzaChub2RlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobXV0YXRpb25zW2ldLnR5cGUgPT09IFwiYXR0cmlidXRlc1wiKSB7XG4gICAgICBsZXQgZWwgPSBtdXRhdGlvbnNbaV0udGFyZ2V0O1xuICAgICAgbGV0IG5hbWUgPSBtdXRhdGlvbnNbaV0uYXR0cmlidXRlTmFtZTtcbiAgICAgIGxldCBvbGRWYWx1ZSA9IG11dGF0aW9uc1tpXS5vbGRWYWx1ZTtcbiAgICAgIGxldCBhZGQyID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWFkZGVkQXR0cmlidXRlcy5oYXMoZWwpKVxuICAgICAgICAgIGFkZGVkQXR0cmlidXRlcy5zZXQoZWwsIFtdKTtcbiAgICAgICAgYWRkZWRBdHRyaWJ1dGVzLmdldChlbCkucHVzaCh7IG5hbWUsIHZhbHVlOiBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfSk7XG4gICAgICB9O1xuICAgICAgbGV0IHJlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFyZW1vdmVkQXR0cmlidXRlcy5oYXMoZWwpKVxuICAgICAgICAgIHJlbW92ZWRBdHRyaWJ1dGVzLnNldChlbCwgW10pO1xuICAgICAgICByZW1vdmVkQXR0cmlidXRlcy5nZXQoZWwpLnB1c2gobmFtZSk7XG4gICAgICB9O1xuICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZShuYW1lKSAmJiBvbGRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBhZGQyKCk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgYWRkMigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZWRBdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJzLCBlbCkgPT4ge1xuICAgIGNsZWFudXBBdHRyaWJ1dGVzKGVsLCBhdHRycyk7XG4gIH0pO1xuICBhZGRlZEF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cnMsIGVsKSA9PiB7XG4gICAgb25BdHRyaWJ1dGVBZGRlZHMuZm9yRWFjaCgoaSkgPT4gaShlbCwgYXR0cnMpKTtcbiAgfSk7XG4gIGZvciAobGV0IG5vZGUgb2YgcmVtb3ZlZE5vZGVzKSB7XG4gICAgaWYgKGFkZGVkTm9kZXMuc29tZSgoaSkgPT4gaS5jb250YWlucyhub2RlKSkpXG4gICAgICBjb250aW51ZTtcbiAgICBvbkVsUmVtb3ZlZHMuZm9yRWFjaCgoaSkgPT4gaShub2RlKSk7XG4gIH1cbiAgZm9yIChsZXQgbm9kZSBvZiBhZGRlZE5vZGVzKSB7XG4gICAgaWYgKCFub2RlLmlzQ29ubmVjdGVkKVxuICAgICAgY29udGludWU7XG4gICAgb25FbEFkZGVkcy5mb3JFYWNoKChpKSA9PiBpKG5vZGUpKTtcbiAgfVxuICBhZGRlZE5vZGVzID0gbnVsbDtcbiAgcmVtb3ZlZE5vZGVzID0gbnVsbDtcbiAgYWRkZWRBdHRyaWJ1dGVzID0gbnVsbDtcbiAgcmVtb3ZlZEF0dHJpYnV0ZXMgPSBudWxsO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvc2NvcGUuanNcbmZ1bmN0aW9uIHNjb3BlKG5vZGUpIHtcbiAgcmV0dXJuIG1lcmdlUHJveGllcyhjbG9zZXN0RGF0YVN0YWNrKG5vZGUpKTtcbn1cbmZ1bmN0aW9uIGFkZFNjb3BlVG9Ob2RlKG5vZGUsIGRhdGEyLCByZWZlcmVuY2VOb2RlKSB7XG4gIG5vZGUuX3hfZGF0YVN0YWNrID0gW2RhdGEyLCAuLi5jbG9zZXN0RGF0YVN0YWNrKHJlZmVyZW5jZU5vZGUgfHwgbm9kZSldO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIG5vZGUuX3hfZGF0YVN0YWNrID0gbm9kZS5feF9kYXRhU3RhY2suZmlsdGVyKChpKSA9PiBpICE9PSBkYXRhMik7XG4gIH07XG59XG5mdW5jdGlvbiBjbG9zZXN0RGF0YVN0YWNrKG5vZGUpIHtcbiAgaWYgKG5vZGUuX3hfZGF0YVN0YWNrKVxuICAgIHJldHVybiBub2RlLl94X2RhdGFTdGFjaztcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSBcImZ1bmN0aW9uXCIgJiYgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gY2xvc2VzdERhdGFTdGFjayhub2RlLmhvc3QpO1xuICB9XG4gIGlmICghbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBjbG9zZXN0RGF0YVN0YWNrKG5vZGUucGFyZW50Tm9kZSk7XG59XG5mdW5jdGlvbiBtZXJnZVByb3hpZXMob2JqZWN0cykge1xuICByZXR1cm4gbmV3IFByb3h5KHsgb2JqZWN0cyB9LCBtZXJnZVByb3h5VHJhcCk7XG59XG52YXIgbWVyZ2VQcm94eVRyYXAgPSB7XG4gIG93bktleXMoeyBvYmplY3RzIH0pIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQob2JqZWN0cy5mbGF0TWFwKChpKSA9PiBPYmplY3Qua2V5cyhpKSkpXG4gICAgKTtcbiAgfSxcbiAgaGFzKHsgb2JqZWN0cyB9LCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgPT0gU3ltYm9sLnVuc2NvcGFibGVzKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBvYmplY3RzLnNvbWUoXG4gICAgICAob2JqKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuYW1lKSB8fCBSZWZsZWN0LmhhcyhvYmosIG5hbWUpXG4gICAgKTtcbiAgfSxcbiAgZ2V0KHsgb2JqZWN0cyB9LCBuYW1lLCB0aGlzUHJveHkpIHtcbiAgICBpZiAobmFtZSA9PSBcInRvSlNPTlwiKVxuICAgICAgcmV0dXJuIGNvbGxhcHNlUHJveGllcztcbiAgICByZXR1cm4gUmVmbGVjdC5nZXQoXG4gICAgICBvYmplY3RzLmZpbmQoXG4gICAgICAgIChvYmopID0+IFJlZmxlY3QuaGFzKG9iaiwgbmFtZSlcbiAgICAgICkgfHwge30sXG4gICAgICBuYW1lLFxuICAgICAgdGhpc1Byb3h5XG4gICAgKTtcbiAgfSxcbiAgc2V0KHsgb2JqZWN0cyB9LCBuYW1lLCB2YWx1ZSwgdGhpc1Byb3h5KSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gb2JqZWN0cy5maW5kKFxuICAgICAgKG9iaikgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgbmFtZSlcbiAgICApIHx8IG9iamVjdHNbb2JqZWN0cy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIG5hbWUpO1xuICAgIGlmIChkZXNjcmlwdG9yPy5zZXQgJiYgZGVzY3JpcHRvcj8uZ2V0KVxuICAgICAgcmV0dXJuIGRlc2NyaXB0b3Iuc2V0LmNhbGwodGhpc1Byb3h5LCB2YWx1ZSkgfHwgdHJ1ZTtcbiAgICByZXR1cm4gUmVmbGVjdC5zZXQodGFyZ2V0LCBuYW1lLCB2YWx1ZSk7XG4gIH1cbn07XG5mdW5jdGlvbiBjb2xsYXBzZVByb3hpZXMoKSB7XG4gIGxldCBrZXlzID0gUmVmbGVjdC5vd25LZXlzKHRoaXMpO1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiB7XG4gICAgYWNjW2tleV0gPSBSZWZsZWN0LmdldCh0aGlzLCBrZXkpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2ludGVyY2VwdG9yLmpzXG5mdW5jdGlvbiBpbml0SW50ZXJjZXB0b3JzKGRhdGEyKSB7XG4gIGxldCBpc09iamVjdDIgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KHZhbCkgJiYgdmFsICE9PSBudWxsO1xuICBsZXQgcmVjdXJzZSA9IChvYmosIGJhc2VQYXRoID0gXCJcIikgPT4ge1xuICAgIE9iamVjdC5lbnRyaWVzKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaikpLmZvckVhY2goKFtrZXksIHsgdmFsdWUsIGVudW1lcmFibGUgfV0pID0+IHtcbiAgICAgIGlmIChlbnVtZXJhYmxlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlLl9fdl9za2lwKVxuICAgICAgICByZXR1cm47XG4gICAgICBsZXQgcGF0aCA9IGJhc2VQYXRoID09PSBcIlwiID8ga2V5IDogYCR7YmFzZVBhdGh9LiR7a2V5fWA7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlLl94X2ludGVyY2VwdG9yKSB7XG4gICAgICAgIG9ialtrZXldID0gdmFsdWUuaW5pdGlhbGl6ZShkYXRhMiwgcGF0aCwga2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc09iamVjdDIodmFsdWUpICYmIHZhbHVlICE9PSBvYmogJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEVsZW1lbnQpKSB7XG4gICAgICAgICAgcmVjdXJzZSh2YWx1ZSwgcGF0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHJlY3Vyc2UoZGF0YTIpO1xufVxuZnVuY3Rpb24gaW50ZXJjZXB0b3IoY2FsbGJhY2ssIG11dGF0ZU9iaiA9ICgpID0+IHtcbn0pIHtcbiAgbGV0IG9iaiA9IHtcbiAgICBpbml0aWFsVmFsdWU6IHZvaWQgMCxcbiAgICBfeF9pbnRlcmNlcHRvcjogdHJ1ZSxcbiAgICBpbml0aWFsaXplKGRhdGEyLCBwYXRoLCBrZXkpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmluaXRpYWxWYWx1ZSwgKCkgPT4gZ2V0KGRhdGEyLCBwYXRoKSwgKHZhbHVlKSA9PiBzZXQoZGF0YTIsIHBhdGgsIHZhbHVlKSwgcGF0aCwga2V5KTtcbiAgICB9XG4gIH07XG4gIG11dGF0ZU9iaihvYmopO1xuICByZXR1cm4gKGluaXRpYWxWYWx1ZSkgPT4ge1xuICAgIGlmICh0eXBlb2YgaW5pdGlhbFZhbHVlID09PSBcIm9iamVjdFwiICYmIGluaXRpYWxWYWx1ZSAhPT0gbnVsbCAmJiBpbml0aWFsVmFsdWUuX3hfaW50ZXJjZXB0b3IpIHtcbiAgICAgIGxldCBpbml0aWFsaXplID0gb2JqLmluaXRpYWxpemUuYmluZChvYmopO1xuICAgICAgb2JqLmluaXRpYWxpemUgPSAoZGF0YTIsIHBhdGgsIGtleSkgPT4ge1xuICAgICAgICBsZXQgaW5uZXJWYWx1ZSA9IGluaXRpYWxWYWx1ZS5pbml0aWFsaXplKGRhdGEyLCBwYXRoLCBrZXkpO1xuICAgICAgICBvYmouaW5pdGlhbFZhbHVlID0gaW5uZXJWYWx1ZTtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxpemUoZGF0YTIsIHBhdGgsIGtleSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmouaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0KG9iaiwgcGF0aCkge1xuICByZXR1cm4gcGF0aC5zcGxpdChcIi5cIikucmVkdWNlKChjYXJyeSwgc2VnbWVudCkgPT4gY2Fycnlbc2VnbWVudF0sIG9iaik7XG59XG5mdW5jdGlvbiBzZXQob2JqLCBwYXRoLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIpXG4gICAgcGF0aCA9IHBhdGguc3BsaXQoXCIuXCIpO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDEpXG4gICAgb2JqW3BhdGhbMF1dID0gdmFsdWU7XG4gIGVsc2UgaWYgKHBhdGgubGVuZ3RoID09PSAwKVxuICAgIHRocm93IGVycm9yO1xuICBlbHNlIHtcbiAgICBpZiAob2JqW3BhdGhbMF1dKVxuICAgICAgcmV0dXJuIHNldChvYmpbcGF0aFswXV0sIHBhdGguc2xpY2UoMSksIHZhbHVlKTtcbiAgICBlbHNlIHtcbiAgICAgIG9ialtwYXRoWzBdXSA9IHt9O1xuICAgICAgcmV0dXJuIHNldChvYmpbcGF0aFswXV0sIHBhdGguc2xpY2UoMSksIHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy5qc1xudmFyIG1hZ2ljcyA9IHt9O1xuZnVuY3Rpb24gbWFnaWMobmFtZSwgY2FsbGJhY2spIHtcbiAgbWFnaWNzW25hbWVdID0gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiBpbmplY3RNYWdpY3Mob2JqLCBlbCkge1xuICBsZXQgbWVtb2l6ZWRVdGlsaXRpZXMgPSBnZXRVdGlsaXRpZXMoZWwpO1xuICBPYmplY3QuZW50cmllcyhtYWdpY3MpLmZvckVhY2goKFtuYW1lLCBjYWxsYmFja10pID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBgJCR7bmFtZX1gLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlbCwgbWVtb2l6ZWRVdGlsaXRpZXMpO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gZ2V0VXRpbGl0aWVzKGVsKSB7XG4gIGxldCBbdXRpbGl0aWVzLCBjbGVhbnVwMl0gPSBnZXRFbGVtZW50Qm91bmRVdGlsaXRpZXMoZWwpO1xuICBsZXQgdXRpbHMgPSB7IGludGVyY2VwdG9yLCAuLi51dGlsaXRpZXMgfTtcbiAgb25FbFJlbW92ZWQoZWwsIGNsZWFudXAyKTtcbiAgcmV0dXJuIHV0aWxzO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvZXJyb3IuanNcbmZ1bmN0aW9uIHRyeUNhdGNoKGVsLCBleHByZXNzaW9uLCBjYWxsYmFjaywgLi4uYXJncykge1xuICB0cnkge1xuICAgIHJldHVybiBjYWxsYmFjayguLi5hcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIGVsLCBleHByZXNzaW9uKTtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXJyb3IoZXJyb3IyLCBlbCwgZXhwcmVzc2lvbiA9IHZvaWQgMCkge1xuICBlcnJvcjIgPSBPYmplY3QuYXNzaWduKFxuICAgIGVycm9yMiA/PyB7IG1lc3NhZ2U6IFwiTm8gZXJyb3IgbWVzc2FnZSBnaXZlbi5cIiB9LFxuICAgIHsgZWwsIGV4cHJlc3Npb24gfVxuICApO1xuICBjb25zb2xlLndhcm4oYEFscGluZSBFeHByZXNzaW9uIEVycm9yOiAke2Vycm9yMi5tZXNzYWdlfVxuXG4ke2V4cHJlc3Npb24gPyAnRXhwcmVzc2lvbjogXCInICsgZXhwcmVzc2lvbiArICdcIlxcblxcbicgOiBcIlwifWAsIGVsKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgdGhyb3cgZXJyb3IyO1xuICB9LCAwKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2V2YWx1YXRvci5qc1xudmFyIHNob3VsZEF1dG9FdmFsdWF0ZUZ1bmN0aW9ucyA9IHRydWU7XG5mdW5jdGlvbiBkb250QXV0b0V2YWx1YXRlRnVuY3Rpb25zKGNhbGxiYWNrKSB7XG4gIGxldCBjYWNoZSA9IHNob3VsZEF1dG9FdmFsdWF0ZUZ1bmN0aW9ucztcbiAgc2hvdWxkQXV0b0V2YWx1YXRlRnVuY3Rpb25zID0gZmFsc2U7XG4gIGxldCByZXN1bHQgPSBjYWxsYmFjaygpO1xuICBzaG91bGRBdXRvRXZhbHVhdGVGdW5jdGlvbnMgPSBjYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlKGVsLCBleHByZXNzaW9uLCBleHRyYXMgPSB7fSkge1xuICBsZXQgcmVzdWx0O1xuICBldmFsdWF0ZUxhdGVyKGVsLCBleHByZXNzaW9uKSgodmFsdWUpID0+IHJlc3VsdCA9IHZhbHVlLCBleHRyYXMpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZXZhbHVhdGVMYXRlciguLi5hcmdzKSB7XG4gIHJldHVybiB0aGVFdmFsdWF0b3JGdW5jdGlvbiguLi5hcmdzKTtcbn1cbnZhciB0aGVFdmFsdWF0b3JGdW5jdGlvbiA9IG5vcm1hbEV2YWx1YXRvcjtcbmZ1bmN0aW9uIHNldEV2YWx1YXRvcihuZXdFdmFsdWF0b3IpIHtcbiAgdGhlRXZhbHVhdG9yRnVuY3Rpb24gPSBuZXdFdmFsdWF0b3I7XG59XG5mdW5jdGlvbiBub3JtYWxFdmFsdWF0b3IoZWwsIGV4cHJlc3Npb24pIHtcbiAgbGV0IG92ZXJyaWRkZW5NYWdpY3MgPSB7fTtcbiAgaW5qZWN0TWFnaWNzKG92ZXJyaWRkZW5NYWdpY3MsIGVsKTtcbiAgbGV0IGRhdGFTdGFjayA9IFtvdmVycmlkZGVuTWFnaWNzLCAuLi5jbG9zZXN0RGF0YVN0YWNrKGVsKV07XG4gIGxldCBldmFsdWF0b3IgPSB0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJmdW5jdGlvblwiID8gZ2VuZXJhdGVFdmFsdWF0b3JGcm9tRnVuY3Rpb24oZGF0YVN0YWNrLCBleHByZXNzaW9uKSA6IGdlbmVyYXRlRXZhbHVhdG9yRnJvbVN0cmluZyhkYXRhU3RhY2ssIGV4cHJlc3Npb24sIGVsKTtcbiAgcmV0dXJuIHRyeUNhdGNoLmJpbmQobnVsbCwgZWwsIGV4cHJlc3Npb24sIGV2YWx1YXRvcik7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZUV2YWx1YXRvckZyb21GdW5jdGlvbihkYXRhU3RhY2ssIGZ1bmMpIHtcbiAgcmV0dXJuIChyZWNlaXZlciA9ICgpID0+IHtcbiAgfSwgeyBzY29wZTogc2NvcGUyID0ge30sIHBhcmFtcyA9IFtdIH0gPSB7fSkgPT4ge1xuICAgIGxldCByZXN1bHQgPSBmdW5jLmFwcGx5KG1lcmdlUHJveGllcyhbc2NvcGUyLCAuLi5kYXRhU3RhY2tdKSwgcGFyYW1zKTtcbiAgICBydW5JZlR5cGVPZkZ1bmN0aW9uKHJlY2VpdmVyLCByZXN1bHQpO1xuICB9O1xufVxudmFyIGV2YWx1YXRvck1lbW8gPSB7fTtcbmZ1bmN0aW9uIGdlbmVyYXRlRnVuY3Rpb25Gcm9tU3RyaW5nKGV4cHJlc3Npb24sIGVsKSB7XG4gIGlmIChldmFsdWF0b3JNZW1vW2V4cHJlc3Npb25dKSB7XG4gICAgcmV0dXJuIGV2YWx1YXRvck1lbW9bZXhwcmVzc2lvbl07XG4gIH1cbiAgbGV0IEFzeW5jRnVuY3Rpb24gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXN5bmMgZnVuY3Rpb24oKSB7XG4gIH0pLmNvbnN0cnVjdG9yO1xuICBsZXQgcmlnaHRTaWRlU2FmZUV4cHJlc3Npb24gPSAvXltcXG5cXHNdKmlmLipcXCguKlxcKS8udGVzdChleHByZXNzaW9uLnRyaW0oKSkgfHwgL14obGV0fGNvbnN0KVxccy8udGVzdChleHByZXNzaW9uLnRyaW0oKSkgPyBgKGFzeW5jKCk9PnsgJHtleHByZXNzaW9ufSB9KSgpYCA6IGV4cHJlc3Npb247XG4gIGNvbnN0IHNhZmVBc3luY0Z1bmN0aW9uID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgZnVuYzIgPSBuZXcgQXN5bmNGdW5jdGlvbihcbiAgICAgICAgW1wiX19zZWxmXCIsIFwic2NvcGVcIl0sXG4gICAgICAgIGB3aXRoIChzY29wZSkgeyBfX3NlbGYucmVzdWx0ID0gJHtyaWdodFNpZGVTYWZlRXhwcmVzc2lvbn0gfTsgX19zZWxmLmZpbmlzaGVkID0gdHJ1ZTsgcmV0dXJuIF9fc2VsZi5yZXN1bHQ7YFxuICAgICAgKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmdW5jMiwgXCJuYW1lXCIsIHtcbiAgICAgICAgdmFsdWU6IGBbQWxwaW5lXSAke2V4cHJlc3Npb259YFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuYzI7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlcnJvcjIsIGVsLCBleHByZXNzaW9uKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH07XG4gIGxldCBmdW5jID0gc2FmZUFzeW5jRnVuY3Rpb24oKTtcbiAgZXZhbHVhdG9yTWVtb1tleHByZXNzaW9uXSA9IGZ1bmM7XG4gIHJldHVybiBmdW5jO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVFdmFsdWF0b3JGcm9tU3RyaW5nKGRhdGFTdGFjaywgZXhwcmVzc2lvbiwgZWwpIHtcbiAgbGV0IGZ1bmMgPSBnZW5lcmF0ZUZ1bmN0aW9uRnJvbVN0cmluZyhleHByZXNzaW9uLCBlbCk7XG4gIHJldHVybiAocmVjZWl2ZXIgPSAoKSA9PiB7XG4gIH0sIHsgc2NvcGU6IHNjb3BlMiA9IHt9LCBwYXJhbXMgPSBbXSB9ID0ge30pID0+IHtcbiAgICBmdW5jLnJlc3VsdCA9IHZvaWQgMDtcbiAgICBmdW5jLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgbGV0IGNvbXBsZXRlU2NvcGUgPSBtZXJnZVByb3hpZXMoW3Njb3BlMiwgLi4uZGF0YVN0YWNrXSk7XG4gICAgaWYgKHR5cGVvZiBmdW5jID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGxldCBwcm9taXNlID0gZnVuYyhmdW5jLCBjb21wbGV0ZVNjb3BlKS5jYXRjaCgoZXJyb3IyKSA9PiBoYW5kbGVFcnJvcihlcnJvcjIsIGVsLCBleHByZXNzaW9uKSk7XG4gICAgICBpZiAoZnVuYy5maW5pc2hlZCkge1xuICAgICAgICBydW5JZlR5cGVPZkZ1bmN0aW9uKHJlY2VpdmVyLCBmdW5jLnJlc3VsdCwgY29tcGxldGVTY29wZSwgcGFyYW1zLCBlbCk7XG4gICAgICAgIGZ1bmMucmVzdWx0ID0gdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBydW5JZlR5cGVPZkZ1bmN0aW9uKHJlY2VpdmVyLCByZXN1bHQsIGNvbXBsZXRlU2NvcGUsIHBhcmFtcywgZWwpO1xuICAgICAgICB9KS5jYXRjaCgoZXJyb3IyKSA9PiBoYW5kbGVFcnJvcihlcnJvcjIsIGVsLCBleHByZXNzaW9uKSkuZmluYWxseSgoKSA9PiBmdW5jLnJlc3VsdCA9IHZvaWQgMCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gcnVuSWZUeXBlT2ZGdW5jdGlvbihyZWNlaXZlciwgdmFsdWUsIHNjb3BlMiwgcGFyYW1zLCBlbCkge1xuICBpZiAoc2hvdWxkQXV0b0V2YWx1YXRlRnVuY3Rpb25zICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgbGV0IHJlc3VsdCA9IHZhbHVlLmFwcGx5KHNjb3BlMiwgcGFyYW1zKTtcbiAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgcmVzdWx0LnRoZW4oKGkpID0+IHJ1bklmVHlwZU9mRnVuY3Rpb24ocmVjZWl2ZXIsIGksIHNjb3BlMiwgcGFyYW1zKSkuY2F0Y2goKGVycm9yMikgPT4gaGFuZGxlRXJyb3IoZXJyb3IyLCBlbCwgdmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjZWl2ZXIocmVzdWx0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgIHZhbHVlLnRoZW4oKGkpID0+IHJlY2VpdmVyKGkpKTtcbiAgfSBlbHNlIHtcbiAgICByZWNlaXZlcih2YWx1ZSk7XG4gIH1cbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMuanNcbnZhciBwcmVmaXhBc1N0cmluZyA9IFwieC1cIjtcbmZ1bmN0aW9uIHByZWZpeChzdWJqZWN0ID0gXCJcIikge1xuICByZXR1cm4gcHJlZml4QXNTdHJpbmcgKyBzdWJqZWN0O1xufVxuZnVuY3Rpb24gc2V0UHJlZml4KG5ld1ByZWZpeCkge1xuICBwcmVmaXhBc1N0cmluZyA9IG5ld1ByZWZpeDtcbn1cbnZhciBkaXJlY3RpdmVIYW5kbGVycyA9IHt9O1xuZnVuY3Rpb24gZGlyZWN0aXZlKG5hbWUsIGNhbGxiYWNrKSB7XG4gIGRpcmVjdGl2ZUhhbmRsZXJzW25hbWVdID0gY2FsbGJhY2s7XG4gIHJldHVybiB7XG4gICAgYmVmb3JlKGRpcmVjdGl2ZTIpIHtcbiAgICAgIGlmICghZGlyZWN0aXZlSGFuZGxlcnNbZGlyZWN0aXZlMl0pIHtcbiAgICAgICAgY29uc29sZS53YXJuKFN0cmluZy5yYXdgQ2Fubm90IGZpbmQgZGlyZWN0aXZlIFxcYCR7ZGlyZWN0aXZlMn1cXGAuIFxcYCR7bmFtZX1cXGAgd2lsbCB1c2UgdGhlIGRlZmF1bHQgb3JkZXIgb2YgZXhlY3V0aW9uYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBvcyA9IGRpcmVjdGl2ZU9yZGVyLmluZGV4T2YoZGlyZWN0aXZlMik7XG4gICAgICBkaXJlY3RpdmVPcmRlci5zcGxpY2UocG9zID49IDAgPyBwb3MgOiBkaXJlY3RpdmVPcmRlci5pbmRleE9mKFwiREVGQVVMVFwiKSwgMCwgbmFtZSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGlyZWN0aXZlRXhpc3RzKG5hbWUpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRpcmVjdGl2ZUhhbmRsZXJzKS5pbmNsdWRlcyhuYW1lKTtcbn1cbmZ1bmN0aW9uIGRpcmVjdGl2ZXMoZWwsIGF0dHJpYnV0ZXMsIG9yaWdpbmFsQXR0cmlidXRlT3ZlcnJpZGUpIHtcbiAgYXR0cmlidXRlcyA9IEFycmF5LmZyb20oYXR0cmlidXRlcyk7XG4gIGlmIChlbC5feF92aXJ0dWFsRGlyZWN0aXZlcykge1xuICAgIGxldCB2QXR0cmlidXRlcyA9IE9iamVjdC5lbnRyaWVzKGVsLl94X3ZpcnR1YWxEaXJlY3RpdmVzKS5tYXAoKFtuYW1lLCB2YWx1ZV0pID0+ICh7IG5hbWUsIHZhbHVlIH0pKTtcbiAgICBsZXQgc3RhdGljQXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNPbmx5KHZBdHRyaWJ1dGVzKTtcbiAgICB2QXR0cmlidXRlcyA9IHZBdHRyaWJ1dGVzLm1hcCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICBpZiAoc3RhdGljQXR0cmlidXRlcy5maW5kKChhdHRyKSA9PiBhdHRyLm5hbWUgPT09IGF0dHJpYnV0ZS5uYW1lKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGB4LWJpbmQ6JHthdHRyaWJ1dGUubmFtZX1gLFxuICAgICAgICAgIHZhbHVlOiBgXCIke2F0dHJpYnV0ZS52YWx1ZX1cImBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhdHRyaWJ1dGU7XG4gICAgfSk7XG4gICAgYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMuY29uY2F0KHZBdHRyaWJ1dGVzKTtcbiAgfVxuICBsZXQgdHJhbnNmb3JtZWRBdHRyaWJ1dGVNYXAgPSB7fTtcbiAgbGV0IGRpcmVjdGl2ZXMyID0gYXR0cmlidXRlcy5tYXAodG9UcmFuc2Zvcm1lZEF0dHJpYnV0ZXMoKG5ld05hbWUsIG9sZE5hbWUpID0+IHRyYW5zZm9ybWVkQXR0cmlidXRlTWFwW25ld05hbWVdID0gb2xkTmFtZSkpLmZpbHRlcihvdXROb25BbHBpbmVBdHRyaWJ1dGVzKS5tYXAodG9QYXJzZWREaXJlY3RpdmVzKHRyYW5zZm9ybWVkQXR0cmlidXRlTWFwLCBvcmlnaW5hbEF0dHJpYnV0ZU92ZXJyaWRlKSkuc29ydChieVByaW9yaXR5KTtcbiAgcmV0dXJuIGRpcmVjdGl2ZXMyLm1hcCgoZGlyZWN0aXZlMikgPT4ge1xuICAgIHJldHVybiBnZXREaXJlY3RpdmVIYW5kbGVyKGVsLCBkaXJlY3RpdmUyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVzT25seShhdHRyaWJ1dGVzKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGF0dHJpYnV0ZXMpLm1hcCh0b1RyYW5zZm9ybWVkQXR0cmlidXRlcygpKS5maWx0ZXIoKGF0dHIpID0+ICFvdXROb25BbHBpbmVBdHRyaWJ1dGVzKGF0dHIpKTtcbn1cbnZhciBpc0RlZmVycmluZ0hhbmRsZXJzID0gZmFsc2U7XG52YXIgZGlyZWN0aXZlSGFuZGxlclN0YWNrcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG52YXIgY3VycmVudEhhbmRsZXJTdGFja0tleSA9IFN5bWJvbCgpO1xuZnVuY3Rpb24gZGVmZXJIYW5kbGluZ0RpcmVjdGl2ZXMoY2FsbGJhY2spIHtcbiAgaXNEZWZlcnJpbmdIYW5kbGVycyA9IHRydWU7XG4gIGxldCBrZXkgPSBTeW1ib2woKTtcbiAgY3VycmVudEhhbmRsZXJTdGFja0tleSA9IGtleTtcbiAgZGlyZWN0aXZlSGFuZGxlclN0YWNrcy5zZXQoa2V5LCBbXSk7XG4gIGxldCBmbHVzaEhhbmRsZXJzID0gKCkgPT4ge1xuICAgIHdoaWxlIChkaXJlY3RpdmVIYW5kbGVyU3RhY2tzLmdldChrZXkpLmxlbmd0aClcbiAgICAgIGRpcmVjdGl2ZUhhbmRsZXJTdGFja3MuZ2V0KGtleSkuc2hpZnQoKSgpO1xuICAgIGRpcmVjdGl2ZUhhbmRsZXJTdGFja3MuZGVsZXRlKGtleSk7XG4gIH07XG4gIGxldCBzdG9wRGVmZXJyaW5nID0gKCkgPT4ge1xuICAgIGlzRGVmZXJyaW5nSGFuZGxlcnMgPSBmYWxzZTtcbiAgICBmbHVzaEhhbmRsZXJzKCk7XG4gIH07XG4gIGNhbGxiYWNrKGZsdXNoSGFuZGxlcnMpO1xuICBzdG9wRGVmZXJyaW5nKCk7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50Qm91bmRVdGlsaXRpZXMoZWwpIHtcbiAgbGV0IGNsZWFudXBzID0gW107XG4gIGxldCBjbGVhbnVwMiA9IChjYWxsYmFjaykgPT4gY2xlYW51cHMucHVzaChjYWxsYmFjayk7XG4gIGxldCBbZWZmZWN0MywgY2xlYW51cEVmZmVjdF0gPSBlbGVtZW50Qm91bmRFZmZlY3QoZWwpO1xuICBjbGVhbnVwcy5wdXNoKGNsZWFudXBFZmZlY3QpO1xuICBsZXQgdXRpbGl0aWVzID0ge1xuICAgIEFscGluZTogYWxwaW5lX2RlZmF1bHQsXG4gICAgZWZmZWN0OiBlZmZlY3QzLFxuICAgIGNsZWFudXA6IGNsZWFudXAyLFxuICAgIGV2YWx1YXRlTGF0ZXI6IGV2YWx1YXRlTGF0ZXIuYmluZChldmFsdWF0ZUxhdGVyLCBlbCksXG4gICAgZXZhbHVhdGU6IGV2YWx1YXRlLmJpbmQoZXZhbHVhdGUsIGVsKVxuICB9O1xuICBsZXQgZG9DbGVhbnVwID0gKCkgPT4gY2xlYW51cHMuZm9yRWFjaCgoaSkgPT4gaSgpKTtcbiAgcmV0dXJuIFt1dGlsaXRpZXMsIGRvQ2xlYW51cF07XG59XG5mdW5jdGlvbiBnZXREaXJlY3RpdmVIYW5kbGVyKGVsLCBkaXJlY3RpdmUyKSB7XG4gIGxldCBub29wID0gKCkgPT4ge1xuICB9O1xuICBsZXQgaGFuZGxlcjQgPSBkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmUyLnR5cGVdIHx8IG5vb3A7XG4gIGxldCBbdXRpbGl0aWVzLCBjbGVhbnVwMl0gPSBnZXRFbGVtZW50Qm91bmRVdGlsaXRpZXMoZWwpO1xuICBvbkF0dHJpYnV0ZVJlbW92ZWQoZWwsIGRpcmVjdGl2ZTIub3JpZ2luYWwsIGNsZWFudXAyKTtcbiAgbGV0IGZ1bGxIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmIChlbC5feF9pZ25vcmUgfHwgZWwuX3hfaWdub3JlU2VsZilcbiAgICAgIHJldHVybjtcbiAgICBoYW5kbGVyNC5pbmxpbmUgJiYgaGFuZGxlcjQuaW5saW5lKGVsLCBkaXJlY3RpdmUyLCB1dGlsaXRpZXMpO1xuICAgIGhhbmRsZXI0ID0gaGFuZGxlcjQuYmluZChoYW5kbGVyNCwgZWwsIGRpcmVjdGl2ZTIsIHV0aWxpdGllcyk7XG4gICAgaXNEZWZlcnJpbmdIYW5kbGVycyA/IGRpcmVjdGl2ZUhhbmRsZXJTdGFja3MuZ2V0KGN1cnJlbnRIYW5kbGVyU3RhY2tLZXkpLnB1c2goaGFuZGxlcjQpIDogaGFuZGxlcjQoKTtcbiAgfTtcbiAgZnVsbEhhbmRsZXIucnVuQ2xlYW51cHMgPSBjbGVhbnVwMjtcbiAgcmV0dXJuIGZ1bGxIYW5kbGVyO1xufVxudmFyIHN0YXJ0aW5nV2l0aCA9IChzdWJqZWN0LCByZXBsYWNlbWVudCkgPT4gKHsgbmFtZSwgdmFsdWUgfSkgPT4ge1xuICBpZiAobmFtZS5zdGFydHNXaXRoKHN1YmplY3QpKVxuICAgIG5hbWUgPSBuYW1lLnJlcGxhY2Uoc3ViamVjdCwgcmVwbGFjZW1lbnQpO1xuICByZXR1cm4geyBuYW1lLCB2YWx1ZSB9O1xufTtcbnZhciBpbnRvID0gKGkpID0+IGk7XG5mdW5jdGlvbiB0b1RyYW5zZm9ybWVkQXR0cmlidXRlcyhjYWxsYmFjayA9ICgpID0+IHtcbn0pIHtcbiAgcmV0dXJuICh7IG5hbWUsIHZhbHVlIH0pID0+IHtcbiAgICBsZXQgeyBuYW1lOiBuZXdOYW1lLCB2YWx1ZTogbmV3VmFsdWUgfSA9IGF0dHJpYnV0ZVRyYW5zZm9ybWVycy5yZWR1Y2UoKGNhcnJ5LCB0cmFuc2Zvcm0pID0+IHtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm0oY2FycnkpO1xuICAgIH0sIHsgbmFtZSwgdmFsdWUgfSk7XG4gICAgaWYgKG5ld05hbWUgIT09IG5hbWUpXG4gICAgICBjYWxsYmFjayhuZXdOYW1lLCBuYW1lKTtcbiAgICByZXR1cm4geyBuYW1lOiBuZXdOYW1lLCB2YWx1ZTogbmV3VmFsdWUgfTtcbiAgfTtcbn1cbnZhciBhdHRyaWJ1dGVUcmFuc2Zvcm1lcnMgPSBbXTtcbmZ1bmN0aW9uIG1hcEF0dHJpYnV0ZXMoY2FsbGJhY2spIHtcbiAgYXR0cmlidXRlVHJhbnNmb3JtZXJzLnB1c2goY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gb3V0Tm9uQWxwaW5lQXR0cmlidXRlcyh7IG5hbWUgfSkge1xuICByZXR1cm4gYWxwaW5lQXR0cmlidXRlUmVnZXgoKS50ZXN0KG5hbWUpO1xufVxudmFyIGFscGluZUF0dHJpYnV0ZVJlZ2V4ID0gKCkgPT4gbmV3IFJlZ0V4cChgXiR7cHJlZml4QXNTdHJpbmd9KFteOl4uXSspXFxcXGJgKTtcbmZ1bmN0aW9uIHRvUGFyc2VkRGlyZWN0aXZlcyh0cmFuc2Zvcm1lZEF0dHJpYnV0ZU1hcCwgb3JpZ2luYWxBdHRyaWJ1dGVPdmVycmlkZSkge1xuICByZXR1cm4gKHsgbmFtZSwgdmFsdWUgfSkgPT4ge1xuICAgIGxldCB0eXBlTWF0Y2ggPSBuYW1lLm1hdGNoKGFscGluZUF0dHJpYnV0ZVJlZ2V4KCkpO1xuICAgIGxldCB2YWx1ZU1hdGNoID0gbmFtZS5tYXRjaCgvOihbYS16QS1aMC05XFwtXzpdKykvKTtcbiAgICBsZXQgbW9kaWZpZXJzID0gbmFtZS5tYXRjaCgvXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZykgfHwgW107XG4gICAgbGV0IG9yaWdpbmFsID0gb3JpZ2luYWxBdHRyaWJ1dGVPdmVycmlkZSB8fCB0cmFuc2Zvcm1lZEF0dHJpYnV0ZU1hcFtuYW1lXSB8fCBuYW1lO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlTWF0Y2ggPyB0eXBlTWF0Y2hbMV0gOiBudWxsLFxuICAgICAgdmFsdWU6IHZhbHVlTWF0Y2ggPyB2YWx1ZU1hdGNoWzFdIDogbnVsbCxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzLm1hcCgoaSkgPT4gaS5yZXBsYWNlKFwiLlwiLCBcIlwiKSksXG4gICAgICBleHByZXNzaW9uOiB2YWx1ZSxcbiAgICAgIG9yaWdpbmFsXG4gICAgfTtcbiAgfTtcbn1cbnZhciBERUZBVUxUID0gXCJERUZBVUxUXCI7XG52YXIgZGlyZWN0aXZlT3JkZXIgPSBbXG4gIFwiaWdub3JlXCIsXG4gIFwicmVmXCIsXG4gIFwiZGF0YVwiLFxuICBcImlkXCIsXG4gIFwiYW5jaG9yXCIsXG4gIFwiYmluZFwiLFxuICBcImluaXRcIixcbiAgXCJmb3JcIixcbiAgXCJtb2RlbFwiLFxuICBcIm1vZGVsYWJsZVwiLFxuICBcInRyYW5zaXRpb25cIixcbiAgXCJzaG93XCIsXG4gIFwiaWZcIixcbiAgREVGQVVMVCxcbiAgXCJ0ZWxlcG9ydFwiXG5dO1xuZnVuY3Rpb24gYnlQcmlvcml0eShhLCBiKSB7XG4gIGxldCB0eXBlQSA9IGRpcmVjdGl2ZU9yZGVyLmluZGV4T2YoYS50eXBlKSA9PT0gLTEgPyBERUZBVUxUIDogYS50eXBlO1xuICBsZXQgdHlwZUIgPSBkaXJlY3RpdmVPcmRlci5pbmRleE9mKGIudHlwZSkgPT09IC0xID8gREVGQVVMVCA6IGIudHlwZTtcbiAgcmV0dXJuIGRpcmVjdGl2ZU9yZGVyLmluZGV4T2YodHlwZUEpIC0gZGlyZWN0aXZlT3JkZXIuaW5kZXhPZih0eXBlQik7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9kaXNwYXRjaC5qc1xuZnVuY3Rpb24gZGlzcGF0Y2goZWwsIG5hbWUsIGRldGFpbCA9IHt9KSB7XG4gIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHtcbiAgICAgIGRldGFpbCxcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAvLyBBbGxvd3MgZXZlbnRzIHRvIHBhc3MgdGhlIHNoYWRvdyBET00gYmFycmllci5cbiAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pXG4gICk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy93YWxrLmpzXG5mdW5jdGlvbiB3YWxrKGVsLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09IFwiZnVuY3Rpb25cIiAmJiBlbCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICBBcnJheS5mcm9tKGVsLmNoaWxkcmVuKS5mb3JFYWNoKChlbDIpID0+IHdhbGsoZWwyLCBjYWxsYmFjaykpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2tpcCA9IGZhbHNlO1xuICBjYWxsYmFjayhlbCwgKCkgPT4gc2tpcCA9IHRydWUpO1xuICBpZiAoc2tpcClcbiAgICByZXR1cm47XG4gIGxldCBub2RlID0gZWwuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgd2Fsayhub2RlLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgIG5vZGUgPSBub2RlLm5leHRFbGVtZW50U2libGluZztcbiAgfVxufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvd2Fybi5qc1xuZnVuY3Rpb24gd2FybihtZXNzYWdlLCAuLi5hcmdzKSB7XG4gIGNvbnNvbGUud2FybihgQWxwaW5lIFdhcm5pbmc6ICR7bWVzc2FnZX1gLCAuLi5hcmdzKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2xpZmVjeWNsZS5qc1xudmFyIHN0YXJ0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICBpZiAoc3RhcnRlZClcbiAgICB3YXJuKFwiQWxwaW5lIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQgb24gdGhpcyBwYWdlLiBDYWxsaW5nIEFscGluZS5zdGFydCgpIG1vcmUgdGhhbiBvbmNlIGNhbiBjYXVzZSBwcm9ibGVtcy5cIik7XG4gIHN0YXJ0ZWQgPSB0cnVlO1xuICBpZiAoIWRvY3VtZW50LmJvZHkpXG4gICAgd2FybihcIlVuYWJsZSB0byBpbml0aWFsaXplLiBUcnlpbmcgdG8gbG9hZCBBbHBpbmUgYmVmb3JlIGA8Ym9keT5gIGlzIGF2YWlsYWJsZS4gRGlkIHlvdSBmb3JnZXQgdG8gYWRkIGBkZWZlcmAgaW4gQWxwaW5lJ3MgYDxzY3JpcHQ+YCB0YWc/XCIpO1xuICBkaXNwYXRjaChkb2N1bWVudCwgXCJhbHBpbmU6aW5pdFwiKTtcbiAgZGlzcGF0Y2goZG9jdW1lbnQsIFwiYWxwaW5lOmluaXRpYWxpemluZ1wiKTtcbiAgc3RhcnRPYnNlcnZpbmdNdXRhdGlvbnMoKTtcbiAgb25FbEFkZGVkKChlbCkgPT4gaW5pdFRyZWUoZWwsIHdhbGspKTtcbiAgb25FbFJlbW92ZWQoKGVsKSA9PiBkZXN0cm95VHJlZShlbCkpO1xuICBvbkF0dHJpYnV0ZXNBZGRlZCgoZWwsIGF0dHJzKSA9PiB7XG4gICAgZGlyZWN0aXZlcyhlbCwgYXR0cnMpLmZvckVhY2goKGhhbmRsZSkgPT4gaGFuZGxlKCkpO1xuICB9KTtcbiAgbGV0IG91dE5lc3RlZENvbXBvbmVudHMgPSAoZWwpID0+ICFjbG9zZXN0Um9vdChlbC5wYXJlbnRFbGVtZW50LCB0cnVlKTtcbiAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGFsbFNlbGVjdG9ycygpLmpvaW4oXCIsXCIpKSkuZmlsdGVyKG91dE5lc3RlZENvbXBvbmVudHMpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgaW5pdFRyZWUoZWwpO1xuICB9KTtcbiAgZGlzcGF0Y2goZG9jdW1lbnQsIFwiYWxwaW5lOmluaXRpYWxpemVkXCIpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB3YXJuQWJvdXRNaXNzaW5nUGx1Z2lucygpO1xuICB9KTtcbn1cbnZhciByb290U2VsZWN0b3JDYWxsYmFja3MgPSBbXTtcbnZhciBpbml0U2VsZWN0b3JDYWxsYmFja3MgPSBbXTtcbmZ1bmN0aW9uIHJvb3RTZWxlY3RvcnMoKSB7XG4gIHJldHVybiByb290U2VsZWN0b3JDYWxsYmFja3MubWFwKChmbikgPT4gZm4oKSk7XG59XG5mdW5jdGlvbiBhbGxTZWxlY3RvcnMoKSB7XG4gIHJldHVybiByb290U2VsZWN0b3JDYWxsYmFja3MuY29uY2F0KGluaXRTZWxlY3RvckNhbGxiYWNrcykubWFwKChmbikgPT4gZm4oKSk7XG59XG5mdW5jdGlvbiBhZGRSb290U2VsZWN0b3Ioc2VsZWN0b3JDYWxsYmFjaykge1xuICByb290U2VsZWN0b3JDYWxsYmFja3MucHVzaChzZWxlY3RvckNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGFkZEluaXRTZWxlY3RvcihzZWxlY3RvckNhbGxiYWNrKSB7XG4gIGluaXRTZWxlY3RvckNhbGxiYWNrcy5wdXNoKHNlbGVjdG9yQ2FsbGJhY2spO1xufVxuZnVuY3Rpb24gY2xvc2VzdFJvb3QoZWwsIGluY2x1ZGVJbml0U2VsZWN0b3JzID0gZmFsc2UpIHtcbiAgcmV0dXJuIGZpbmRDbG9zZXN0KGVsLCAoZWxlbWVudCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdG9ycyA9IGluY2x1ZGVJbml0U2VsZWN0b3JzID8gYWxsU2VsZWN0b3JzKCkgOiByb290U2VsZWN0b3JzKCk7XG4gICAgaWYgKHNlbGVjdG9ycy5zb21lKChzZWxlY3RvcikgPT4gZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBmaW5kQ2xvc2VzdChlbCwgY2FsbGJhY2spIHtcbiAgaWYgKCFlbClcbiAgICByZXR1cm47XG4gIGlmIChjYWxsYmFjayhlbCkpXG4gICAgcmV0dXJuIGVsO1xuICBpZiAoZWwuX3hfdGVsZXBvcnRCYWNrKVxuICAgIGVsID0gZWwuX3hfdGVsZXBvcnRCYWNrO1xuICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpXG4gICAgcmV0dXJuO1xuICByZXR1cm4gZmluZENsb3Nlc3QoZWwucGFyZW50RWxlbWVudCwgY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gaXNSb290KGVsKSB7XG4gIHJldHVybiByb290U2VsZWN0b3JzKCkuc29tZSgoc2VsZWN0b3IpID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbnZhciBpbml0SW50ZXJjZXB0b3JzMiA9IFtdO1xuZnVuY3Rpb24gaW50ZXJjZXB0SW5pdChjYWxsYmFjaykge1xuICBpbml0SW50ZXJjZXB0b3JzMi5wdXNoKGNhbGxiYWNrKTtcbn1cbnZhciBtYXJrZXJEaXNwZW5zZXIgPSAxO1xuZnVuY3Rpb24gaW5pdFRyZWUoZWwsIHdhbGtlciA9IHdhbGssIGludGVyY2VwdCA9ICgpID0+IHtcbn0pIHtcbiAgaWYgKGZpbmRDbG9zZXN0KGVsLCAoaSkgPT4gaS5feF9pZ25vcmUpKVxuICAgIHJldHVybjtcbiAgZGVmZXJIYW5kbGluZ0RpcmVjdGl2ZXMoKCkgPT4ge1xuICAgIHdhbGtlcihlbCwgKGVsMiwgc2tpcCkgPT4ge1xuICAgICAgaWYgKGVsMi5feF9tYXJrZXIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGludGVyY2VwdChlbDIsIHNraXApO1xuICAgICAgaW5pdEludGVyY2VwdG9yczIuZm9yRWFjaCgoaSkgPT4gaShlbDIsIHNraXApKTtcbiAgICAgIGRpcmVjdGl2ZXMoZWwyLCBlbDIuYXR0cmlidXRlcykuZm9yRWFjaCgoaGFuZGxlKSA9PiBoYW5kbGUoKSk7XG4gICAgICBpZiAoIWVsMi5feF9pZ25vcmUpXG4gICAgICAgIGVsMi5feF9tYXJrZXIgPSBtYXJrZXJEaXNwZW5zZXIrKztcbiAgICAgIGVsMi5feF9pZ25vcmUgJiYgc2tpcCgpO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lUcmVlKHJvb3QsIHdhbGtlciA9IHdhbGspIHtcbiAgd2Fsa2VyKHJvb3QsIChlbCkgPT4ge1xuICAgIGNsZWFudXBFbGVtZW50KGVsKTtcbiAgICBjbGVhbnVwQXR0cmlidXRlcyhlbCk7XG4gICAgZGVsZXRlIGVsLl94X21hcmtlcjtcbiAgfSk7XG59XG5mdW5jdGlvbiB3YXJuQWJvdXRNaXNzaW5nUGx1Z2lucygpIHtcbiAgbGV0IHBsdWdpbkRpcmVjdGl2ZXMgPSBbXG4gICAgW1widWlcIiwgXCJkaWFsb2dcIiwgW1wiW3gtZGlhbG9nXSwgW3gtcG9wb3Zlcl1cIl1dLFxuICAgIFtcImFuY2hvclwiLCBcImFuY2hvclwiLCBbXCJbeC1hbmNob3JdXCJdXSxcbiAgICBbXCJzb3J0XCIsIFwic29ydFwiLCBbXCJbeC1zb3J0XVwiXV1cbiAgXTtcbiAgcGx1Z2luRGlyZWN0aXZlcy5mb3JFYWNoKChbcGx1Z2luMiwgZGlyZWN0aXZlMiwgc2VsZWN0b3JzXSkgPT4ge1xuICAgIGlmIChkaXJlY3RpdmVFeGlzdHMoZGlyZWN0aXZlMikpXG4gICAgICByZXR1cm47XG4gICAgc2VsZWN0b3JzLnNvbWUoKHNlbGVjdG9yKSA9PiB7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikpIHtcbiAgICAgICAgd2FybihgZm91bmQgXCIke3NlbGVjdG9yfVwiLCBidXQgbWlzc2luZyAke3BsdWdpbjJ9IHBsdWdpbmApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9uZXh0VGljay5qc1xudmFyIHRpY2tTdGFjayA9IFtdO1xudmFyIGlzSG9sZGluZyA9IGZhbHNlO1xuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2sgPSAoKSA9PiB7XG59KSB7XG4gIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICBpc0hvbGRpbmcgfHwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICByZWxlYXNlTmV4dFRpY2tzKCk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlcykgPT4ge1xuICAgIHRpY2tTdGFjay5wdXNoKCgpID0+IHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXMoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZWxlYXNlTmV4dFRpY2tzKCkge1xuICBpc0hvbGRpbmcgPSBmYWxzZTtcbiAgd2hpbGUgKHRpY2tTdGFjay5sZW5ndGgpXG4gICAgdGlja1N0YWNrLnNoaWZ0KCkoKTtcbn1cbmZ1bmN0aW9uIGhvbGROZXh0VGlja3MoKSB7XG4gIGlzSG9sZGluZyA9IHRydWU7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9jbGFzc2VzLmpzXG5mdW5jdGlvbiBzZXRDbGFzc2VzKGVsLCB2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc2V0Q2xhc3Nlc0Zyb21TdHJpbmcoZWwsIHZhbHVlLmpvaW4oXCIgXCIpKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gc2V0Q2xhc3Nlc0Zyb21PYmplY3QoZWwsIHZhbHVlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBzZXRDbGFzc2VzKGVsLCB2YWx1ZSgpKTtcbiAgfVxuICByZXR1cm4gc2V0Q2xhc3Nlc0Zyb21TdHJpbmcoZWwsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldENsYXNzZXNGcm9tU3RyaW5nKGVsLCBjbGFzc1N0cmluZykge1xuICBsZXQgc3BsaXQgPSAoY2xhc3NTdHJpbmcyKSA9PiBjbGFzc1N0cmluZzIuc3BsaXQoXCIgXCIpLmZpbHRlcihCb29sZWFuKTtcbiAgbGV0IG1pc3NpbmdDbGFzc2VzID0gKGNsYXNzU3RyaW5nMikgPT4gY2xhc3NTdHJpbmcyLnNwbGl0KFwiIFwiKS5maWx0ZXIoKGkpID0+ICFlbC5jbGFzc0xpc3QuY29udGFpbnMoaSkpLmZpbHRlcihCb29sZWFuKTtcbiAgbGV0IGFkZENsYXNzZXNBbmRSZXR1cm5VbmRvID0gKGNsYXNzZXMpID0+IHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXMpO1xuICAgIH07XG4gIH07XG4gIGNsYXNzU3RyaW5nID0gY2xhc3NTdHJpbmcgPT09IHRydWUgPyBjbGFzc1N0cmluZyA9IFwiXCIgOiBjbGFzc1N0cmluZyB8fCBcIlwiO1xuICByZXR1cm4gYWRkQ2xhc3Nlc0FuZFJldHVyblVuZG8obWlzc2luZ0NsYXNzZXMoY2xhc3NTdHJpbmcpKTtcbn1cbmZ1bmN0aW9uIHNldENsYXNzZXNGcm9tT2JqZWN0KGVsLCBjbGFzc09iamVjdCkge1xuICBsZXQgc3BsaXQgPSAoY2xhc3NTdHJpbmcpID0+IGNsYXNzU3RyaW5nLnNwbGl0KFwiIFwiKS5maWx0ZXIoQm9vbGVhbik7XG4gIGxldCBmb3JBZGQgPSBPYmplY3QuZW50cmllcyhjbGFzc09iamVjdCkuZmxhdE1hcCgoW2NsYXNzU3RyaW5nLCBib29sXSkgPT4gYm9vbCA/IHNwbGl0KGNsYXNzU3RyaW5nKSA6IGZhbHNlKS5maWx0ZXIoQm9vbGVhbik7XG4gIGxldCBmb3JSZW1vdmUgPSBPYmplY3QuZW50cmllcyhjbGFzc09iamVjdCkuZmxhdE1hcCgoW2NsYXNzU3RyaW5nLCBib29sXSkgPT4gIWJvb2wgPyBzcGxpdChjbGFzc1N0cmluZykgOiBmYWxzZSkuZmlsdGVyKEJvb2xlYW4pO1xuICBsZXQgYWRkZWQgPSBbXTtcbiAgbGV0IHJlbW92ZWQgPSBbXTtcbiAgZm9yUmVtb3ZlLmZvckVhY2goKGkpID0+IHtcbiAgICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGkpKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGkpO1xuICAgICAgcmVtb3ZlZC5wdXNoKGkpO1xuICAgIH1cbiAgfSk7XG4gIGZvckFkZC5mb3JFYWNoKChpKSA9PiB7XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QuY29udGFpbnMoaSkpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoaSk7XG4gICAgICBhZGRlZC5wdXNoKGkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmVtb3ZlZC5mb3JFYWNoKChpKSA9PiBlbC5jbGFzc0xpc3QuYWRkKGkpKTtcbiAgICBhZGRlZC5mb3JFYWNoKChpKSA9PiBlbC5jbGFzc0xpc3QucmVtb3ZlKGkpKTtcbiAgfTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3V0aWxzL3N0eWxlcy5qc1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHNldFN0eWxlc0Zyb21PYmplY3QoZWwsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gc2V0U3R5bGVzRnJvbVN0cmluZyhlbCwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0U3R5bGVzRnJvbU9iamVjdChlbCwgdmFsdWUpIHtcbiAgbGV0IHByZXZpb3VzU3R5bGVzID0ge307XG4gIE9iamVjdC5lbnRyaWVzKHZhbHVlKS5mb3JFYWNoKChba2V5LCB2YWx1ZTJdKSA9PiB7XG4gICAgcHJldmlvdXNTdHlsZXNba2V5XSA9IGVsLnN0eWxlW2tleV07XG4gICAgaWYgKCFrZXkuc3RhcnRzV2l0aChcIi0tXCIpKSB7XG4gICAgICBrZXkgPSBrZWJhYkNhc2Uoa2V5KTtcbiAgICB9XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZTIpO1xuICB9KTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGVsLnN0eWxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBzZXRTdHlsZXMoZWwsIHByZXZpb3VzU3R5bGVzKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldFN0eWxlc0Zyb21TdHJpbmcoZWwsIHZhbHVlKSB7XG4gIGxldCBjYWNoZSA9IGVsLmdldEF0dHJpYnV0ZShcInN0eWxlXCIsIHZhbHVlKTtcbiAgZWwuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgdmFsdWUpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGVsLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIGNhY2hlIHx8IFwiXCIpO1xuICB9O1xufVxuZnVuY3Rpb24ga2ViYWJDYXNlKHN1YmplY3QpIHtcbiAgcmV0dXJuIHN1YmplY3QucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvb25jZS5qc1xuZnVuY3Rpb24gb25jZShjYWxsYmFjaywgZmFsbGJhY2sgPSAoKSA9PiB7XG59KSB7XG4gIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmFsbGJhY2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtdHJhbnNpdGlvbi5qc1xuZGlyZWN0aXZlKFwidHJhbnNpdGlvblwiLCAoZWwsIHsgdmFsdWUsIG1vZGlmaWVycywgZXhwcmVzc2lvbiB9LCB7IGV2YWx1YXRlOiBldmFsdWF0ZTIgfSkgPT4ge1xuICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09IFwiZnVuY3Rpb25cIilcbiAgICBleHByZXNzaW9uID0gZXZhbHVhdGUyKGV4cHJlc3Npb24pO1xuICBpZiAoZXhwcmVzc2lvbiA9PT0gZmFsc2UpXG4gICAgcmV0dXJuO1xuICBpZiAoIWV4cHJlc3Npb24gfHwgdHlwZW9mIGV4cHJlc3Npb24gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgcmVnaXN0ZXJUcmFuc2l0aW9uc0Zyb21IZWxwZXIoZWwsIG1vZGlmaWVycywgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbnNGcm9tQ2xhc3NTdHJpbmcoZWwsIGV4cHJlc3Npb24sIHZhbHVlKTtcbiAgfVxufSk7XG5mdW5jdGlvbiByZWdpc3RlclRyYW5zaXRpb25zRnJvbUNsYXNzU3RyaW5nKGVsLCBjbGFzc1N0cmluZywgc3RhZ2UpIHtcbiAgcmVnaXN0ZXJUcmFuc2l0aW9uT2JqZWN0KGVsLCBzZXRDbGFzc2VzLCBcIlwiKTtcbiAgbGV0IGRpcmVjdGl2ZVN0b3JhZ2VNYXAgPSB7XG4gICAgXCJlbnRlclwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5kdXJpbmcgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgXCJlbnRlci1zdGFydFwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5zdGFydCA9IGNsYXNzZXM7XG4gICAgfSxcbiAgICBcImVudGVyLWVuZFwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5lbmQgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgXCJsZWF2ZVwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5kdXJpbmcgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgXCJsZWF2ZS1zdGFydFwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5zdGFydCA9IGNsYXNzZXM7XG4gICAgfSxcbiAgICBcImxlYXZlLWVuZFwiOiAoY2xhc3NlcykgPT4ge1xuICAgICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5lbmQgPSBjbGFzc2VzO1xuICAgIH1cbiAgfTtcbiAgZGlyZWN0aXZlU3RvcmFnZU1hcFtzdGFnZV0oY2xhc3NTdHJpbmcpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uc0Zyb21IZWxwZXIoZWwsIG1vZGlmaWVycywgc3RhZ2UpIHtcbiAgcmVnaXN0ZXJUcmFuc2l0aW9uT2JqZWN0KGVsLCBzZXRTdHlsZXMpO1xuICBsZXQgZG9lc250U3BlY2lmeSA9ICFtb2RpZmllcnMuaW5jbHVkZXMoXCJpblwiKSAmJiAhbW9kaWZpZXJzLmluY2x1ZGVzKFwib3V0XCIpICYmICFzdGFnZTtcbiAgbGV0IHRyYW5zaXRpb25pbmdJbiA9IGRvZXNudFNwZWNpZnkgfHwgbW9kaWZpZXJzLmluY2x1ZGVzKFwiaW5cIikgfHwgW1wiZW50ZXJcIl0uaW5jbHVkZXMoc3RhZ2UpO1xuICBsZXQgdHJhbnNpdGlvbmluZ091dCA9IGRvZXNudFNwZWNpZnkgfHwgbW9kaWZpZXJzLmluY2x1ZGVzKFwib3V0XCIpIHx8IFtcImxlYXZlXCJdLmluY2x1ZGVzKHN0YWdlKTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImluXCIpICYmICFkb2VzbnRTcGVjaWZ5KSB7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzLmZpbHRlcigoaSwgaW5kZXgpID0+IGluZGV4IDwgbW9kaWZpZXJzLmluZGV4T2YoXCJvdXRcIikpO1xuICB9XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJvdXRcIikgJiYgIWRvZXNudFNwZWNpZnkpIHtcbiAgICBtb2RpZmllcnMgPSBtb2RpZmllcnMuZmlsdGVyKChpLCBpbmRleCkgPT4gaW5kZXggPiBtb2RpZmllcnMuaW5kZXhPZihcIm91dFwiKSk7XG4gIH1cbiAgbGV0IHdhbnRzQWxsID0gIW1vZGlmaWVycy5pbmNsdWRlcyhcIm9wYWNpdHlcIikgJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhcInNjYWxlXCIpO1xuICBsZXQgd2FudHNPcGFjaXR5ID0gd2FudHNBbGwgfHwgbW9kaWZpZXJzLmluY2x1ZGVzKFwib3BhY2l0eVwiKTtcbiAgbGV0IHdhbnRzU2NhbGUgPSB3YW50c0FsbCB8fCBtb2RpZmllcnMuaW5jbHVkZXMoXCJzY2FsZVwiKTtcbiAgbGV0IG9wYWNpdHlWYWx1ZSA9IHdhbnRzT3BhY2l0eSA/IDAgOiAxO1xuICBsZXQgc2NhbGVWYWx1ZSA9IHdhbnRzU2NhbGUgPyBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJzY2FsZVwiLCA5NSkgLyAxMDAgOiAxO1xuICBsZXQgZGVsYXkgPSBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJkZWxheVwiLCAwKSAvIDFlMztcbiAgbGV0IG9yaWdpbiA9IG1vZGlmaWVyVmFsdWUobW9kaWZpZXJzLCBcIm9yaWdpblwiLCBcImNlbnRlclwiKTtcbiAgbGV0IHByb3BlcnR5ID0gXCJvcGFjaXR5LCB0cmFuc2Zvcm1cIjtcbiAgbGV0IGR1cmF0aW9uSW4gPSBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJkdXJhdGlvblwiLCAxNTApIC8gMWUzO1xuICBsZXQgZHVyYXRpb25PdXQgPSBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJkdXJhdGlvblwiLCA3NSkgLyAxZTM7XG4gIGxldCBlYXNpbmcgPSBgY3ViaWMtYmV6aWVyKDAuNCwgMC4wLCAwLjIsIDEpYDtcbiAgaWYgKHRyYW5zaXRpb25pbmdJbikge1xuICAgIGVsLl94X3RyYW5zaXRpb24uZW50ZXIuZHVyaW5nID0ge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBvcmlnaW4sXG4gICAgICB0cmFuc2l0aW9uRGVsYXk6IGAke2RlbGF5fXNgLFxuICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogYCR7ZHVyYXRpb25Jbn1zYCxcbiAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogZWFzaW5nXG4gICAgfTtcbiAgICBlbC5feF90cmFuc2l0aW9uLmVudGVyLnN0YXJ0ID0ge1xuICAgICAgb3BhY2l0eTogb3BhY2l0eVZhbHVlLFxuICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZVZhbHVlfSlgXG4gICAgfTtcbiAgICBlbC5feF90cmFuc2l0aW9uLmVudGVyLmVuZCA9IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxKWBcbiAgICB9O1xuICB9XG4gIGlmICh0cmFuc2l0aW9uaW5nT3V0KSB7XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5kdXJpbmcgPSB7XG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IG9yaWdpbixcbiAgICAgIHRyYW5zaXRpb25EZWxheTogYCR7ZGVsYXl9c2AsXG4gICAgICB0cmFuc2l0aW9uUHJvcGVydHk6IHByb3BlcnR5LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBgJHtkdXJhdGlvbk91dH1zYCxcbiAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogZWFzaW5nXG4gICAgfTtcbiAgICBlbC5feF90cmFuc2l0aW9uLmxlYXZlLnN0YXJ0ID0ge1xuICAgICAgb3BhY2l0eTogMSxcbiAgICAgIHRyYW5zZm9ybTogYHNjYWxlKDEpYFxuICAgIH07XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5lbmQgPSB7XG4gICAgICBvcGFjaXR5OiBvcGFjaXR5VmFsdWUsXG4gICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke3NjYWxlVmFsdWV9KWBcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiByZWdpc3RlclRyYW5zaXRpb25PYmplY3QoZWwsIHNldEZ1bmN0aW9uLCBkZWZhdWx0VmFsdWUgPSB7fSkge1xuICBpZiAoIWVsLl94X3RyYW5zaXRpb24pXG4gICAgZWwuX3hfdHJhbnNpdGlvbiA9IHtcbiAgICAgIGVudGVyOiB7IGR1cmluZzogZGVmYXVsdFZhbHVlLCBzdGFydDogZGVmYXVsdFZhbHVlLCBlbmQ6IGRlZmF1bHRWYWx1ZSB9LFxuICAgICAgbGVhdmU6IHsgZHVyaW5nOiBkZWZhdWx0VmFsdWUsIHN0YXJ0OiBkZWZhdWx0VmFsdWUsIGVuZDogZGVmYXVsdFZhbHVlIH0sXG4gICAgICBpbihiZWZvcmUgPSAoKSA9PiB7XG4gICAgICB9LCBhZnRlciA9ICgpID0+IHtcbiAgICAgIH0pIHtcbiAgICAgICAgdHJhbnNpdGlvbihlbCwgc2V0RnVuY3Rpb24sIHtcbiAgICAgICAgICBkdXJpbmc6IHRoaXMuZW50ZXIuZHVyaW5nLFxuICAgICAgICAgIHN0YXJ0OiB0aGlzLmVudGVyLnN0YXJ0LFxuICAgICAgICAgIGVuZDogdGhpcy5lbnRlci5lbmRcbiAgICAgICAgfSwgYmVmb3JlLCBhZnRlcik7XG4gICAgICB9LFxuICAgICAgb3V0KGJlZm9yZSA9ICgpID0+IHtcbiAgICAgIH0sIGFmdGVyID0gKCkgPT4ge1xuICAgICAgfSkge1xuICAgICAgICB0cmFuc2l0aW9uKGVsLCBzZXRGdW5jdGlvbiwge1xuICAgICAgICAgIGR1cmluZzogdGhpcy5sZWF2ZS5kdXJpbmcsXG4gICAgICAgICAgc3RhcnQ6IHRoaXMubGVhdmUuc3RhcnQsXG4gICAgICAgICAgZW5kOiB0aGlzLmxlYXZlLmVuZFxuICAgICAgICB9LCBiZWZvcmUsIGFmdGVyKTtcbiAgICAgIH1cbiAgICB9O1xufVxud2luZG93LkVsZW1lbnQucHJvdG90eXBlLl94X3RvZ2dsZUFuZENhc2NhZGVXaXRoVHJhbnNpdGlvbnMgPSBmdW5jdGlvbihlbCwgdmFsdWUsIHNob3csIGhpZGUpIHtcbiAgY29uc3QgbmV4dFRpY2syID0gZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIiA/IHJlcXVlc3RBbmltYXRpb25GcmFtZSA6IHNldFRpbWVvdXQ7XG4gIGxldCBjbGlja0F3YXlDb21wYXRpYmxlU2hvdyA9ICgpID0+IG5leHRUaWNrMihzaG93KTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKGVsLl94X3RyYW5zaXRpb24gJiYgKGVsLl94X3RyYW5zaXRpb24uZW50ZXIgfHwgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZSkpIHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24uZW50ZXIgJiYgKE9iamVjdC5lbnRyaWVzKGVsLl94X3RyYW5zaXRpb24uZW50ZXIuZHVyaW5nKS5sZW5ndGggfHwgT2JqZWN0LmVudHJpZXMoZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5zdGFydCkubGVuZ3RoIHx8IE9iamVjdC5lbnRyaWVzKGVsLl94X3RyYW5zaXRpb24uZW50ZXIuZW5kKS5sZW5ndGgpID8gZWwuX3hfdHJhbnNpdGlvbi5pbihzaG93KSA6IGNsaWNrQXdheUNvbXBhdGlibGVTaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24gPyBlbC5feF90cmFuc2l0aW9uLmluKHNob3cpIDogY2xpY2tBd2F5Q29tcGF0aWJsZVNob3coKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsLl94X2hpZGVQcm9taXNlID0gZWwuX3hfdHJhbnNpdGlvbiA/IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBlbC5feF90cmFuc2l0aW9uLm91dCgoKSA9PiB7XG4gICAgfSwgKCkgPT4gcmVzb2x2ZShoaWRlKSk7XG4gICAgZWwuX3hfdHJhbnNpdGlvbmluZyAmJiBlbC5feF90cmFuc2l0aW9uaW5nLmJlZm9yZUNhbmNlbCgoKSA9PiByZWplY3QoeyBpc0Zyb21DYW5jZWxsZWRUcmFuc2l0aW9uOiB0cnVlIH0pKTtcbiAgfSkgOiBQcm9taXNlLnJlc29sdmUoaGlkZSk7XG4gIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICBsZXQgY2xvc2VzdCA9IGNsb3Nlc3RIaWRlKGVsKTtcbiAgICBpZiAoY2xvc2VzdCkge1xuICAgICAgaWYgKCFjbG9zZXN0Ll94X2hpZGVDaGlsZHJlbilcbiAgICAgICAgY2xvc2VzdC5feF9oaWRlQ2hpbGRyZW4gPSBbXTtcbiAgICAgIGNsb3Nlc3QuX3hfaGlkZUNoaWxkcmVuLnB1c2goZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0VGljazIoKCkgPT4ge1xuICAgICAgICBsZXQgaGlkZUFmdGVyQ2hpbGRyZW4gPSAoZWwyKSA9PiB7XG4gICAgICAgICAgbGV0IGNhcnJ5ID0gUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgZWwyLl94X2hpZGVQcm9taXNlLFxuICAgICAgICAgICAgLi4uKGVsMi5feF9oaWRlQ2hpbGRyZW4gfHwgW10pLm1hcChoaWRlQWZ0ZXJDaGlsZHJlbilcbiAgICAgICAgICBdKS50aGVuKChbaV0pID0+IGk/LigpKTtcbiAgICAgICAgICBkZWxldGUgZWwyLl94X2hpZGVQcm9taXNlO1xuICAgICAgICAgIGRlbGV0ZSBlbDIuX3hfaGlkZUNoaWxkcmVuO1xuICAgICAgICAgIHJldHVybiBjYXJyeTtcbiAgICAgICAgfTtcbiAgICAgICAgaGlkZUFmdGVyQ2hpbGRyZW4oZWwpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgaWYgKCFlLmlzRnJvbUNhbmNlbGxlZFRyYW5zaXRpb24pXG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuZnVuY3Rpb24gY2xvc2VzdEhpZGUoZWwpIHtcbiAgbGV0IHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gIGlmICghcGFyZW50KVxuICAgIHJldHVybjtcbiAgcmV0dXJuIHBhcmVudC5feF9oaWRlUHJvbWlzZSA/IHBhcmVudCA6IGNsb3Nlc3RIaWRlKHBhcmVudCk7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uKGVsLCBzZXRGdW5jdGlvbiwgeyBkdXJpbmcsIHN0YXJ0OiBzdGFydDIsIGVuZCB9ID0ge30sIGJlZm9yZSA9ICgpID0+IHtcbn0sIGFmdGVyID0gKCkgPT4ge1xufSkge1xuICBpZiAoZWwuX3hfdHJhbnNpdGlvbmluZylcbiAgICBlbC5feF90cmFuc2l0aW9uaW5nLmNhbmNlbCgpO1xuICBpZiAoT2JqZWN0LmtleXMoZHVyaW5nKS5sZW5ndGggPT09IDAgJiYgT2JqZWN0LmtleXMoc3RhcnQyKS5sZW5ndGggPT09IDAgJiYgT2JqZWN0LmtleXMoZW5kKS5sZW5ndGggPT09IDApIHtcbiAgICBiZWZvcmUoKTtcbiAgICBhZnRlcigpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgdW5kb1N0YXJ0LCB1bmRvRHVyaW5nLCB1bmRvRW5kO1xuICBwZXJmb3JtVHJhbnNpdGlvbihlbCwge1xuICAgIHN0YXJ0KCkge1xuICAgICAgdW5kb1N0YXJ0ID0gc2V0RnVuY3Rpb24oZWwsIHN0YXJ0Mik7XG4gICAgfSxcbiAgICBkdXJpbmcoKSB7XG4gICAgICB1bmRvRHVyaW5nID0gc2V0RnVuY3Rpb24oZWwsIGR1cmluZyk7XG4gICAgfSxcbiAgICBiZWZvcmUsXG4gICAgZW5kKCkge1xuICAgICAgdW5kb1N0YXJ0KCk7XG4gICAgICB1bmRvRW5kID0gc2V0RnVuY3Rpb24oZWwsIGVuZCk7XG4gICAgfSxcbiAgICBhZnRlcixcbiAgICBjbGVhbnVwKCkge1xuICAgICAgdW5kb0R1cmluZygpO1xuICAgICAgdW5kb0VuZCgpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBwZXJmb3JtVHJhbnNpdGlvbihlbCwgc3RhZ2VzKSB7XG4gIGxldCBpbnRlcnJ1cHRlZCwgcmVhY2hlZEJlZm9yZSwgcmVhY2hlZEVuZDtcbiAgbGV0IGZpbmlzaCA9IG9uY2UoKCkgPT4ge1xuICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICBpbnRlcnJ1cHRlZCA9IHRydWU7XG4gICAgICBpZiAoIXJlYWNoZWRCZWZvcmUpXG4gICAgICAgIHN0YWdlcy5iZWZvcmUoKTtcbiAgICAgIGlmICghcmVhY2hlZEVuZCkge1xuICAgICAgICBzdGFnZXMuZW5kKCk7XG4gICAgICAgIHJlbGVhc2VOZXh0VGlja3MoKTtcbiAgICAgIH1cbiAgICAgIHN0YWdlcy5hZnRlcigpO1xuICAgICAgaWYgKGVsLmlzQ29ubmVjdGVkKVxuICAgICAgICBzdGFnZXMuY2xlYW51cCgpO1xuICAgICAgZGVsZXRlIGVsLl94X3RyYW5zaXRpb25pbmc7XG4gICAgfSk7XG4gIH0pO1xuICBlbC5feF90cmFuc2l0aW9uaW5nID0ge1xuICAgIGJlZm9yZUNhbmNlbHM6IFtdLFxuICAgIGJlZm9yZUNhbmNlbChjYWxsYmFjaykge1xuICAgICAgdGhpcy5iZWZvcmVDYW5jZWxzLnB1c2goY2FsbGJhY2spO1xuICAgIH0sXG4gICAgY2FuY2VsOiBvbmNlKGZ1bmN0aW9uKCkge1xuICAgICAgd2hpbGUgKHRoaXMuYmVmb3JlQ2FuY2Vscy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVDYW5jZWxzLnNoaWZ0KCkoKTtcbiAgICAgIH1cbiAgICAgIDtcbiAgICAgIGZpbmlzaCgpO1xuICAgIH0pLFxuICAgIGZpbmlzaFxuICB9O1xuICBtdXRhdGVEb20oKCkgPT4ge1xuICAgIHN0YWdlcy5zdGFydCgpO1xuICAgIHN0YWdlcy5kdXJpbmcoKTtcbiAgfSk7XG4gIGhvbGROZXh0VGlja3MoKTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBpZiAoaW50ZXJydXB0ZWQpXG4gICAgICByZXR1cm47XG4gICAgbGV0IGR1cmF0aW9uID0gTnVtYmVyKGdldENvbXB1dGVkU3R5bGUoZWwpLnRyYW5zaXRpb25EdXJhdGlvbi5yZXBsYWNlKC8sLiovLCBcIlwiKS5yZXBsYWNlKFwic1wiLCBcIlwiKSkgKiAxZTM7XG4gICAgbGV0IGRlbGF5ID0gTnVtYmVyKGdldENvbXB1dGVkU3R5bGUoZWwpLnRyYW5zaXRpb25EZWxheS5yZXBsYWNlKC8sLiovLCBcIlwiKS5yZXBsYWNlKFwic1wiLCBcIlwiKSkgKiAxZTM7XG4gICAgaWYgKGR1cmF0aW9uID09PSAwKVxuICAgICAgZHVyYXRpb24gPSBOdW1iZXIoZ2V0Q29tcHV0ZWRTdHlsZShlbCkuYW5pbWF0aW9uRHVyYXRpb24ucmVwbGFjZShcInNcIiwgXCJcIikpICogMWUzO1xuICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICBzdGFnZXMuYmVmb3JlKCk7XG4gICAgfSk7XG4gICAgcmVhY2hlZEJlZm9yZSA9IHRydWU7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmIChpbnRlcnJ1cHRlZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgICAgc3RhZ2VzLmVuZCgpO1xuICAgICAgfSk7XG4gICAgICByZWxlYXNlTmV4dFRpY2tzKCk7XG4gICAgICBzZXRUaW1lb3V0KGVsLl94X3RyYW5zaXRpb25pbmcuZmluaXNoLCBkdXJhdGlvbiArIGRlbGF5KTtcbiAgICAgIHJlYWNoZWRFbmQgPSB0cnVlO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIG1vZGlmaWVyVmFsdWUobW9kaWZpZXJzLCBrZXksIGZhbGxiYWNrKSB7XG4gIGlmIChtb2RpZmllcnMuaW5kZXhPZihrZXkpID09PSAtMSlcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIGNvbnN0IHJhd1ZhbHVlID0gbW9kaWZpZXJzW21vZGlmaWVycy5pbmRleE9mKGtleSkgKyAxXTtcbiAgaWYgKCFyYXdWYWx1ZSlcbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIGlmIChrZXkgPT09IFwic2NhbGVcIikge1xuICAgIGlmIChpc05hTihyYXdWYWx1ZSkpXG4gICAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJkdXJhdGlvblwiIHx8IGtleSA9PT0gXCJkZWxheVwiKSB7XG4gICAgbGV0IG1hdGNoID0gcmF3VmFsdWUubWF0Y2goLyhbMC05XSspbXMvKTtcbiAgICBpZiAobWF0Y2gpXG4gICAgICByZXR1cm4gbWF0Y2hbMV07XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJvcmlnaW5cIikge1xuICAgIGlmIChbXCJ0b3BcIiwgXCJyaWdodFwiLCBcImxlZnRcIiwgXCJjZW50ZXJcIiwgXCJib3R0b21cIl0uaW5jbHVkZXMobW9kaWZpZXJzW21vZGlmaWVycy5pbmRleE9mKGtleSkgKyAyXSkpIHtcbiAgICAgIHJldHVybiBbcmF3VmFsdWUsIG1vZGlmaWVyc1ttb2RpZmllcnMuaW5kZXhPZihrZXkpICsgMl1dLmpvaW4oXCIgXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmF3VmFsdWU7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9jbG9uZS5qc1xudmFyIGlzQ2xvbmluZyA9IGZhbHNlO1xuZnVuY3Rpb24gc2tpcER1cmluZ0Nsb25lKGNhbGxiYWNrLCBmYWxsYmFjayA9ICgpID0+IHtcbn0pIHtcbiAgcmV0dXJuICguLi5hcmdzKSA9PiBpc0Nsb25pbmcgPyBmYWxsYmFjayguLi5hcmdzKSA6IGNhbGxiYWNrKC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gb25seUR1cmluZ0Nsb25lKGNhbGxiYWNrKSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4gaXNDbG9uaW5nICYmIGNhbGxiYWNrKC4uLmFyZ3MpO1xufVxudmFyIGludGVyY2VwdG9ycyA9IFtdO1xuZnVuY3Rpb24gaW50ZXJjZXB0Q2xvbmUoY2FsbGJhY2spIHtcbiAgaW50ZXJjZXB0b3JzLnB1c2goY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gY2xvbmVOb2RlKGZyb20sIHRvKSB7XG4gIGludGVyY2VwdG9ycy5mb3JFYWNoKChpKSA9PiBpKGZyb20sIHRvKSk7XG4gIGlzQ2xvbmluZyA9IHRydWU7XG4gIGRvbnRSZWdpc3RlclJlYWN0aXZlU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgIGluaXRUcmVlKHRvLCAoZWwsIGNhbGxiYWNrKSA9PiB7XG4gICAgICBjYWxsYmFjayhlbCwgKCkgPT4ge1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICBpc0Nsb25pbmcgPSBmYWxzZTtcbn1cbnZhciBpc0Nsb25pbmdMZWdhY3kgPSBmYWxzZTtcbmZ1bmN0aW9uIGNsb25lKG9sZEVsLCBuZXdFbCkge1xuICBpZiAoIW5ld0VsLl94X2RhdGFTdGFjaylcbiAgICBuZXdFbC5feF9kYXRhU3RhY2sgPSBvbGRFbC5feF9kYXRhU3RhY2s7XG4gIGlzQ2xvbmluZyA9IHRydWU7XG4gIGlzQ2xvbmluZ0xlZ2FjeSA9IHRydWU7XG4gIGRvbnRSZWdpc3RlclJlYWN0aXZlU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgIGNsb25lVHJlZShuZXdFbCk7XG4gIH0pO1xuICBpc0Nsb25pbmcgPSBmYWxzZTtcbiAgaXNDbG9uaW5nTGVnYWN5ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBjbG9uZVRyZWUoZWwpIHtcbiAgbGV0IGhhc1J1blRocm91Z2hGaXJzdEVsID0gZmFsc2U7XG4gIGxldCBzaGFsbG93V2Fsa2VyID0gKGVsMiwgY2FsbGJhY2spID0+IHtcbiAgICB3YWxrKGVsMiwgKGVsMywgc2tpcCkgPT4ge1xuICAgICAgaWYgKGhhc1J1blRocm91Z2hGaXJzdEVsICYmIGlzUm9vdChlbDMpKVxuICAgICAgICByZXR1cm4gc2tpcCgpO1xuICAgICAgaGFzUnVuVGhyb3VnaEZpcnN0RWwgPSB0cnVlO1xuICAgICAgY2FsbGJhY2soZWwzLCBza2lwKTtcbiAgICB9KTtcbiAgfTtcbiAgaW5pdFRyZWUoZWwsIHNoYWxsb3dXYWxrZXIpO1xufVxuZnVuY3Rpb24gZG9udFJlZ2lzdGVyUmVhY3RpdmVTaWRlRWZmZWN0cyhjYWxsYmFjaykge1xuICBsZXQgY2FjaGUgPSBlZmZlY3Q7XG4gIG92ZXJyaWRlRWZmZWN0KChjYWxsYmFjazIsIGVsKSA9PiB7XG4gICAgbGV0IHN0b3JlZEVmZmVjdCA9IGNhY2hlKGNhbGxiYWNrMik7XG4gICAgcmVsZWFzZShzdG9yZWRFZmZlY3QpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgfTtcbiAgfSk7XG4gIGNhbGxiYWNrKCk7XG4gIG92ZXJyaWRlRWZmZWN0KGNhY2hlKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3V0aWxzL2JpbmQuanNcbmZ1bmN0aW9uIGJpbmQoZWwsIG5hbWUsIHZhbHVlLCBtb2RpZmllcnMgPSBbXSkge1xuICBpZiAoIWVsLl94X2JpbmRpbmdzKVxuICAgIGVsLl94X2JpbmRpbmdzID0gcmVhY3RpdmUoe30pO1xuICBlbC5feF9iaW5kaW5nc1tuYW1lXSA9IHZhbHVlO1xuICBuYW1lID0gbW9kaWZpZXJzLmluY2x1ZGVzKFwiY2FtZWxcIikgPyBjYW1lbENhc2UobmFtZSkgOiBuYW1lO1xuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgIGJpbmRJbnB1dFZhbHVlKGVsLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic3R5bGVcIjpcbiAgICAgIGJpbmRTdHlsZXMoZWwsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGFzc1wiOlxuICAgICAgYmluZENsYXNzZXMoZWwsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJzZWxlY3RlZFwiOlxuICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICBiaW5kQXR0cmlidXRlQW5kUHJvcGVydHkoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBiaW5kQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgfVxufVxuZnVuY3Rpb24gYmluZElucHV0VmFsdWUoZWwsIHZhbHVlKSB7XG4gIGlmIChpc1JhZGlvKGVsKSkge1xuICAgIGlmIChlbC5hdHRyaWJ1dGVzLnZhbHVlID09PSB2b2lkIDApIHtcbiAgICAgIGVsLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuZnJvbU1vZGVsKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBlbC5jaGVja2VkID0gc2FmZVBhcnNlQm9vbGVhbihlbC52YWx1ZSkgPT09IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IGNoZWNrZWRBdHRyTG9vc2VDb21wYXJlKGVsLnZhbHVlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQ2hlY2tib3goZWwpKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICBlbC52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIgJiYgIVtudWxsLCB2b2lkIDBdLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgZWwudmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLnNvbWUoKHZhbCkgPT4gY2hlY2tlZEF0dHJMb29zZUNvbXBhcmUodmFsLCBlbC52YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9ICEhdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGVsLnRhZ05hbWUgPT09IFwiU0VMRUNUXCIpIHtcbiAgICB1cGRhdGVTZWxlY3QoZWwsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWwudmFsdWUgPT09IHZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIGVsLnZhbHVlID0gdmFsdWUgPT09IHZvaWQgMCA/IFwiXCIgOiB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gYmluZENsYXNzZXMoZWwsIHZhbHVlKSB7XG4gIGlmIChlbC5feF91bmRvQWRkZWRDbGFzc2VzKVxuICAgIGVsLl94X3VuZG9BZGRlZENsYXNzZXMoKTtcbiAgZWwuX3hfdW5kb0FkZGVkQ2xhc3NlcyA9IHNldENsYXNzZXMoZWwsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGJpbmRTdHlsZXMoZWwsIHZhbHVlKSB7XG4gIGlmIChlbC5feF91bmRvQWRkZWRTdHlsZXMpXG4gICAgZWwuX3hfdW5kb0FkZGVkU3R5bGVzKCk7XG4gIGVsLl94X3VuZG9BZGRlZFN0eWxlcyA9IHNldFN0eWxlcyhlbCwgdmFsdWUpO1xufVxuZnVuY3Rpb24gYmluZEF0dHJpYnV0ZUFuZFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSkge1xuICBiaW5kQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSk7XG4gIHNldFByb3BlcnR5SWZDaGFuZ2VkKGVsLCBuYW1lLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBiaW5kQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAoW251bGwsIHZvaWQgMCwgZmFsc2VdLmluY2x1ZGVzKHZhbHVlKSAmJiBhdHRyaWJ1dGVTaG91bGRudEJlUHJlc2VydmVkSWZGYWxzeShuYW1lKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNCb29sZWFuQXR0cihuYW1lKSlcbiAgICAgIHZhbHVlID0gbmFtZTtcbiAgICBzZXRJZkNoYW5nZWQoZWwsIG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0SWZDaGFuZ2VkKGVsLCBhdHRyTmFtZSwgdmFsdWUpIHtcbiAgaWYgKGVsLmdldEF0dHJpYnV0ZShhdHRyTmFtZSkgIT0gdmFsdWUpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcGVydHlJZkNoYW5nZWQoZWwsIHByb3BOYW1lLCB2YWx1ZSkge1xuICBpZiAoZWxbcHJvcE5hbWVdICE9PSB2YWx1ZSkge1xuICAgIGVsW3Byb3BOYW1lXSA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVTZWxlY3QoZWwsIHZhbHVlKSB7XG4gIGNvbnN0IGFycmF5V3JhcHBlZFZhbHVlID0gW10uY29uY2F0KHZhbHVlKS5tYXAoKHZhbHVlMikgPT4ge1xuICAgIHJldHVybiB2YWx1ZTIgKyBcIlwiO1xuICB9KTtcbiAgQXJyYXkuZnJvbShlbC5vcHRpb25zKS5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICBvcHRpb24uc2VsZWN0ZWQgPSBhcnJheVdyYXBwZWRWYWx1ZS5pbmNsdWRlcyhvcHRpb24udmFsdWUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNhbWVsQ2FzZShzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLShcXHcpL2csIChtYXRjaCwgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrZWRBdHRyTG9vc2VDb21wYXJlKHZhbHVlQSwgdmFsdWVCKSB7XG4gIHJldHVybiB2YWx1ZUEgPT0gdmFsdWVCO1xufVxuZnVuY3Rpb24gc2FmZVBhcnNlQm9vbGVhbihyYXdWYWx1ZSkge1xuICBpZiAoWzEsIFwiMVwiLCBcInRydWVcIiwgXCJvblwiLCBcInllc1wiLCB0cnVlXS5pbmNsdWRlcyhyYXdWYWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoWzAsIFwiMFwiLCBcImZhbHNlXCIsIFwib2ZmXCIsIFwibm9cIiwgZmFsc2VdLmluY2x1ZGVzKHJhd1ZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gcmF3VmFsdWUgPyBCb29sZWFuKHJhd1ZhbHVlKSA6IG51bGw7XG59XG52YXIgYm9vbGVhbkF0dHJpYnV0ZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldChbXG4gIFwiYWxsb3dmdWxsc2NyZWVuXCIsXG4gIFwiYXN5bmNcIixcbiAgXCJhdXRvZm9jdXNcIixcbiAgXCJhdXRvcGxheVwiLFxuICBcImNoZWNrZWRcIixcbiAgXCJjb250cm9sc1wiLFxuICBcImRlZmF1bHRcIixcbiAgXCJkZWZlclwiLFxuICBcImRpc2FibGVkXCIsXG4gIFwiZm9ybW5vdmFsaWRhdGVcIixcbiAgXCJpbmVydFwiLFxuICBcImlzbWFwXCIsXG4gIFwiaXRlbXNjb3BlXCIsXG4gIFwibG9vcFwiLFxuICBcIm11bHRpcGxlXCIsXG4gIFwibXV0ZWRcIixcbiAgXCJub21vZHVsZVwiLFxuICBcIm5vdmFsaWRhdGVcIixcbiAgXCJvcGVuXCIsXG4gIFwicGxheXNpbmxpbmVcIixcbiAgXCJyZWFkb25seVwiLFxuICBcInJlcXVpcmVkXCIsXG4gIFwicmV2ZXJzZWRcIixcbiAgXCJzZWxlY3RlZFwiLFxuICBcInNoYWRvd3Jvb3RjbG9uYWJsZVwiLFxuICBcInNoYWRvd3Jvb3RkZWxlZ2F0ZXNmb2N1c1wiLFxuICBcInNoYWRvd3Jvb3RzZXJpYWxpemFibGVcIlxuXSk7XG5mdW5jdGlvbiBpc0Jvb2xlYW5BdHRyKGF0dHJOYW1lKSB7XG4gIHJldHVybiBib29sZWFuQXR0cmlidXRlcy5oYXMoYXR0ck5hbWUpO1xufVxuZnVuY3Rpb24gYXR0cmlidXRlU2hvdWxkbnRCZVByZXNlcnZlZElmRmFsc3kobmFtZSkge1xuICByZXR1cm4gIVtcImFyaWEtcHJlc3NlZFwiLCBcImFyaWEtY2hlY2tlZFwiLCBcImFyaWEtZXhwYW5kZWRcIiwgXCJhcmlhLXNlbGVjdGVkXCJdLmluY2x1ZGVzKG5hbWUpO1xufVxuZnVuY3Rpb24gZ2V0QmluZGluZyhlbCwgbmFtZSwgZmFsbGJhY2spIHtcbiAgaWYgKGVsLl94X2JpbmRpbmdzICYmIGVsLl94X2JpbmRpbmdzW25hbWVdICE9PSB2b2lkIDApXG4gICAgcmV0dXJuIGVsLl94X2JpbmRpbmdzW25hbWVdO1xuICByZXR1cm4gZ2V0QXR0cmlidXRlQmluZGluZyhlbCwgbmFtZSwgZmFsbGJhY2spO1xufVxuZnVuY3Rpb24gZXh0cmFjdFByb3AoZWwsIG5hbWUsIGZhbGxiYWNrLCBleHRyYWN0ID0gdHJ1ZSkge1xuICBpZiAoZWwuX3hfYmluZGluZ3MgJiYgZWwuX3hfYmluZGluZ3NbbmFtZV0gIT09IHZvaWQgMClcbiAgICByZXR1cm4gZWwuX3hfYmluZGluZ3NbbmFtZV07XG4gIGlmIChlbC5feF9pbmxpbmVCaW5kaW5ncyAmJiBlbC5feF9pbmxpbmVCaW5kaW5nc1tuYW1lXSAhPT0gdm9pZCAwKSB7XG4gICAgbGV0IGJpbmRpbmcgPSBlbC5feF9pbmxpbmVCaW5kaW5nc1tuYW1lXTtcbiAgICBiaW5kaW5nLmV4dHJhY3QgPSBleHRyYWN0O1xuICAgIHJldHVybiBkb250QXV0b0V2YWx1YXRlRnVuY3Rpb25zKCgpID0+IHtcbiAgICAgIHJldHVybiBldmFsdWF0ZShlbCwgYmluZGluZy5leHByZXNzaW9uKTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gZ2V0QXR0cmlidXRlQmluZGluZyhlbCwgbmFtZSwgZmFsbGJhY2spO1xufVxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlQmluZGluZyhlbCwgbmFtZSwgZmFsbGJhY2spIHtcbiAgbGV0IGF0dHIgPSBlbC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gIGlmIChhdHRyID09PSBudWxsKVxuICAgIHJldHVybiB0eXBlb2YgZmFsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGZhbGxiYWNrKCkgOiBmYWxsYmFjaztcbiAgaWYgKGF0dHIgPT09IFwiXCIpXG4gICAgcmV0dXJuIHRydWU7XG4gIGlmIChpc0Jvb2xlYW5BdHRyKG5hbWUpKSB7XG4gICAgcmV0dXJuICEhW25hbWUsIFwidHJ1ZVwiXS5pbmNsdWRlcyhhdHRyKTtcbiAgfVxuICByZXR1cm4gYXR0cjtcbn1cbmZ1bmN0aW9uIGlzQ2hlY2tib3goZWwpIHtcbiAgcmV0dXJuIGVsLnR5cGUgPT09IFwiY2hlY2tib3hcIiB8fCBlbC5sb2NhbE5hbWUgPT09IFwidWktY2hlY2tib3hcIiB8fCBlbC5sb2NhbE5hbWUgPT09IFwidWktc3dpdGNoXCI7XG59XG5mdW5jdGlvbiBpc1JhZGlvKGVsKSB7XG4gIHJldHVybiBlbC50eXBlID09PSBcInJhZGlvXCIgfHwgZWwubG9jYWxOYW1lID09PSBcInVpLXJhZGlvXCI7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9kZWJvdW5jZS5qc1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCkge1xuICB2YXIgdGltZW91dDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICB9O1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy90aHJvdHRsZS5qc1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgbGltaXQpIHtcbiAgbGV0IGluVGhyb3R0bGU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBsZXQgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgaWYgKCFpblRocm90dGxlKSB7XG4gICAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgaW5UaHJvdHRsZSA9IHRydWU7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IGluVGhyb3R0bGUgPSBmYWxzZSwgbGltaXQpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2VudGFuZ2xlLmpzXG5mdW5jdGlvbiBlbnRhbmdsZSh7IGdldDogb3V0ZXJHZXQsIHNldDogb3V0ZXJTZXQgfSwgeyBnZXQ6IGlubmVyR2V0LCBzZXQ6IGlubmVyU2V0IH0pIHtcbiAgbGV0IGZpcnN0UnVuID0gdHJ1ZTtcbiAgbGV0IG91dGVySGFzaDtcbiAgbGV0IGlubmVySGFzaDtcbiAgbGV0IHJlZmVyZW5jZSA9IGVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG91dGVyID0gb3V0ZXJHZXQoKTtcbiAgICBsZXQgaW5uZXIgPSBpbm5lckdldCgpO1xuICAgIGlmIChmaXJzdFJ1bikge1xuICAgICAgaW5uZXJTZXQoY2xvbmVJZk9iamVjdChvdXRlcikpO1xuICAgICAgZmlyc3RSdW4gPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG91dGVySGFzaExhdGVzdCA9IEpTT04uc3RyaW5naWZ5KG91dGVyKTtcbiAgICAgIGxldCBpbm5lckhhc2hMYXRlc3QgPSBKU09OLnN0cmluZ2lmeShpbm5lcik7XG4gICAgICBpZiAob3V0ZXJIYXNoTGF0ZXN0ICE9PSBvdXRlckhhc2gpIHtcbiAgICAgICAgaW5uZXJTZXQoY2xvbmVJZk9iamVjdChvdXRlcikpO1xuICAgICAgfSBlbHNlIGlmIChvdXRlckhhc2hMYXRlc3QgIT09IGlubmVySGFzaExhdGVzdCkge1xuICAgICAgICBvdXRlclNldChjbG9uZUlmT2JqZWN0KGlubmVyKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgfVxuICAgIH1cbiAgICBvdXRlckhhc2ggPSBKU09OLnN0cmluZ2lmeShvdXRlckdldCgpKTtcbiAgICBpbm5lckhhc2ggPSBKU09OLnN0cmluZ2lmeShpbm5lckdldCgpKTtcbiAgfSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmVsZWFzZShyZWZlcmVuY2UpO1xuICB9O1xufVxuZnVuY3Rpb24gY2xvbmVJZk9iamVjdCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh2YWx1ZSkpIDogdmFsdWU7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9wbHVnaW4uanNcbmZ1bmN0aW9uIHBsdWdpbihjYWxsYmFjaykge1xuICBsZXQgY2FsbGJhY2tzID0gQXJyYXkuaXNBcnJheShjYWxsYmFjaykgPyBjYWxsYmFjayA6IFtjYWxsYmFja107XG4gIGNhbGxiYWNrcy5mb3JFYWNoKChpKSA9PiBpKGFscGluZV9kZWZhdWx0KSk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9zdG9yZS5qc1xudmFyIHN0b3JlcyA9IHt9O1xudmFyIGlzUmVhY3RpdmUgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0b3JlKG5hbWUsIHZhbHVlKSB7XG4gIGlmICghaXNSZWFjdGl2ZSkge1xuICAgIHN0b3JlcyA9IHJlYWN0aXZlKHN0b3Jlcyk7XG4gICAgaXNSZWFjdGl2ZSA9IHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gc3RvcmVzW25hbWVdO1xuICB9XG4gIHN0b3Jlc1tuYW1lXSA9IHZhbHVlO1xuICBpbml0SW50ZXJjZXB0b3JzKHN0b3Jlc1tuYW1lXSk7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuaGFzT3duUHJvcGVydHkoXCJpbml0XCIpICYmIHR5cGVvZiB2YWx1ZS5pbml0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBzdG9yZXNbbmFtZV0uaW5pdCgpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdG9yZXMoKSB7XG4gIHJldHVybiBzdG9yZXM7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9iaW5kcy5qc1xudmFyIGJpbmRzID0ge307XG5mdW5jdGlvbiBiaW5kMihuYW1lLCBiaW5kaW5ncykge1xuICBsZXQgZ2V0QmluZGluZ3MgPSB0eXBlb2YgYmluZGluZ3MgIT09IFwiZnVuY3Rpb25cIiA/ICgpID0+IGJpbmRpbmdzIDogYmluZGluZ3M7XG4gIGlmIChuYW1lIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgIHJldHVybiBhcHBseUJpbmRpbmdzT2JqZWN0KG5hbWUsIGdldEJpbmRpbmdzKCkpO1xuICB9IGVsc2Uge1xuICAgIGJpbmRzW25hbWVdID0gZ2V0QmluZGluZ3M7XG4gIH1cbiAgcmV0dXJuICgpID0+IHtcbiAgfTtcbn1cbmZ1bmN0aW9uIGluamVjdEJpbmRpbmdQcm92aWRlcnMob2JqKSB7XG4gIE9iamVjdC5lbnRyaWVzKGJpbmRzKS5mb3JFYWNoKChbbmFtZSwgY2FsbGJhY2tdKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gYXBwbHlCaW5kaW5nc09iamVjdChlbCwgb2JqLCBvcmlnaW5hbCkge1xuICBsZXQgY2xlYW51cFJ1bm5lcnMgPSBbXTtcbiAgd2hpbGUgKGNsZWFudXBSdW5uZXJzLmxlbmd0aClcbiAgICBjbGVhbnVwUnVubmVycy5wb3AoKSgpO1xuICBsZXQgYXR0cmlidXRlcyA9IE9iamVjdC5lbnRyaWVzKG9iaikubWFwKChbbmFtZSwgdmFsdWVdKSA9PiAoeyBuYW1lLCB2YWx1ZSB9KSk7XG4gIGxldCBzdGF0aWNBdHRyaWJ1dGVzID0gYXR0cmlidXRlc09ubHkoYXR0cmlidXRlcyk7XG4gIGF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLm1hcCgoYXR0cmlidXRlKSA9PiB7XG4gICAgaWYgKHN0YXRpY0F0dHJpYnV0ZXMuZmluZCgoYXR0cikgPT4gYXR0ci5uYW1lID09PSBhdHRyaWJ1dGUubmFtZSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGB4LWJpbmQ6JHthdHRyaWJ1dGUubmFtZX1gLFxuICAgICAgICB2YWx1ZTogYFwiJHthdHRyaWJ1dGUudmFsdWV9XCJgXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYXR0cmlidXRlO1xuICB9KTtcbiAgZGlyZWN0aXZlcyhlbCwgYXR0cmlidXRlcywgb3JpZ2luYWwpLm1hcCgoaGFuZGxlKSA9PiB7XG4gICAgY2xlYW51cFJ1bm5lcnMucHVzaChoYW5kbGUucnVuQ2xlYW51cHMpO1xuICAgIGhhbmRsZSgpO1xuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICB3aGlsZSAoY2xlYW51cFJ1bm5lcnMubGVuZ3RoKVxuICAgICAgY2xlYW51cFJ1bm5lcnMucG9wKCkoKTtcbiAgfTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RhdGFzLmpzXG52YXIgZGF0YXMgPSB7fTtcbmZ1bmN0aW9uIGRhdGEobmFtZSwgY2FsbGJhY2spIHtcbiAgZGF0YXNbbmFtZV0gPSBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIGluamVjdERhdGFQcm92aWRlcnMob2JqLCBjb250ZXh0KSB7XG4gIE9iamVjdC5lbnRyaWVzKGRhdGFzKS5mb3JFYWNoKChbbmFtZSwgY2FsbGJhY2tdKSA9PiB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwge1xuICAgICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2suYmluZChjb250ZXh0KSguLi5hcmdzKTtcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2FscGluZS5qc1xudmFyIEFscGluZSA9IHtcbiAgZ2V0IHJlYWN0aXZlKCkge1xuICAgIHJldHVybiByZWFjdGl2ZTtcbiAgfSxcbiAgZ2V0IHJlbGVhc2UoKSB7XG4gICAgcmV0dXJuIHJlbGVhc2U7XG4gIH0sXG4gIGdldCBlZmZlY3QoKSB7XG4gICAgcmV0dXJuIGVmZmVjdDtcbiAgfSxcbiAgZ2V0IHJhdygpIHtcbiAgICByZXR1cm4gcmF3O1xuICB9LFxuICB2ZXJzaW9uOiBcIjMuMTQuOVwiLFxuICBmbHVzaEFuZFN0b3BEZWZlcnJpbmdNdXRhdGlvbnMsXG4gIGRvbnRBdXRvRXZhbHVhdGVGdW5jdGlvbnMsXG4gIGRpc2FibGVFZmZlY3RTY2hlZHVsaW5nLFxuICBzdGFydE9ic2VydmluZ011dGF0aW9ucyxcbiAgc3RvcE9ic2VydmluZ011dGF0aW9ucyxcbiAgc2V0UmVhY3Rpdml0eUVuZ2luZSxcbiAgb25BdHRyaWJ1dGVSZW1vdmVkLFxuICBvbkF0dHJpYnV0ZXNBZGRlZCxcbiAgY2xvc2VzdERhdGFTdGFjayxcbiAgc2tpcER1cmluZ0Nsb25lLFxuICBvbmx5RHVyaW5nQ2xvbmUsXG4gIGFkZFJvb3RTZWxlY3RvcixcbiAgYWRkSW5pdFNlbGVjdG9yLFxuICBpbnRlcmNlcHRDbG9uZSxcbiAgYWRkU2NvcGVUb05vZGUsXG4gIGRlZmVyTXV0YXRpb25zLFxuICBtYXBBdHRyaWJ1dGVzLFxuICBldmFsdWF0ZUxhdGVyLFxuICBpbnRlcmNlcHRJbml0LFxuICBzZXRFdmFsdWF0b3IsXG4gIG1lcmdlUHJveGllcyxcbiAgZXh0cmFjdFByb3AsXG4gIGZpbmRDbG9zZXN0LFxuICBvbkVsUmVtb3ZlZCxcbiAgY2xvc2VzdFJvb3QsXG4gIGRlc3Ryb3lUcmVlLFxuICBpbnRlcmNlcHRvcixcbiAgLy8gSU5URVJOQUw6IG5vdCBwdWJsaWMgQVBJIGFuZCBpcyBzdWJqZWN0IHRvIGNoYW5nZSB3aXRob3V0IG1ham9yIHJlbGVhc2UuXG4gIHRyYW5zaXRpb24sXG4gIC8vIElOVEVSTkFMXG4gIHNldFN0eWxlcyxcbiAgLy8gSU5URVJOQUxcbiAgbXV0YXRlRG9tLFxuICBkaXJlY3RpdmUsXG4gIGVudGFuZ2xlLFxuICB0aHJvdHRsZSxcbiAgZGVib3VuY2UsXG4gIGV2YWx1YXRlLFxuICBpbml0VHJlZSxcbiAgbmV4dFRpY2ssXG4gIHByZWZpeGVkOiBwcmVmaXgsXG4gIHByZWZpeDogc2V0UHJlZml4LFxuICBwbHVnaW4sXG4gIG1hZ2ljLFxuICBzdG9yZSxcbiAgc3RhcnQsXG4gIGNsb25lLFxuICAvLyBJTlRFUk5BTFxuICBjbG9uZU5vZGUsXG4gIC8vIElOVEVSTkFMXG4gIGJvdW5kOiBnZXRCaW5kaW5nLFxuICAkZGF0YTogc2NvcGUsXG4gIHdhdGNoLFxuICB3YWxrLFxuICBkYXRhLFxuICBiaW5kOiBiaW5kMlxufTtcbnZhciBhbHBpbmVfZGVmYXVsdCA9IEFscGluZTtcblxuLy8gbm9kZV9tb2R1bGVzL0B2dWUvc2hhcmVkL2Rpc3Qvc2hhcmVkLmVzbS1idW5kbGVyLmpzXG5mdW5jdGlvbiBtYWtlTWFwKHN0ciwgZXhwZWN0c0xvd2VyQ2FzZSkge1xuICBjb25zdCBtYXAgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgbGlzdCA9IHN0ci5zcGxpdChcIixcIik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGV4cGVjdHNMb3dlckNhc2UgPyAodmFsKSA9PiAhIW1hcFt2YWwudG9Mb3dlckNhc2UoKV0gOiAodmFsKSA9PiAhIW1hcFt2YWxdO1xufVxudmFyIHNwZWNpYWxCb29sZWFuQXR0cnMgPSBgaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5YDtcbnZhciBpc0Jvb2xlYW5BdHRyMiA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKHNwZWNpYWxCb29sZWFuQXR0cnMgKyBgLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjb250cm9scyxkZWZhdWx0LGRlZmVyLGRpc2FibGVkLGhpZGRlbixsb29wLG9wZW4scmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLGNoZWNrZWQsbXV0ZWQsbXVsdGlwbGUsc2VsZWN0ZWRgKTtcbnZhciBFTVBUWV9PQkogPSB0cnVlID8gT2JqZWN0LmZyZWV6ZSh7fSkgOiB7fTtcbnZhciBFTVBUWV9BUlIgPSB0cnVlID8gT2JqZWN0LmZyZWV6ZShbXSkgOiBbXTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzT3duID0gKHZhbCwga2V5KSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbCwga2V5KTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBpc01hcCA9ICh2YWwpID0+IHRvVHlwZVN0cmluZyh2YWwpID09PSBcIltvYmplY3QgTWFwXVwiO1xudmFyIGlzU3RyaW5nID0gKHZhbCkgPT4gdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIjtcbnZhciBpc1N5bWJvbCA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3ltYm9sXCI7XG52YXIgaXNPYmplY3QgPSAodmFsKSA9PiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIjtcbnZhciBvYmplY3RUb1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgdG9UeXBlU3RyaW5nID0gKHZhbHVlKSA9PiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbnZhciB0b1Jhd1R5cGUgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIHRvVHlwZVN0cmluZyh2YWx1ZSkuc2xpY2UoOCwgLTEpO1xufTtcbnZhciBpc0ludGVnZXJLZXkgPSAoa2V5KSA9PiBpc1N0cmluZyhrZXkpICYmIGtleSAhPT0gXCJOYU5cIiAmJiBrZXlbMF0gIT09IFwiLVwiICYmIFwiXCIgKyBwYXJzZUludChrZXksIDEwKSA9PT0ga2V5O1xudmFyIGNhY2hlU3RyaW5nRnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChzdHIpID0+IHtcbiAgICBjb25zdCBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKTtcbiAgfTtcbn07XG52YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbnZhciBjYW1lbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgKF8sIGMpID0+IGMgPyBjLnRvVXBwZXJDYXNlKCkgOiBcIlwiKTtcbn0pO1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcbnZhciBjYXBpdGFsaXplID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSkpO1xudmFyIHRvSGFuZGxlcktleSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyID8gYG9uJHtjYXBpdGFsaXplKHN0cil9YCA6IGBgKTtcbnZhciBoYXNDaGFuZ2VkID0gKHZhbHVlLCBvbGRWYWx1ZSkgPT4gdmFsdWUgIT09IG9sZFZhbHVlICYmICh2YWx1ZSA9PT0gdmFsdWUgfHwgb2xkVmFsdWUgPT09IG9sZFZhbHVlKTtcblxuLy8gbm9kZV9tb2R1bGVzL0B2dWUvcmVhY3Rpdml0eS9kaXN0L3JlYWN0aXZpdHkuZXNtLWJ1bmRsZXIuanNcbnZhciB0YXJnZXRNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBlZmZlY3RTdGFjayA9IFtdO1xudmFyIGFjdGl2ZUVmZmVjdDtcbnZhciBJVEVSQVRFX0tFWSA9IFN5bWJvbCh0cnVlID8gXCJpdGVyYXRlXCIgOiBcIlwiKTtcbnZhciBNQVBfS0VZX0lURVJBVEVfS0VZID0gU3ltYm9sKHRydWUgPyBcIk1hcCBrZXkgaXRlcmF0ZVwiIDogXCJcIik7XG5mdW5jdGlvbiBpc0VmZmVjdChmbikge1xuICByZXR1cm4gZm4gJiYgZm4uX2lzRWZmZWN0ID09PSB0cnVlO1xufVxuZnVuY3Rpb24gZWZmZWN0Mihmbiwgb3B0aW9ucyA9IEVNUFRZX09CSikge1xuICBpZiAoaXNFZmZlY3QoZm4pKSB7XG4gICAgZm4gPSBmbi5yYXc7XG4gIH1cbiAgY29uc3QgZWZmZWN0MyA9IGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKTtcbiAgaWYgKCFvcHRpb25zLmxhenkpIHtcbiAgICBlZmZlY3QzKCk7XG4gIH1cbiAgcmV0dXJuIGVmZmVjdDM7XG59XG5mdW5jdGlvbiBzdG9wKGVmZmVjdDMpIHtcbiAgaWYgKGVmZmVjdDMuYWN0aXZlKSB7XG4gICAgY2xlYW51cChlZmZlY3QzKTtcbiAgICBpZiAoZWZmZWN0My5vcHRpb25zLm9uU3RvcCkge1xuICAgICAgZWZmZWN0My5vcHRpb25zLm9uU3RvcCgpO1xuICAgIH1cbiAgICBlZmZlY3QzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59XG52YXIgdWlkID0gMDtcbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlRWZmZWN0KGZuLCBvcHRpb25zKSB7XG4gIGNvbnN0IGVmZmVjdDMgPSBmdW5jdGlvbiByZWFjdGl2ZUVmZmVjdCgpIHtcbiAgICBpZiAoIWVmZmVjdDMuYWN0aXZlKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgaWYgKCFlZmZlY3RTdGFjay5pbmNsdWRlcyhlZmZlY3QzKSkge1xuICAgICAgY2xlYW51cChlZmZlY3QzKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGVuYWJsZVRyYWNraW5nKCk7XG4gICAgICAgIGVmZmVjdFN0YWNrLnB1c2goZWZmZWN0Myk7XG4gICAgICAgIGFjdGl2ZUVmZmVjdCA9IGVmZmVjdDM7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZWZmZWN0U3RhY2sucG9wKCk7XG4gICAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgICAgYWN0aXZlRWZmZWN0ID0gZWZmZWN0U3RhY2tbZWZmZWN0U3RhY2subGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBlZmZlY3QzLmlkID0gdWlkKys7XG4gIGVmZmVjdDMuYWxsb3dSZWN1cnNlID0gISFvcHRpb25zLmFsbG93UmVjdXJzZTtcbiAgZWZmZWN0My5faXNFZmZlY3QgPSB0cnVlO1xuICBlZmZlY3QzLmFjdGl2ZSA9IHRydWU7XG4gIGVmZmVjdDMucmF3ID0gZm47XG4gIGVmZmVjdDMuZGVwcyA9IFtdO1xuICBlZmZlY3QzLm9wdGlvbnMgPSBvcHRpb25zO1xuICByZXR1cm4gZWZmZWN0Mztcbn1cbmZ1bmN0aW9uIGNsZWFudXAoZWZmZWN0Mykge1xuICBjb25zdCB7IGRlcHMgfSA9IGVmZmVjdDM7XG4gIGlmIChkZXBzLmxlbmd0aCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVwc1tpXS5kZWxldGUoZWZmZWN0Myk7XG4gICAgfVxuICAgIGRlcHMubGVuZ3RoID0gMDtcbiAgfVxufVxudmFyIHNob3VsZFRyYWNrID0gdHJ1ZTtcbnZhciB0cmFja1N0YWNrID0gW107XG5mdW5jdGlvbiBwYXVzZVRyYWNraW5nKCkge1xuICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICBzaG91bGRUcmFjayA9IGZhbHNlO1xufVxuZnVuY3Rpb24gZW5hYmxlVHJhY2tpbmcoKSB7XG4gIHRyYWNrU3RhY2sucHVzaChzaG91bGRUcmFjayk7XG4gIHNob3VsZFRyYWNrID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHJlc2V0VHJhY2tpbmcoKSB7XG4gIGNvbnN0IGxhc3QgPSB0cmFja1N0YWNrLnBvcCgpO1xuICBzaG91bGRUcmFjayA9IGxhc3QgPT09IHZvaWQgMCA/IHRydWUgOiBsYXN0O1xufVxuZnVuY3Rpb24gdHJhY2sodGFyZ2V0LCB0eXBlLCBrZXkpIHtcbiAgaWYgKCFzaG91bGRUcmFjayB8fCBhY3RpdmVFZmZlY3QgPT09IHZvaWQgMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKCFkZXBzTWFwKSB7XG4gICAgdGFyZ2V0TWFwLnNldCh0YXJnZXQsIGRlcHNNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKTtcbiAgfVxuICBsZXQgZGVwID0gZGVwc01hcC5nZXQoa2V5KTtcbiAgaWYgKCFkZXApIHtcbiAgICBkZXBzTWFwLnNldChrZXksIGRlcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICB9XG4gIGlmICghZGVwLmhhcyhhY3RpdmVFZmZlY3QpKSB7XG4gICAgZGVwLmFkZChhY3RpdmVFZmZlY3QpO1xuICAgIGFjdGl2ZUVmZmVjdC5kZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoYWN0aXZlRWZmZWN0Lm9wdGlvbnMub25UcmFjaykge1xuICAgICAgYWN0aXZlRWZmZWN0Lm9wdGlvbnMub25UcmFjayh7XG4gICAgICAgIGVmZmVjdDogYWN0aXZlRWZmZWN0LFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIGtleVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiB0cmlnZ2VyKHRhcmdldCwgdHlwZSwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIG9sZFRhcmdldCkge1xuICBjb25zdCBkZXBzTWFwID0gdGFyZ2V0TWFwLmdldCh0YXJnZXQpO1xuICBpZiAoIWRlcHNNYXApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWZmZWN0cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGNvbnN0IGFkZDIgPSAoZWZmZWN0c1RvQWRkKSA9PiB7XG4gICAgaWYgKGVmZmVjdHNUb0FkZCkge1xuICAgICAgZWZmZWN0c1RvQWRkLmZvckVhY2goKGVmZmVjdDMpID0+IHtcbiAgICAgICAgaWYgKGVmZmVjdDMgIT09IGFjdGl2ZUVmZmVjdCB8fCBlZmZlY3QzLmFsbG93UmVjdXJzZSkge1xuICAgICAgICAgIGVmZmVjdHMuYWRkKGVmZmVjdDMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGlmICh0eXBlID09PSBcImNsZWFyXCIpIHtcbiAgICBkZXBzTWFwLmZvckVhY2goYWRkMik7XG4gIH0gZWxzZSBpZiAoa2V5ID09PSBcImxlbmd0aFwiICYmIGlzQXJyYXkodGFyZ2V0KSkge1xuICAgIGRlcHNNYXAuZm9yRWFjaCgoZGVwLCBrZXkyKSA9PiB7XG4gICAgICBpZiAoa2V5MiA9PT0gXCJsZW5ndGhcIiB8fCBrZXkyID49IG5ld1ZhbHVlKSB7XG4gICAgICAgIGFkZDIoZGVwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoa2V5ICE9PSB2b2lkIDApIHtcbiAgICAgIGFkZDIoZGVwc01hcC5nZXQoa2V5KSk7XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImFkZFwiOlxuICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgIGFkZDIoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgYWRkMihkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzSW50ZWdlcktleShrZXkpKSB7XG4gICAgICAgICAgYWRkMihkZXBzTWFwLmdldChcImxlbmd0aFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGVsZXRlXCI6XG4gICAgICAgIGlmICghaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgYWRkMihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBhZGQyKGRlcHNNYXAuZ2V0KE1BUF9LRVlfSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2V0XCI6XG4gICAgICAgIGlmIChpc01hcCh0YXJnZXQpKSB7XG4gICAgICAgICAgYWRkMihkZXBzTWFwLmdldChJVEVSQVRFX0tFWSkpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBjb25zdCBydW4gPSAoZWZmZWN0MykgPT4ge1xuICAgIGlmIChlZmZlY3QzLm9wdGlvbnMub25UcmlnZ2VyKSB7XG4gICAgICBlZmZlY3QzLm9wdGlvbnMub25UcmlnZ2VyKHtcbiAgICAgICAgZWZmZWN0OiBlZmZlY3QzLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGtleSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgIG9sZFZhbHVlLFxuICAgICAgICBvbGRUYXJnZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZWZmZWN0My5vcHRpb25zLnNjaGVkdWxlcikge1xuICAgICAgZWZmZWN0My5vcHRpb25zLnNjaGVkdWxlcihlZmZlY3QzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWZmZWN0MygpO1xuICAgIH1cbiAgfTtcbiAgZWZmZWN0cy5mb3JFYWNoKHJ1bik7XG59XG52YXIgaXNOb25UcmFja2FibGVLZXlzID0gLyogQF9fUFVSRV9fICovIG1ha2VNYXAoYF9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZWApO1xudmFyIGJ1aWx0SW5TeW1ib2xzID0gbmV3IFNldChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhTeW1ib2wpLm1hcCgoa2V5KSA9PiBTeW1ib2xba2V5XSkuZmlsdGVyKGlzU3ltYm9sKSk7XG52YXIgZ2V0MiA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVHZXR0ZXIoKTtcbnZhciByZWFkb25seUdldCA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVHZXR0ZXIodHJ1ZSk7XG52YXIgYXJyYXlJbnN0cnVtZW50YXRpb25zID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpO1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zKCkge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0ge307XG4gIFtcImluY2x1ZGVzXCIsIFwiaW5kZXhPZlwiLCBcImxhc3RJbmRleE9mXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IGFyciA9IHRvUmF3KHRoaXMpO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB0cmFjayhhcnIsIFwiZ2V0XCIsIGkgKyBcIlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGFycltrZXldKC4uLmFyZ3MpO1xuICAgICAgaWYgKHJlcyA9PT0gLTEgfHwgcmVzID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gYXJyW2tleV0oLi4uYXJncy5tYXAodG9SYXcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gIFtcInB1c2hcIiwgXCJwb3BcIiwgXCJzaGlmdFwiLCBcInVuc2hpZnRcIiwgXCJzcGxpY2VcIl0uZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaW5zdHJ1bWVudGF0aW9uc1trZXldID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgcGF1c2VUcmFja2luZygpO1xuICAgICAgY29uc3QgcmVzID0gdG9SYXcodGhpcylba2V5XS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIHJlc2V0VHJhY2tpbmcoKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBpbnN0cnVtZW50YXRpb25zO1xufVxuZnVuY3Rpb24gY3JlYXRlR2V0dGVyKGlzUmVhZG9ubHkgPSBmYWxzZSwgc2hhbGxvdyA9IGZhbHNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBnZXQzKHRhcmdldCwga2V5LCByZWNlaXZlcikge1xuICAgIGlmIChrZXkgPT09IFwiX192X2lzUmVhY3RpdmVcIikge1xuICAgICAgcmV0dXJuICFpc1JlYWRvbmx5O1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWRvbmx5XCIpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5O1xuICAgIH0gZWxzZSBpZiAoa2V5ID09PSBcIl9fdl9yYXdcIiAmJiByZWNlaXZlciA9PT0gKGlzUmVhZG9ubHkgPyBzaGFsbG93ID8gc2hhbGxvd1JlYWRvbmx5TWFwIDogcmVhZG9ubHlNYXAgOiBzaGFsbG93ID8gc2hhbGxvd1JlYWN0aXZlTWFwIDogcmVhY3RpdmVNYXApLmdldCh0YXJnZXQpKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRJc0FycmF5ID0gaXNBcnJheSh0YXJnZXQpO1xuICAgIGlmICghaXNSZWFkb25seSAmJiB0YXJnZXRJc0FycmF5ICYmIGhhc093bihhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSkpIHtcbiAgICAgIHJldHVybiBSZWZsZWN0LmdldChhcnJheUluc3RydW1lbnRhdGlvbnMsIGtleSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBjb25zdCByZXMgPSBSZWZsZWN0LmdldCh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICAgIGlmIChpc1N5bWJvbChrZXkpID8gYnVpbHRJblN5bWJvbHMuaGFzKGtleSkgOiBpc05vblRyYWNrYWJsZUtleXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKCFpc1JlYWRvbmx5KSB7XG4gICAgICB0cmFjayh0YXJnZXQsIFwiZ2V0XCIsIGtleSk7XG4gICAgfVxuICAgIGlmIChzaGFsbG93KSB7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBpZiAoaXNSZWYocmVzKSkge1xuICAgICAgY29uc3Qgc2hvdWxkVW53cmFwID0gIXRhcmdldElzQXJyYXkgfHwgIWlzSW50ZWdlcktleShrZXkpO1xuICAgICAgcmV0dXJuIHNob3VsZFVud3JhcCA/IHJlcy52YWx1ZSA6IHJlcztcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIHJldHVybiBpc1JlYWRvbmx5ID8gcmVhZG9ubHkocmVzKSA6IHJlYWN0aXZlMihyZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xufVxudmFyIHNldDIgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlU2V0dGVyKCk7XG5mdW5jdGlvbiBjcmVhdGVTZXR0ZXIoc2hhbGxvdyA9IGZhbHNlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZXQzKHRhcmdldCwga2V5LCB2YWx1ZSwgcmVjZWl2ZXIpIHtcbiAgICBsZXQgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgICBpZiAoIXNoYWxsb3cpIHtcbiAgICAgIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICAgICAgb2xkVmFsdWUgPSB0b1JhdyhvbGRWYWx1ZSk7XG4gICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSAmJiBpc1JlZihvbGRWYWx1ZSkgJiYgIWlzUmVmKHZhbHVlKSkge1xuICAgICAgICBvbGRWYWx1ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaGFkS2V5ID0gaXNBcnJheSh0YXJnZXQpICYmIGlzSW50ZWdlcktleShrZXkpID8gTnVtYmVyKGtleSkgPCB0YXJnZXQubGVuZ3RoIDogaGFzT3duKHRhcmdldCwga2V5KTtcbiAgICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LnNldCh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKTtcbiAgICBpZiAodGFyZ2V0ID09PSB0b1JhdyhyZWNlaXZlcikpIHtcbiAgICAgIGlmICghaGFkS2V5KSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiLCBrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpKSB7XG4gICAgICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICBjb25zdCBoYWRLZXkgPSBoYXNPd24odGFyZ2V0LCBrZXkpO1xuICBjb25zdCBvbGRWYWx1ZSA9IHRhcmdldFtrZXldO1xuICBjb25zdCByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcbiAgaWYgKHJlc3VsdCAmJiBoYWRLZXkpIHtcbiAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiwga2V5LCB2b2lkIDAsIG9sZFZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gaGFzKHRhcmdldCwga2V5KSB7XG4gIGNvbnN0IHJlc3VsdCA9IFJlZmxlY3QuaGFzKHRhcmdldCwga2V5KTtcbiAgaWYgKCFpc1N5bWJvbChrZXkpIHx8ICFidWlsdEluU3ltYm9scy5oYXMoa2V5KSkge1xuICAgIHRyYWNrKHRhcmdldCwgXCJoYXNcIiwga2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gb3duS2V5cyh0YXJnZXQpIHtcbiAgdHJhY2sodGFyZ2V0LCBcIml0ZXJhdGVcIiwgaXNBcnJheSh0YXJnZXQpID8gXCJsZW5ndGhcIiA6IElURVJBVEVfS0VZKTtcbiAgcmV0dXJuIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpO1xufVxudmFyIG11dGFibGVIYW5kbGVycyA9IHtcbiAgZ2V0OiBnZXQyLFxuICBzZXQ6IHNldDIsXG4gIGRlbGV0ZVByb3BlcnR5LFxuICBoYXMsXG4gIG93bktleXNcbn07XG52YXIgcmVhZG9ubHlIYW5kbGVycyA9IHtcbiAgZ2V0OiByZWFkb25seUdldCxcbiAgc2V0KHRhcmdldCwga2V5KSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgIGNvbnNvbGUud2FybihgU2V0IG9wZXJhdGlvbiBvbiBrZXkgXCIke1N0cmluZyhrZXkpfVwiIGZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYERlbGV0ZSBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbnZhciB0b1JlYWN0aXZlID0gKHZhbHVlKSA9PiBpc09iamVjdCh2YWx1ZSkgPyByZWFjdGl2ZTIodmFsdWUpIDogdmFsdWU7XG52YXIgdG9SZWFkb25seSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhZG9ubHkodmFsdWUpIDogdmFsdWU7XG52YXIgdG9TaGFsbG93ID0gKHZhbHVlKSA9PiB2YWx1ZTtcbnZhciBnZXRQcm90byA9ICh2KSA9PiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuZnVuY3Rpb24gZ2V0JDEodGFyZ2V0LCBrZXksIGlzUmVhZG9ubHkgPSBmYWxzZSwgaXNTaGFsbG93ID0gZmFsc2UpIHtcbiAgdGFyZ2V0ID0gdGFyZ2V0W1xuICAgIFwiX192X3Jhd1wiXG4gICAgLyogUkFXICovXG4gIF07XG4gIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJnZXRcIiwga2V5KTtcbiAgfVxuICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIHJhd0tleSk7XG4gIGNvbnN0IHsgaGFzOiBoYXMyIH0gPSBnZXRQcm90byhyYXdUYXJnZXQpO1xuICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICBpZiAoaGFzMi5jYWxsKHJhd1RhcmdldCwga2V5KSkge1xuICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQoa2V5KSk7XG4gIH0gZWxzZSBpZiAoaGFzMi5jYWxsKHJhd1RhcmdldCwgcmF3S2V5KSkge1xuICAgIHJldHVybiB3cmFwKHRhcmdldC5nZXQocmF3S2V5KSk7XG4gIH0gZWxzZSBpZiAodGFyZ2V0ICE9PSByYXdUYXJnZXQpIHtcbiAgICB0YXJnZXQuZ2V0KGtleSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhcyQxKGtleSwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gIGNvbnN0IHRhcmdldCA9IHRoaXNbXG4gICAgXCJfX3ZfcmF3XCJcbiAgICAvKiBSQVcgKi9cbiAgXTtcbiAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgaWYgKGtleSAhPT0gcmF3S2V5KSB7XG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImhhc1wiLCBrZXkpO1xuICB9XG4gICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiwgcmF3S2V5KTtcbiAgcmV0dXJuIGtleSA9PT0gcmF3S2V5ID8gdGFyZ2V0LmhhcyhrZXkpIDogdGFyZ2V0LmhhcyhrZXkpIHx8IHRhcmdldC5oYXMocmF3S2V5KTtcbn1cbmZ1bmN0aW9uIHNpemUodGFyZ2V0LCBpc1JlYWRvbmx5ID0gZmFsc2UpIHtcbiAgdGFyZ2V0ID0gdGFyZ2V0W1xuICAgIFwiX192X3Jhd1wiXG4gICAgLyogUkFXICovXG4gIF07XG4gICFpc1JlYWRvbmx5ICYmIHRyYWNrKHRvUmF3KHRhcmdldCksIFwiaXRlcmF0ZVwiLCBJVEVSQVRFX0tFWSk7XG4gIHJldHVybiBSZWZsZWN0LmdldCh0YXJnZXQsIFwic2l6ZVwiLCB0YXJnZXQpO1xufVxuZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgY29uc3QgcHJvdG8gPSBnZXRQcm90byh0YXJnZXQpO1xuICBjb25zdCBoYWRLZXkgPSBwcm90by5oYXMuY2FsbCh0YXJnZXQsIHZhbHVlKTtcbiAgaWYgKCFoYWRLZXkpIHtcbiAgICB0YXJnZXQuYWRkKHZhbHVlKTtcbiAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwgdmFsdWUsIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNldCQxKGtleSwgdmFsdWUpIHtcbiAgdmFsdWUgPSB0b1Jhdyh2YWx1ZSk7XG4gIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICBjb25zdCB7IGhhczogaGFzMiwgZ2V0OiBnZXQzIH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICBsZXQgaGFkS2V5ID0gaGFzMi5jYWxsKHRhcmdldCwga2V5KTtcbiAgaWYgKCFoYWRLZXkpIHtcbiAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgIGhhZEtleSA9IGhhczIuY2FsbCh0YXJnZXQsIGtleSk7XG4gIH0gZWxzZSBpZiAodHJ1ZSkge1xuICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzMiwga2V5KTtcbiAgfVxuICBjb25zdCBvbGRWYWx1ZSA9IGdldDMuY2FsbCh0YXJnZXQsIGtleSk7XG4gIHRhcmdldC5zZXQoa2V5LCB2YWx1ZSk7XG4gIGlmICghaGFkS2V5KSB7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcInNldFwiLCBrZXksIHZhbHVlLCBvbGRWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBkZWxldGVFbnRyeShrZXkpIHtcbiAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gIGNvbnN0IHsgaGFzOiBoYXMyLCBnZXQ6IGdldDMgfSA9IGdldFByb3RvKHRhcmdldCk7XG4gIGxldCBoYWRLZXkgPSBoYXMyLmNhbGwodGFyZ2V0LCBrZXkpO1xuICBpZiAoIWhhZEtleSkge1xuICAgIGtleSA9IHRvUmF3KGtleSk7XG4gICAgaGFkS2V5ID0gaGFzMi5jYWxsKHRhcmdldCwga2V5KTtcbiAgfSBlbHNlIGlmICh0cnVlKSB7XG4gICAgY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMyLCBrZXkpO1xuICB9XG4gIGNvbnN0IG9sZFZhbHVlID0gZ2V0MyA/IGdldDMuY2FsbCh0YXJnZXQsIGtleSkgOiB2b2lkIDA7XG4gIGNvbnN0IHJlc3VsdCA9IHRhcmdldC5kZWxldGUoa2V5KTtcbiAgaWYgKGhhZEtleSkge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcImRlbGV0ZVwiLCBrZXksIHZvaWQgMCwgb2xkVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjbGVhcigpIHtcbiAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gIGNvbnN0IGhhZEl0ZW1zID0gdGFyZ2V0LnNpemUgIT09IDA7XG4gIGNvbnN0IG9sZFRhcmdldCA9IHRydWUgPyBpc01hcCh0YXJnZXQpID8gbmV3IE1hcCh0YXJnZXQpIDogbmV3IFNldCh0YXJnZXQpIDogdm9pZCAwO1xuICBjb25zdCByZXN1bHQgPSB0YXJnZXQuY2xlYXIoKTtcbiAgaWYgKGhhZEl0ZW1zKSB7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiY2xlYXJcIiwgdm9pZCAwLCB2b2lkIDAsIG9sZFRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZvckVhY2goaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XG4gIHJldHVybiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgY29uc3Qgb2JzZXJ2ZWQgPSB0aGlzO1xuICAgIGNvbnN0IHRhcmdldCA9IG9ic2VydmVkW1xuICAgICAgXCJfX3ZfcmF3XCJcbiAgICAgIC8qIFJBVyAqL1xuICAgIF07XG4gICAgY29uc3QgcmF3VGFyZ2V0ID0gdG9SYXcodGFyZ2V0KTtcbiAgICBjb25zdCB3cmFwID0gaXNTaGFsbG93ID8gdG9TaGFsbG93IDogaXNSZWFkb25seSA/IHRvUmVhZG9ubHkgOiB0b1JlYWN0aXZlO1xuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJpdGVyYXRlXCIsIElURVJBVEVfS0VZKTtcbiAgICByZXR1cm4gdGFyZ2V0LmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHRoaXNBcmcsIHdyYXAodmFsdWUpLCB3cmFwKGtleSksIG9ic2VydmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgaXNSZWFkb25seSwgaXNTaGFsbG93KSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpc1tcbiAgICAgIFwiX192X3Jhd1wiXG4gICAgICAvKiBSQVcgKi9cbiAgICBdO1xuICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgY29uc3QgdGFyZ2V0SXNNYXAgPSBpc01hcChyYXdUYXJnZXQpO1xuICAgIGNvbnN0IGlzUGFpciA9IG1ldGhvZCA9PT0gXCJlbnRyaWVzXCIgfHwgbWV0aG9kID09PSBTeW1ib2wuaXRlcmF0b3IgJiYgdGFyZ2V0SXNNYXA7XG4gICAgY29uc3QgaXNLZXlPbmx5ID0gbWV0aG9kID09PSBcImtleXNcIiAmJiB0YXJnZXRJc01hcDtcbiAgICBjb25zdCBpbm5lckl0ZXJhdG9yID0gdGFyZ2V0W21ldGhvZF0oLi4uYXJncyk7XG4gICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiLCBpc0tleU9ubHkgPyBNQVBfS0VZX0lURVJBVEVfS0VZIDogSVRFUkFURV9LRVkpO1xuICAgIHJldHVybiB7XG4gICAgICAvLyBpdGVyYXRvciBwcm90b2NvbFxuICAgICAgbmV4dCgpIHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaW5uZXJJdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIHJldHVybiBkb25lID8geyB2YWx1ZSwgZG9uZSB9IDoge1xuICAgICAgICAgIHZhbHVlOiBpc1BhaXIgPyBbd3JhcCh2YWx1ZVswXSksIHdyYXAodmFsdWVbMV0pXSA6IHdyYXAodmFsdWUpLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICAvLyBpdGVyYWJsZSBwcm90b2NvbFxuICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVSZWFkb25seU1ldGhvZCh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgIGNvbnN0IGtleSA9IGFyZ3NbMF0gPyBgb24ga2V5IFwiJHthcmdzWzBdfVwiIGAgOiBgYDtcbiAgICAgIGNvbnNvbGUud2FybihgJHtjYXBpdGFsaXplKHR5cGUpfSBvcGVyYXRpb24gJHtrZXl9ZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdG9SYXcodGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZSA9PT0gXCJkZWxldGVcIiA/IGZhbHNlIDogdGhpcztcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKSB7XG4gIGNvbnN0IG11dGFibGVJbnN0cnVtZW50YXRpb25zMiA9IHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5KTtcbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIHNpemUodGhpcyk7XG4gICAgfSxcbiAgICBoYXM6IGhhcyQxLFxuICAgIGFkZCxcbiAgICBzZXQ6IHNldCQxLFxuICAgIGRlbGV0ZTogZGVsZXRlRW50cnksXG4gICAgY2xlYXIsXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaChmYWxzZSwgZmFsc2UpXG4gIH07XG4gIGNvbnN0IHNoYWxsb3dJbnN0cnVtZW50YXRpb25zMiA9IHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgIH0sXG4gICAgaGFzOiBoYXMkMSxcbiAgICBhZGQsXG4gICAgc2V0OiBzZXQkMSxcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgIGNsZWFyLFxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIHRydWUpXG4gIH07XG4gIGNvbnN0IHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBzaXplKHRoaXMsIHRydWUpO1xuICAgIH0sXG4gICAgaGFzKGtleSkge1xuICAgICAgcmV0dXJuIGhhcyQxLmNhbGwodGhpcywga2V5LCB0cnVlKTtcbiAgICB9LFxuICAgIGFkZDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXG4gICAgICBcImFkZFwiXG4gICAgICAvKiBBREQgKi9cbiAgICApLFxuICAgIHNldDogY3JlYXRlUmVhZG9ubHlNZXRob2QoXG4gICAgICBcInNldFwiXG4gICAgICAvKiBTRVQgKi9cbiAgICApLFxuICAgIGRlbGV0ZTogY3JlYXRlUmVhZG9ubHlNZXRob2QoXG4gICAgICBcImRlbGV0ZVwiXG4gICAgICAvKiBERUxFVEUgKi9cbiAgICApLFxuICAgIGNsZWFyOiBjcmVhdGVSZWFkb25seU1ldGhvZChcbiAgICAgIFwiY2xlYXJcIlxuICAgICAgLyogQ0xFQVIgKi9cbiAgICApLFxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2godHJ1ZSwgZmFsc2UpXG4gIH07XG4gIGNvbnN0IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMyID0ge1xuICAgIGdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUsIHRydWUpO1xuICAgIH0sXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuICAgIGhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBoYXMkMS5jYWxsKHRoaXMsIGtleSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJhZGRcIlxuICAgICAgLyogQUREICovXG4gICAgKSxcbiAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJzZXRcIlxuICAgICAgLyogU0VUICovXG4gICAgKSxcbiAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJkZWxldGVcIlxuICAgICAgLyogREVMRVRFICovXG4gICAgKSxcbiAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXG4gICAgICBcImNsZWFyXCJcbiAgICAgIC8qIENMRUFSICovXG4gICAgKSxcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKHRydWUsIHRydWUpXG4gIH07XG4gIGNvbnN0IGl0ZXJhdG9yTWV0aG9kcyA9IFtcImtleXNcIiwgXCJ2YWx1ZXNcIiwgXCJlbnRyaWVzXCIsIFN5bWJvbC5pdGVyYXRvcl07XG4gIGl0ZXJhdG9yTWV0aG9kcy5mb3JFYWNoKChtZXRob2QpID0+IHtcbiAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uczJbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIGZhbHNlKTtcbiAgICByZWFkb25seUluc3RydW1lbnRhdGlvbnMyW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIGZhbHNlKTtcbiAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uczJbbWV0aG9kXSA9IGNyZWF0ZUl0ZXJhYmxlTWV0aG9kKG1ldGhvZCwgZmFsc2UsIHRydWUpO1xuICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMyW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIHRydWUsIHRydWUpO1xuICB9KTtcbiAgcmV0dXJuIFtcbiAgICBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uczIsXG4gICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMixcbiAgICBzaGFsbG93SW5zdHJ1bWVudGF0aW9uczIsXG4gICAgc2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczJcbiAgXTtcbn1cbnZhciBbbXV0YWJsZUluc3RydW1lbnRhdGlvbnMsIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucywgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnNdID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihpc1JlYWRvbmx5LCBzaGFsbG93KSB7XG4gIGNvbnN0IGluc3RydW1lbnRhdGlvbnMgPSBzaGFsbG93ID8gaXNSZWFkb25seSA/IHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMgOiBzaGFsbG93SW5zdHJ1bWVudGF0aW9ucyA6IGlzUmVhZG9ubHkgPyByZWFkb25seUluc3RydW1lbnRhdGlvbnMgOiBtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucztcbiAgcmV0dXJuICh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpID0+IHtcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIpIHtcbiAgICAgIHJldHVybiAhaXNSZWFkb25seTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIpIHtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBSZWZsZWN0LmdldChoYXNPd24oaW5zdHJ1bWVudGF0aW9ucywga2V5KSAmJiBrZXkgaW4gdGFyZ2V0ID8gaW5zdHJ1bWVudGF0aW9ucyA6IHRhcmdldCwga2V5LCByZWNlaXZlcik7XG4gIH07XG59XG52YXIgbXV0YWJsZUNvbGxlY3Rpb25IYW5kbGVycyA9IHtcbiAgZ2V0OiAvKiBAX19QVVJFX18gKi8gY3JlYXRlSW5zdHJ1bWVudGF0aW9uR2V0dGVyKGZhbHNlLCBmYWxzZSlcbn07XG52YXIgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcih0cnVlLCBmYWxzZSlcbn07XG5mdW5jdGlvbiBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhczIsIGtleSkge1xuICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICBpZiAocmF3S2V5ICE9PSBrZXkgJiYgaGFzMi5jYWxsKHRhcmdldCwgcmF3S2V5KSkge1xuICAgIGNvbnN0IHR5cGUgPSB0b1Jhd1R5cGUodGFyZ2V0KTtcbiAgICBjb25zb2xlLndhcm4oYFJlYWN0aXZlICR7dHlwZX0gY29udGFpbnMgYm90aCB0aGUgcmF3IGFuZCByZWFjdGl2ZSB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBvYmplY3Qke3R5cGUgPT09IGBNYXBgID8gYCBhcyBrZXlzYCA6IGBgfSwgd2hpY2ggY2FuIGxlYWQgdG8gaW5jb25zaXN0ZW5jaWVzLiBBdm9pZCBkaWZmZXJlbnRpYXRpbmcgYmV0d2VlbiB0aGUgcmF3IGFuZCByZWFjdGl2ZSB2ZXJzaW9ucyBvZiBhbiBvYmplY3QgYW5kIG9ubHkgdXNlIHRoZSByZWFjdGl2ZSB2ZXJzaW9uIGlmIHBvc3NpYmxlLmApO1xuICB9XG59XG52YXIgcmVhY3RpdmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBzaGFsbG93UmVhY3RpdmVNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciByZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xudmFyIHNoYWxsb3dSZWFkb25seU1hcCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gdGFyZ2V0VHlwZU1hcChyYXdUeXBlKSB7XG4gIHN3aXRjaCAocmF3VHlwZSkge1xuICAgIGNhc2UgXCJPYmplY3RcIjpcbiAgICBjYXNlIFwiQXJyYXlcIjpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgXCJNYXBcIjpcbiAgICBjYXNlIFwiU2V0XCI6XG4gICAgY2FzZSBcIldlYWtNYXBcIjpcbiAgICBjYXNlIFwiV2Vha1NldFwiOlxuICAgICAgcmV0dXJuIDI7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAwO1xuICB9XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRUeXBlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZVtcbiAgICBcIl9fdl9za2lwXCJcbiAgICAvKiBTS0lQICovXG4gIF0gfHwgIU9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpID8gMCA6IHRhcmdldFR5cGVNYXAodG9SYXdUeXBlKHZhbHVlKSk7XG59XG5mdW5jdGlvbiByZWFjdGl2ZTIodGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQgJiYgdGFyZ2V0W1xuICAgIFwiX192X2lzUmVhZG9ubHlcIlxuICAgIC8qIElTX1JFQURPTkxZICovXG4gIF0pIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIHJldHVybiBjcmVhdGVSZWFjdGl2ZU9iamVjdCh0YXJnZXQsIGZhbHNlLCBtdXRhYmxlSGFuZGxlcnMsIG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMsIHJlYWN0aXZlTWFwKTtcbn1cbmZ1bmN0aW9uIHJlYWRvbmx5KHRhcmdldCkge1xuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCB0cnVlLCByZWFkb25seUhhbmRsZXJzLCByZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycywgcmVhZG9ubHlNYXApO1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBpc1JlYWRvbmx5LCBiYXNlSGFuZGxlcnMsIGNvbGxlY3Rpb25IYW5kbGVycywgcHJveHlNYXApIHtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgaWYgKHRydWUpIHtcbiAgICAgIGNvbnNvbGUud2FybihgdmFsdWUgY2Fubm90IGJlIG1hZGUgcmVhY3RpdmU6ICR7U3RyaW5nKHRhcmdldCl9YCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgaWYgKHRhcmdldFtcbiAgICBcIl9fdl9yYXdcIlxuICAgIC8qIFJBVyAqL1xuICBdICYmICEoaXNSZWFkb25seSAmJiB0YXJnZXRbXG4gICAgXCJfX3ZfaXNSZWFjdGl2ZVwiXG4gICAgLyogSVNfUkVBQ1RJVkUgKi9cbiAgXSkpIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGNvbnN0IGV4aXN0aW5nUHJveHkgPSBwcm94eU1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKGV4aXN0aW5nUHJveHkpIHtcbiAgICByZXR1cm4gZXhpc3RpbmdQcm94eTtcbiAgfVxuICBjb25zdCB0YXJnZXRUeXBlID0gZ2V0VGFyZ2V0VHlwZSh0YXJnZXQpO1xuICBpZiAodGFyZ2V0VHlwZSA9PT0gMCkge1xuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbiAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LCB0YXJnZXRUeXBlID09PSAyID8gY29sbGVjdGlvbkhhbmRsZXJzIDogYmFzZUhhbmRsZXJzKTtcbiAgcHJveHlNYXAuc2V0KHRhcmdldCwgcHJveHkpO1xuICByZXR1cm4gcHJveHk7XG59XG5mdW5jdGlvbiB0b1JhdyhvYnNlcnZlZCkge1xuICByZXR1cm4gb2JzZXJ2ZWQgJiYgdG9SYXcob2JzZXJ2ZWRbXG4gICAgXCJfX3ZfcmF3XCJcbiAgICAvKiBSQVcgKi9cbiAgXSkgfHwgb2JzZXJ2ZWQ7XG59XG5mdW5jdGlvbiBpc1JlZihyKSB7XG4gIHJldHVybiBCb29sZWFuKHIgJiYgci5fX3ZfaXNSZWYgPT09IHRydWUpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbWFnaWNzLyRuZXh0VGljay5qc1xubWFnaWMoXCJuZXh0VGlja1wiLCAoKSA9PiBuZXh0VGljayk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJGRpc3BhdGNoLmpzXG5tYWdpYyhcImRpc3BhdGNoXCIsIChlbCkgPT4gZGlzcGF0Y2guYmluZChkaXNwYXRjaCwgZWwpKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kd2F0Y2guanNcbm1hZ2ljKFwid2F0Y2hcIiwgKGVsLCB7IGV2YWx1YXRlTGF0ZXI6IGV2YWx1YXRlTGF0ZXIyLCBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiAoa2V5LCBjYWxsYmFjaykgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcjIoa2V5KTtcbiAgbGV0IGdldHRlciA9ICgpID0+IHtcbiAgICBsZXQgdmFsdWU7XG4gICAgZXZhbHVhdGUyKChpKSA9PiB2YWx1ZSA9IGkpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbiAgbGV0IHVud2F0Y2ggPSB3YXRjaChnZXR0ZXIsIGNhbGxiYWNrKTtcbiAgY2xlYW51cDIodW53YXRjaCk7XG59KTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kc3RvcmUuanNcbm1hZ2ljKFwic3RvcmVcIiwgZ2V0U3RvcmVzKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kZGF0YS5qc1xubWFnaWMoXCJkYXRhXCIsIChlbCkgPT4gc2NvcGUoZWwpKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kcm9vdC5qc1xubWFnaWMoXCJyb290XCIsIChlbCkgPT4gY2xvc2VzdFJvb3QoZWwpKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kcmVmcy5qc1xubWFnaWMoXCJyZWZzXCIsIChlbCkgPT4ge1xuICBpZiAoZWwuX3hfcmVmc19wcm94eSlcbiAgICByZXR1cm4gZWwuX3hfcmVmc19wcm94eTtcbiAgZWwuX3hfcmVmc19wcm94eSA9IG1lcmdlUHJveGllcyhnZXRBcnJheU9mUmVmT2JqZWN0KGVsKSk7XG4gIHJldHVybiBlbC5feF9yZWZzX3Byb3h5O1xufSk7XG5mdW5jdGlvbiBnZXRBcnJheU9mUmVmT2JqZWN0KGVsKSB7XG4gIGxldCByZWZPYmplY3RzID0gW107XG4gIGZpbmRDbG9zZXN0KGVsLCAoaSkgPT4ge1xuICAgIGlmIChpLl94X3JlZnMpXG4gICAgICByZWZPYmplY3RzLnB1c2goaS5feF9yZWZzKTtcbiAgfSk7XG4gIHJldHVybiByZWZPYmplY3RzO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvaWRzLmpzXG52YXIgZ2xvYmFsSWRNZW1vID0ge307XG5mdW5jdGlvbiBmaW5kQW5kSW5jcmVtZW50SWQobmFtZSkge1xuICBpZiAoIWdsb2JhbElkTWVtb1tuYW1lXSlcbiAgICBnbG9iYWxJZE1lbW9bbmFtZV0gPSAwO1xuICByZXR1cm4gKytnbG9iYWxJZE1lbW9bbmFtZV07XG59XG5mdW5jdGlvbiBjbG9zZXN0SWRSb290KGVsLCBuYW1lKSB7XG4gIHJldHVybiBmaW5kQ2xvc2VzdChlbCwgKGVsZW1lbnQpID0+IHtcbiAgICBpZiAoZWxlbWVudC5feF9pZHMgJiYgZWxlbWVudC5feF9pZHNbbmFtZV0pXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBzZXRJZFJvb3QoZWwsIG5hbWUpIHtcbiAgaWYgKCFlbC5feF9pZHMpXG4gICAgZWwuX3hfaWRzID0ge307XG4gIGlmICghZWwuX3hfaWRzW25hbWVdKVxuICAgIGVsLl94X2lkc1tuYW1lXSA9IGZpbmRBbmRJbmNyZW1lbnRJZChuYW1lKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kaWQuanNcbm1hZ2ljKFwiaWRcIiwgKGVsLCB7IGNsZWFudXA6IGNsZWFudXAyIH0pID0+IChuYW1lLCBrZXkgPSBudWxsKSA9PiB7XG4gIGxldCBjYWNoZUtleSA9IGAke25hbWV9JHtrZXkgPyBgLSR7a2V5fWAgOiBcIlwifWA7XG4gIHJldHVybiBjYWNoZUlkQnlOYW1lT25FbGVtZW50KGVsLCBjYWNoZUtleSwgY2xlYW51cDIsICgpID0+IHtcbiAgICBsZXQgcm9vdCA9IGNsb3Nlc3RJZFJvb3QoZWwsIG5hbWUpO1xuICAgIGxldCBpZCA9IHJvb3QgPyByb290Ll94X2lkc1tuYW1lXSA6IGZpbmRBbmRJbmNyZW1lbnRJZChuYW1lKTtcbiAgICByZXR1cm4ga2V5ID8gYCR7bmFtZX0tJHtpZH0tJHtrZXl9YCA6IGAke25hbWV9LSR7aWR9YDtcbiAgfSk7XG59KTtcbmludGVyY2VwdENsb25lKChmcm9tLCB0bykgPT4ge1xuICBpZiAoZnJvbS5feF9pZCkge1xuICAgIHRvLl94X2lkID0gZnJvbS5feF9pZDtcbiAgfVxufSk7XG5mdW5jdGlvbiBjYWNoZUlkQnlOYW1lT25FbGVtZW50KGVsLCBjYWNoZUtleSwgY2xlYW51cDIsIGNhbGxiYWNrKSB7XG4gIGlmICghZWwuX3hfaWQpXG4gICAgZWwuX3hfaWQgPSB7fTtcbiAgaWYgKGVsLl94X2lkW2NhY2hlS2V5XSlcbiAgICByZXR1cm4gZWwuX3hfaWRbY2FjaGVLZXldO1xuICBsZXQgb3V0cHV0ID0gY2FsbGJhY2soKTtcbiAgZWwuX3hfaWRbY2FjaGVLZXldID0gb3V0cHV0O1xuICBjbGVhbnVwMigoKSA9PiB7XG4gICAgZGVsZXRlIGVsLl94X2lkW2NhY2hlS2V5XTtcbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJGVsLmpzXG5tYWdpYyhcImVsXCIsIChlbCkgPT4gZWwpO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbWFnaWNzL2luZGV4LmpzXG53YXJuTWlzc2luZ1BsdWdpbk1hZ2ljKFwiRm9jdXNcIiwgXCJmb2N1c1wiLCBcImZvY3VzXCIpO1xud2Fybk1pc3NpbmdQbHVnaW5NYWdpYyhcIlBlcnNpc3RcIiwgXCJwZXJzaXN0XCIsIFwicGVyc2lzdFwiKTtcbmZ1bmN0aW9uIHdhcm5NaXNzaW5nUGx1Z2luTWFnaWMobmFtZSwgbWFnaWNOYW1lLCBzbHVnKSB7XG4gIG1hZ2ljKG1hZ2ljTmFtZSwgKGVsKSA9PiB3YXJuKGBZb3UgY2FuJ3QgdXNlIFskJHttYWdpY05hbWV9XSB3aXRob3V0IGZpcnN0IGluc3RhbGxpbmcgdGhlIFwiJHtuYW1lfVwiIHBsdWdpbiBoZXJlOiBodHRwczovL2FscGluZWpzLmRldi9wbHVnaW5zLyR7c2x1Z31gLCBlbCkpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LW1vZGVsYWJsZS5qc1xuZGlyZWN0aXZlKFwibW9kZWxhYmxlXCIsIChlbCwgeyBleHByZXNzaW9uIH0sIHsgZWZmZWN0OiBlZmZlY3QzLCBldmFsdWF0ZUxhdGVyOiBldmFsdWF0ZUxhdGVyMiwgY2xlYW51cDogY2xlYW51cDIgfSkgPT4ge1xuICBsZXQgZnVuYyA9IGV2YWx1YXRlTGF0ZXIyKGV4cHJlc3Npb24pO1xuICBsZXQgaW5uZXJHZXQgPSAoKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBmdW5jKChpKSA9PiByZXN1bHQgPSBpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBsZXQgZXZhbHVhdGVJbm5lclNldCA9IGV2YWx1YXRlTGF0ZXIyKGAke2V4cHJlc3Npb259ID0gX19wbGFjZWhvbGRlcmApO1xuICBsZXQgaW5uZXJTZXQgPSAodmFsKSA9PiBldmFsdWF0ZUlubmVyU2V0KCgpID0+IHtcbiAgfSwgeyBzY29wZTogeyBcIl9fcGxhY2Vob2xkZXJcIjogdmFsIH0gfSk7XG4gIGxldCBpbml0aWFsVmFsdWUgPSBpbm5lckdldCgpO1xuICBpbm5lclNldChpbml0aWFsVmFsdWUpO1xuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgaWYgKCFlbC5feF9tb2RlbClcbiAgICAgIHJldHVybjtcbiAgICBlbC5feF9yZW1vdmVNb2RlbExpc3RlbmVyc1tcImRlZmF1bHRcIl0oKTtcbiAgICBsZXQgb3V0ZXJHZXQgPSBlbC5feF9tb2RlbC5nZXQ7XG4gICAgbGV0IG91dGVyU2V0ID0gZWwuX3hfbW9kZWwuc2V0O1xuICAgIGxldCByZWxlYXNlRW50YW5nbGVtZW50ID0gZW50YW5nbGUoXG4gICAgICB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gb3V0ZXJHZXQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgb3V0ZXJTZXQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGlubmVyR2V0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIGlubmVyU2V0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgY2xlYW51cDIocmVsZWFzZUVudGFuZ2xlbWVudCk7XG4gIH0pO1xufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtdGVsZXBvcnQuanNcbmRpcmVjdGl2ZShcInRlbGVwb3J0XCIsIChlbCwgeyBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwidGVtcGxhdGVcIilcbiAgICB3YXJuKFwieC10ZWxlcG9ydCBjYW4gb25seSBiZSB1c2VkIG9uIGEgPHRlbXBsYXRlPiB0YWdcIiwgZWwpO1xuICBsZXQgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGV4cHJlc3Npb24pO1xuICBsZXQgY2xvbmUyID0gZWwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gIGVsLl94X3RlbGVwb3J0ID0gY2xvbmUyO1xuICBjbG9uZTIuX3hfdGVsZXBvcnRCYWNrID0gZWw7XG4gIGVsLnNldEF0dHJpYnV0ZShcImRhdGEtdGVsZXBvcnQtdGVtcGxhdGVcIiwgdHJ1ZSk7XG4gIGNsb25lMi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbGVwb3J0LXRhcmdldFwiLCB0cnVlKTtcbiAgaWYgKGVsLl94X2ZvcndhcmRFdmVudHMpIHtcbiAgICBlbC5feF9mb3J3YXJkRXZlbnRzLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgY2xvbmUyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoZSkgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBlLmNvbnN0cnVjdG9yKGUudHlwZSwgZSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgYWRkU2NvcGVUb05vZGUoY2xvbmUyLCB7fSwgZWwpO1xuICBsZXQgcGxhY2VJbkRvbSA9IChjbG9uZTMsIHRhcmdldDIsIG1vZGlmaWVyczIpID0+IHtcbiAgICBpZiAobW9kaWZpZXJzMi5pbmNsdWRlcyhcInByZXBlbmRcIikpIHtcbiAgICAgIHRhcmdldDIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2xvbmUzLCB0YXJnZXQyKTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyczIuaW5jbHVkZXMoXCJhcHBlbmRcIikpIHtcbiAgICAgIHRhcmdldDIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2xvbmUzLCB0YXJnZXQyLm5leHRTaWJsaW5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0Mi5hcHBlbmRDaGlsZChjbG9uZTMpO1xuICAgIH1cbiAgfTtcbiAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICBwbGFjZUluRG9tKGNsb25lMiwgdGFyZ2V0LCBtb2RpZmllcnMpO1xuICAgIHNraXBEdXJpbmdDbG9uZSgoKSA9PiB7XG4gICAgICBpbml0VHJlZShjbG9uZTIpO1xuICAgIH0pKCk7XG4gIH0pO1xuICBlbC5feF90ZWxlcG9ydFB1dEJhY2sgPSAoKSA9PiB7XG4gICAgbGV0IHRhcmdldDIgPSBnZXRUYXJnZXQoZXhwcmVzc2lvbik7XG4gICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgIHBsYWNlSW5Eb20oZWwuX3hfdGVsZXBvcnQsIHRhcmdldDIsIG1vZGlmaWVycyk7XG4gICAgfSk7XG4gIH07XG4gIGNsZWFudXAyKFxuICAgICgpID0+IG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICBjbG9uZTIucmVtb3ZlKCk7XG4gICAgICBkZXN0cm95VHJlZShjbG9uZTIpO1xuICAgIH0pXG4gICk7XG59KTtcbnZhciB0ZWxlcG9ydENvbnRhaW5lckR1cmluZ0Nsb25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmZ1bmN0aW9uIGdldFRhcmdldChleHByZXNzaW9uKSB7XG4gIGxldCB0YXJnZXQgPSBza2lwRHVyaW5nQ2xvbmUoKCkgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGV4cHJlc3Npb24pO1xuICB9LCAoKSA9PiB7XG4gICAgcmV0dXJuIHRlbGVwb3J0Q29udGFpbmVyRHVyaW5nQ2xvbmU7XG4gIH0pKCk7XG4gIGlmICghdGFyZ2V0KVxuICAgIHdhcm4oYENhbm5vdCBmaW5kIHgtdGVsZXBvcnQgZWxlbWVudCBmb3Igc2VsZWN0b3I6IFwiJHtleHByZXNzaW9ufVwiYCk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaWdub3JlLmpzXG52YXIgaGFuZGxlciA9ICgpID0+IHtcbn07XG5oYW5kbGVyLmlubGluZSA9IChlbCwgeyBtb2RpZmllcnMgfSwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIG1vZGlmaWVycy5pbmNsdWRlcyhcInNlbGZcIikgPyBlbC5feF9pZ25vcmVTZWxmID0gdHJ1ZSA6IGVsLl94X2lnbm9yZSA9IHRydWU7XG4gIGNsZWFudXAyKCgpID0+IHtcbiAgICBtb2RpZmllcnMuaW5jbHVkZXMoXCJzZWxmXCIpID8gZGVsZXRlIGVsLl94X2lnbm9yZVNlbGYgOiBkZWxldGUgZWwuX3hfaWdub3JlO1xuICB9KTtcbn07XG5kaXJlY3RpdmUoXCJpZ25vcmVcIiwgaGFuZGxlcik7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtZWZmZWN0LmpzXG5kaXJlY3RpdmUoXCJlZmZlY3RcIiwgc2tpcER1cmluZ0Nsb25lKChlbCwgeyBleHByZXNzaW9uIH0sIHsgZWZmZWN0OiBlZmZlY3QzIH0pID0+IHtcbiAgZWZmZWN0MyhldmFsdWF0ZUxhdGVyKGVsLCBleHByZXNzaW9uKSk7XG59KSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9vbi5qc1xuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBtb2RpZmllcnMsIGNhbGxiYWNrKSB7XG4gIGxldCBsaXN0ZW5lclRhcmdldCA9IGVsO1xuICBsZXQgaGFuZGxlcjQgPSAoZSkgPT4gY2FsbGJhY2soZSk7XG4gIGxldCBvcHRpb25zID0ge307XG4gIGxldCB3cmFwSGFuZGxlciA9IChjYWxsYmFjazIsIHdyYXBwZXIpID0+IChlKSA9PiB3cmFwcGVyKGNhbGxiYWNrMiwgZSk7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJkb3RcIikpXG4gICAgZXZlbnQgPSBkb3RTeW50YXgoZXZlbnQpO1xuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiY2FtZWxcIikpXG4gICAgZXZlbnQgPSBjYW1lbENhc2UyKGV2ZW50KTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInBhc3NpdmVcIikpXG4gICAgb3B0aW9ucy5wYXNzaXZlID0gdHJ1ZTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImNhcHR1cmVcIikpXG4gICAgb3B0aW9ucy5jYXB0dXJlID0gdHJ1ZTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIndpbmRvd1wiKSlcbiAgICBsaXN0ZW5lclRhcmdldCA9IHdpbmRvdztcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImRvY3VtZW50XCIpKVxuICAgIGxpc3RlbmVyVGFyZ2V0ID0gZG9jdW1lbnQ7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJkZWJvdW5jZVwiKSkge1xuICAgIGxldCBuZXh0TW9kaWZpZXIgPSBtb2RpZmllcnNbbW9kaWZpZXJzLmluZGV4T2YoXCJkZWJvdW5jZVwiKSArIDFdIHx8IFwiaW52YWxpZC13YWl0XCI7XG4gICAgbGV0IHdhaXQgPSBpc051bWVyaWMobmV4dE1vZGlmaWVyLnNwbGl0KFwibXNcIilbMF0pID8gTnVtYmVyKG5leHRNb2RpZmllci5zcGxpdChcIm1zXCIpWzBdKSA6IDI1MDtcbiAgICBoYW5kbGVyNCA9IGRlYm91bmNlKGhhbmRsZXI0LCB3YWl0KTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwidGhyb3R0bGVcIikpIHtcbiAgICBsZXQgbmV4dE1vZGlmaWVyID0gbW9kaWZpZXJzW21vZGlmaWVycy5pbmRleE9mKFwidGhyb3R0bGVcIikgKyAxXSB8fCBcImludmFsaWQtd2FpdFwiO1xuICAgIGxldCB3YWl0ID0gaXNOdW1lcmljKG5leHRNb2RpZmllci5zcGxpdChcIm1zXCIpWzBdKSA/IE51bWJlcihuZXh0TW9kaWZpZXIuc3BsaXQoXCJtc1wiKVswXSkgOiAyNTA7XG4gICAgaGFuZGxlcjQgPSB0aHJvdHRsZShoYW5kbGVyNCwgd2FpdCk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInByZXZlbnRcIikpXG4gICAgaGFuZGxlcjQgPSB3cmFwSGFuZGxlcihoYW5kbGVyNCwgKG5leHQsIGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJzdG9wXCIpKVxuICAgIGhhbmRsZXI0ID0gd3JhcEhhbmRsZXIoaGFuZGxlcjQsIChuZXh0LCBlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgbmV4dChlKTtcbiAgICB9KTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIm9uY2VcIikpIHtcbiAgICBoYW5kbGVyNCA9IHdyYXBIYW5kbGVyKGhhbmRsZXI0LCAobmV4dCwgZSkgPT4ge1xuICAgICAgbmV4dChlKTtcbiAgICAgIGxpc3RlbmVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXI0LCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiYXdheVwiKSB8fCBtb2RpZmllcnMuaW5jbHVkZXMoXCJvdXRzaWRlXCIpKSB7XG4gICAgbGlzdGVuZXJUYXJnZXQgPSBkb2N1bWVudDtcbiAgICBoYW5kbGVyNCA9IHdyYXBIYW5kbGVyKGhhbmRsZXI0LCAobmV4dCwgZSkgPT4ge1xuICAgICAgaWYgKGVsLmNvbnRhaW5zKGUudGFyZ2V0KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGUudGFyZ2V0LmlzQ29ubmVjdGVkID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGVsLm9mZnNldFdpZHRoIDwgMSAmJiBlbC5vZmZzZXRIZWlnaHQgPCAxKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAoZWwuX3hfaXNTaG93biA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybjtcbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInNlbGZcIikpXG4gICAgaGFuZGxlcjQgPSB3cmFwSGFuZGxlcihoYW5kbGVyNCwgKG5leHQsIGUpID0+IHtcbiAgICAgIGUudGFyZ2V0ID09PSBlbCAmJiBuZXh0KGUpO1xuICAgIH0pO1xuICBpZiAoaXNLZXlFdmVudChldmVudCkgfHwgaXNDbGlja0V2ZW50KGV2ZW50KSkge1xuICAgIGhhbmRsZXI0ID0gd3JhcEhhbmRsZXIoaGFuZGxlcjQsIChuZXh0LCBlKSA9PiB7XG4gICAgICBpZiAoaXNMaXN0ZW5pbmdGb3JBU3BlY2lmaWNLZXlUaGF0SGFzbnRCZWVuUHJlc3NlZChlLCBtb2RpZmllcnMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIH1cbiAgbGlzdGVuZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcjQsIG9wdGlvbnMpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxpc3RlbmVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXI0LCBvcHRpb25zKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRvdFN5bnRheChzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnJlcGxhY2UoLy0vZywgXCIuXCIpO1xufVxuZnVuY3Rpb24gY2FtZWxDYXNlMihzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLShcXHcpL2csIChtYXRjaCwgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGlzTnVtZXJpYyhzdWJqZWN0KSB7XG4gIHJldHVybiAhQXJyYXkuaXNBcnJheShzdWJqZWN0KSAmJiAhaXNOYU4oc3ViamVjdCk7XG59XG5mdW5jdGlvbiBrZWJhYkNhc2UyKHN1YmplY3QpIHtcbiAgaWYgKFtcIiBcIiwgXCJfXCJdLmluY2x1ZGVzKFxuICAgIHN1YmplY3RcbiAgKSlcbiAgICByZXR1cm4gc3ViamVjdDtcbiAgcmV0dXJuIHN1YmplY3QucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS5yZXBsYWNlKC9bX1xcc10vLCBcIi1cIikudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIGlzS2V5RXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIFtcImtleWRvd25cIiwgXCJrZXl1cFwiXS5pbmNsdWRlcyhldmVudCk7XG59XG5mdW5jdGlvbiBpc0NsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIFtcImNvbnRleHRtZW51XCIsIFwiY2xpY2tcIiwgXCJtb3VzZVwiXS5zb21lKChpKSA9PiBldmVudC5pbmNsdWRlcyhpKSk7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmluZ0ZvckFTcGVjaWZpY0tleVRoYXRIYXNudEJlZW5QcmVzc2VkKGUsIG1vZGlmaWVycykge1xuICBsZXQga2V5TW9kaWZpZXJzID0gbW9kaWZpZXJzLmZpbHRlcigoaSkgPT4ge1xuICAgIHJldHVybiAhW1wid2luZG93XCIsIFwiZG9jdW1lbnRcIiwgXCJwcmV2ZW50XCIsIFwic3RvcFwiLCBcIm9uY2VcIiwgXCJjYXB0dXJlXCIsIFwic2VsZlwiLCBcImF3YXlcIiwgXCJvdXRzaWRlXCIsIFwicGFzc2l2ZVwiXS5pbmNsdWRlcyhpKTtcbiAgfSk7XG4gIGlmIChrZXlNb2RpZmllcnMuaW5jbHVkZXMoXCJkZWJvdW5jZVwiKSkge1xuICAgIGxldCBkZWJvdW5jZUluZGV4ID0ga2V5TW9kaWZpZXJzLmluZGV4T2YoXCJkZWJvdW5jZVwiKTtcbiAgICBrZXlNb2RpZmllcnMuc3BsaWNlKGRlYm91bmNlSW5kZXgsIGlzTnVtZXJpYygoa2V5TW9kaWZpZXJzW2RlYm91bmNlSW5kZXggKyAxXSB8fCBcImludmFsaWQtd2FpdFwiKS5zcGxpdChcIm1zXCIpWzBdKSA/IDIgOiAxKTtcbiAgfVxuICBpZiAoa2V5TW9kaWZpZXJzLmluY2x1ZGVzKFwidGhyb3R0bGVcIikpIHtcbiAgICBsZXQgZGVib3VuY2VJbmRleCA9IGtleU1vZGlmaWVycy5pbmRleE9mKFwidGhyb3R0bGVcIik7XG4gICAga2V5TW9kaWZpZXJzLnNwbGljZShkZWJvdW5jZUluZGV4LCBpc051bWVyaWMoKGtleU1vZGlmaWVyc1tkZWJvdW5jZUluZGV4ICsgMV0gfHwgXCJpbnZhbGlkLXdhaXRcIikuc3BsaXQoXCJtc1wiKVswXSkgPyAyIDogMSk7XG4gIH1cbiAgaWYgKGtleU1vZGlmaWVycy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoa2V5TW9kaWZpZXJzLmxlbmd0aCA9PT0gMSAmJiBrZXlUb01vZGlmaWVycyhlLmtleSkuaW5jbHVkZXMoa2V5TW9kaWZpZXJzWzBdKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHN5c3RlbUtleU1vZGlmaWVycyA9IFtcImN0cmxcIiwgXCJzaGlmdFwiLCBcImFsdFwiLCBcIm1ldGFcIiwgXCJjbWRcIiwgXCJzdXBlclwiXTtcbiAgY29uc3Qgc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMgPSBzeXN0ZW1LZXlNb2RpZmllcnMuZmlsdGVyKChtb2RpZmllcikgPT4ga2V5TW9kaWZpZXJzLmluY2x1ZGVzKG1vZGlmaWVyKSk7XG4gIGtleU1vZGlmaWVycyA9IGtleU1vZGlmaWVycy5maWx0ZXIoKGkpID0+ICFzZWxlY3RlZFN5c3RlbUtleU1vZGlmaWVycy5pbmNsdWRlcyhpKSk7XG4gIGlmIChzZWxlY3RlZFN5c3RlbUtleU1vZGlmaWVycy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgYWN0aXZlbHlQcmVzc2VkS2V5TW9kaWZpZXJzID0gc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMuZmlsdGVyKChtb2RpZmllcikgPT4ge1xuICAgICAgaWYgKG1vZGlmaWVyID09PSBcImNtZFwiIHx8IG1vZGlmaWVyID09PSBcInN1cGVyXCIpXG4gICAgICAgIG1vZGlmaWVyID0gXCJtZXRhXCI7XG4gICAgICByZXR1cm4gZVtgJHttb2RpZmllcn1LZXlgXTtcbiAgICB9KTtcbiAgICBpZiAoYWN0aXZlbHlQcmVzc2VkS2V5TW9kaWZpZXJzLmxlbmd0aCA9PT0gc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgICBpZiAoaXNDbGlja0V2ZW50KGUudHlwZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChrZXlUb01vZGlmaWVycyhlLmtleSkuaW5jbHVkZXMoa2V5TW9kaWZpZXJzWzBdKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGtleVRvTW9kaWZpZXJzKGtleSkge1xuICBpZiAoIWtleSlcbiAgICByZXR1cm4gW107XG4gIGtleSA9IGtlYmFiQ2FzZTIoa2V5KTtcbiAgbGV0IG1vZGlmaWVyVG9LZXlNYXAgPSB7XG4gICAgXCJjdHJsXCI6IFwiY29udHJvbFwiLFxuICAgIFwic2xhc2hcIjogXCIvXCIsXG4gICAgXCJzcGFjZVwiOiBcIiBcIixcbiAgICBcInNwYWNlYmFyXCI6IFwiIFwiLFxuICAgIFwiY21kXCI6IFwibWV0YVwiLFxuICAgIFwiZXNjXCI6IFwiZXNjYXBlXCIsXG4gICAgXCJ1cFwiOiBcImFycm93LXVwXCIsXG4gICAgXCJkb3duXCI6IFwiYXJyb3ctZG93blwiLFxuICAgIFwibGVmdFwiOiBcImFycm93LWxlZnRcIixcbiAgICBcInJpZ2h0XCI6IFwiYXJyb3ctcmlnaHRcIixcbiAgICBcInBlcmlvZFwiOiBcIi5cIixcbiAgICBcImNvbW1hXCI6IFwiLFwiLFxuICAgIFwiZXF1YWxcIjogXCI9XCIsXG4gICAgXCJtaW51c1wiOiBcIi1cIixcbiAgICBcInVuZGVyc2NvcmVcIjogXCJfXCJcbiAgfTtcbiAgbW9kaWZpZXJUb0tleU1hcFtrZXldID0ga2V5O1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kaWZpZXJUb0tleU1hcCkubWFwKChtb2RpZmllcikgPT4ge1xuICAgIGlmIChtb2RpZmllclRvS2V5TWFwW21vZGlmaWVyXSA9PT0ga2V5KVxuICAgICAgcmV0dXJuIG1vZGlmaWVyO1xuICB9KS5maWx0ZXIoKG1vZGlmaWVyKSA9PiBtb2RpZmllcik7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtbW9kZWwuanNcbmRpcmVjdGl2ZShcIm1vZGVsXCIsIChlbCwgeyBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMsIGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgbGV0IHNjb3BlVGFyZ2V0ID0gZWw7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJwYXJlbnRcIikpIHtcbiAgICBzY29wZVRhcmdldCA9IGVsLnBhcmVudE5vZGU7XG4gIH1cbiAgbGV0IGV2YWx1YXRlR2V0ID0gZXZhbHVhdGVMYXRlcihzY29wZVRhcmdldCwgZXhwcmVzc2lvbik7XG4gIGxldCBldmFsdWF0ZVNldDtcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgZXZhbHVhdGVTZXQgPSBldmFsdWF0ZUxhdGVyKHNjb3BlVGFyZ2V0LCBgJHtleHByZXNzaW9ufSA9IF9fcGxhY2Vob2xkZXJgKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBleHByZXNzaW9uKCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICBldmFsdWF0ZVNldCA9IGV2YWx1YXRlTGF0ZXIoc2NvcGVUYXJnZXQsIGAke2V4cHJlc3Npb24oKX0gPSBfX3BsYWNlaG9sZGVyYCk7XG4gIH0gZWxzZSB7XG4gICAgZXZhbHVhdGVTZXQgPSAoKSA9PiB7XG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0VmFsdWUgPSAoKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBldmFsdWF0ZUdldCgodmFsdWUpID0+IHJlc3VsdCA9IHZhbHVlKTtcbiAgICByZXR1cm4gaXNHZXR0ZXJTZXR0ZXIocmVzdWx0KSA/IHJlc3VsdC5nZXQoKSA6IHJlc3VsdDtcbiAgfTtcbiAgbGV0IHNldFZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBldmFsdWF0ZUdldCgodmFsdWUyKSA9PiByZXN1bHQgPSB2YWx1ZTIpO1xuICAgIGlmIChpc0dldHRlclNldHRlcihyZXN1bHQpKSB7XG4gICAgICByZXN1bHQuc2V0KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZhbHVhdGVTZXQoKCkgPT4ge1xuICAgICAgfSwge1xuICAgICAgICBzY29wZTogeyBcIl9fcGxhY2Vob2xkZXJcIjogdmFsdWUgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIgJiYgZWwudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKFwibmFtZVwiKSlcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBleHByZXNzaW9uKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZXZlbnQgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2VsZWN0XCIgfHwgW1wiY2hlY2tib3hcIiwgXCJyYWRpb1wiXS5pbmNsdWRlcyhlbC50eXBlKSB8fCBtb2RpZmllcnMuaW5jbHVkZXMoXCJsYXp5XCIpID8gXCJjaGFuZ2VcIiA6IFwiaW5wdXRcIjtcbiAgbGV0IHJlbW92ZUxpc3RlbmVyID0gaXNDbG9uaW5nID8gKCkgPT4ge1xuICB9IDogb24oZWwsIGV2ZW50LCBtb2RpZmllcnMsIChlKSA9PiB7XG4gICAgc2V0VmFsdWUoZ2V0SW5wdXRWYWx1ZShlbCwgbW9kaWZpZXJzLCBlLCBnZXRWYWx1ZSgpKSk7XG4gIH0pO1xuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiZmlsbFwiKSkge1xuICAgIGlmIChbdm9pZCAwLCBudWxsLCBcIlwiXS5pbmNsdWRlcyhnZXRWYWx1ZSgpKSB8fCBpc0NoZWNrYm94KGVsKSAmJiBBcnJheS5pc0FycmF5KGdldFZhbHVlKCkpIHx8IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiAmJiBlbC5tdWx0aXBsZSkge1xuICAgICAgc2V0VmFsdWUoXG4gICAgICAgIGdldElucHV0VmFsdWUoZWwsIG1vZGlmaWVycywgeyB0YXJnZXQ6IGVsIH0sIGdldFZhbHVlKCkpXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoIWVsLl94X3JlbW92ZU1vZGVsTGlzdGVuZXJzKVxuICAgIGVsLl94X3JlbW92ZU1vZGVsTGlzdGVuZXJzID0ge307XG4gIGVsLl94X3JlbW92ZU1vZGVsTGlzdGVuZXJzW1wiZGVmYXVsdFwiXSA9IHJlbW92ZUxpc3RlbmVyO1xuICBjbGVhbnVwMigoKSA9PiBlbC5feF9yZW1vdmVNb2RlbExpc3RlbmVyc1tcImRlZmF1bHRcIl0oKSk7XG4gIGlmIChlbC5mb3JtKSB7XG4gICAgbGV0IHJlbW92ZVJlc2V0TGlzdGVuZXIgPSBvbihlbC5mb3JtLCBcInJlc2V0XCIsIFtdLCAoZSkgPT4ge1xuICAgICAgbmV4dFRpY2soKCkgPT4gZWwuX3hfbW9kZWwgJiYgZWwuX3hfbW9kZWwuc2V0KGdldElucHV0VmFsdWUoZWwsIG1vZGlmaWVycywgeyB0YXJnZXQ6IGVsIH0sIGdldFZhbHVlKCkpKSk7XG4gICAgfSk7XG4gICAgY2xlYW51cDIoKCkgPT4gcmVtb3ZlUmVzZXRMaXN0ZW5lcigpKTtcbiAgfVxuICBlbC5feF9tb2RlbCA9IHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gZ2V0VmFsdWUoKTtcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgc2V0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgZWwuX3hfZm9yY2VNb2RlbFVwZGF0ZSA9ICh2YWx1ZSkgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwICYmIHR5cGVvZiBleHByZXNzaW9uID09PSBcInN0cmluZ1wiICYmIGV4cHJlc3Npb24ubWF0Y2goL1xcLi8pKVxuICAgICAgdmFsdWUgPSBcIlwiO1xuICAgIHdpbmRvdy5mcm9tTW9kZWwgPSB0cnVlO1xuICAgIG11dGF0ZURvbSgoKSA9PiBiaW5kKGVsLCBcInZhbHVlXCIsIHZhbHVlKSk7XG4gICAgZGVsZXRlIHdpbmRvdy5mcm9tTW9kZWw7XG4gIH07XG4gIGVmZmVjdDMoKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKCk7XG4gICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInVuaW50cnVzaXZlXCIpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShlbCkpXG4gICAgICByZXR1cm47XG4gICAgZWwuX3hfZm9yY2VNb2RlbFVwZGF0ZSh2YWx1ZSk7XG4gIH0pO1xufSk7XG5mdW5jdGlvbiBnZXRJbnB1dFZhbHVlKGVsLCBtb2RpZmllcnMsIGV2ZW50LCBjdXJyZW50VmFsdWUpIHtcbiAgcmV0dXJuIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgQ3VzdG9tRXZlbnQgJiYgZXZlbnQuZGV0YWlsICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gZXZlbnQuZGV0YWlsICE9PSBudWxsICYmIGV2ZW50LmRldGFpbCAhPT0gdm9pZCAwID8gZXZlbnQuZGV0YWlsIDogZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgIGVsc2UgaWYgKGlzQ2hlY2tib3goZWwpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXJyZW50VmFsdWUpKSB7XG4gICAgICAgIGxldCBuZXdWYWx1ZSA9IG51bGw7XG4gICAgICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJudW1iZXJcIikpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNhZmVQYXJzZU51bWJlcihldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImJvb2xlYW5cIikpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNhZmVQYXJzZUJvb2xlYW4oZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0LmNoZWNrZWQgPyBjdXJyZW50VmFsdWUuaW5jbHVkZXMobmV3VmFsdWUpID8gY3VycmVudFZhbHVlIDogY3VycmVudFZhbHVlLmNvbmNhdChbbmV3VmFsdWVdKSA6IGN1cnJlbnRWYWx1ZS5maWx0ZXIoKGVsMikgPT4gIWNoZWNrZWRBdHRyTG9vc2VDb21wYXJlMihlbDIsIG5ld1ZhbHVlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZXZlbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2VsZWN0XCIgJiYgZWwubXVsdGlwbGUpIHtcbiAgICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJudW1iZXJcIikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LnNlbGVjdGVkT3B0aW9ucykubWFwKChvcHRpb24pID0+IHtcbiAgICAgICAgICBsZXQgcmF3VmFsdWUgPSBvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQ7XG4gICAgICAgICAgcmV0dXJuIHNhZmVQYXJzZU51bWJlcihyYXdWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJib29sZWFuXCIpKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgbGV0IHJhd1ZhbHVlID0gb3B0aW9uLnZhbHVlIHx8IG9wdGlvbi50ZXh0O1xuICAgICAgICAgIHJldHVybiBzYWZlUGFyc2VCb29sZWFuKHJhd1ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gQXJyYXkuZnJvbShldmVudC50YXJnZXQuc2VsZWN0ZWRPcHRpb25zKS5tYXAoKG9wdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gb3B0aW9uLnZhbHVlIHx8IG9wdGlvbi50ZXh0O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZXdWYWx1ZTtcbiAgICAgIGlmIChpc1JhZGlvKGVsKSkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwibnVtYmVyXCIpKSB7XG4gICAgICAgIHJldHVybiBzYWZlUGFyc2VOdW1iZXIobmV3VmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJib29sZWFuXCIpKSB7XG4gICAgICAgIHJldHVybiBzYWZlUGFyc2VCb29sZWFuKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwidHJpbVwiKSkge1xuICAgICAgICByZXR1cm4gbmV3VmFsdWUudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBzYWZlUGFyc2VOdW1iZXIocmF3VmFsdWUpIHtcbiAgbGV0IG51bWJlciA9IHJhd1ZhbHVlID8gcGFyc2VGbG9hdChyYXdWYWx1ZSkgOiBudWxsO1xuICByZXR1cm4gaXNOdW1lcmljMihudW1iZXIpID8gbnVtYmVyIDogcmF3VmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja2VkQXR0ckxvb3NlQ29tcGFyZTIodmFsdWVBLCB2YWx1ZUIpIHtcbiAgcmV0dXJuIHZhbHVlQSA9PSB2YWx1ZUI7XG59XG5mdW5jdGlvbiBpc051bWVyaWMyKHN1YmplY3QpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KHN1YmplY3QpICYmICFpc05hTihzdWJqZWN0KTtcbn1cbmZ1bmN0aW9uIGlzR2V0dGVyU2V0dGVyKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmdldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZS5zZXQgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1jbG9hay5qc1xuZGlyZWN0aXZlKFwiY2xvYWtcIiwgKGVsKSA9PiBxdWV1ZU1pY3JvdGFzaygoKSA9PiBtdXRhdGVEb20oKCkgPT4gZWwucmVtb3ZlQXR0cmlidXRlKHByZWZpeChcImNsb2FrXCIpKSkpKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1pbml0LmpzXG5hZGRJbml0U2VsZWN0b3IoKCkgPT4gYFske3ByZWZpeChcImluaXRcIil9XWApO1xuZGlyZWN0aXZlKFwiaW5pdFwiLCBza2lwRHVyaW5nQ2xvbmUoKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBldmFsdWF0ZTogZXZhbHVhdGUyIH0pID0+IHtcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICEhZXhwcmVzc2lvbi50cmltKCkgJiYgZXZhbHVhdGUyKGV4cHJlc3Npb24sIHt9LCBmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIGV2YWx1YXRlMihleHByZXNzaW9uLCB7fSwgZmFsc2UpO1xufSkpO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LXRleHQuanNcbmRpcmVjdGl2ZShcInRleHRcIiwgKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMsIGV2YWx1YXRlTGF0ZXI6IGV2YWx1YXRlTGF0ZXIyIH0pID0+IHtcbiAgbGV0IGV2YWx1YXRlMiA9IGV2YWx1YXRlTGF0ZXIyKGV4cHJlc3Npb24pO1xuICBlZmZlY3QzKCgpID0+IHtcbiAgICBldmFsdWF0ZTIoKHZhbHVlKSA9PiB7XG4gICAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaHRtbC5qc1xuZGlyZWN0aXZlKFwiaHRtbFwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGVmZmVjdDogZWZmZWN0MywgZXZhbHVhdGVMYXRlcjogZXZhbHVhdGVMYXRlcjIgfSkgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcjIoZXhwcmVzc2lvbik7XG4gIGVmZmVjdDMoKCkgPT4ge1xuICAgIGV2YWx1YXRlMigodmFsdWUpID0+IHtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICBlbC5feF9pZ25vcmVTZWxmID0gdHJ1ZTtcbiAgICAgICAgaW5pdFRyZWUoZWwpO1xuICAgICAgICBkZWxldGUgZWwuX3hfaWdub3JlU2VsZjtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LWJpbmQuanNcbm1hcEF0dHJpYnV0ZXMoc3RhcnRpbmdXaXRoKFwiOlwiLCBpbnRvKHByZWZpeChcImJpbmQ6XCIpKSkpO1xudmFyIGhhbmRsZXIyID0gKGVsLCB7IHZhbHVlLCBtb2RpZmllcnMsIGV4cHJlc3Npb24sIG9yaWdpbmFsIH0sIHsgZWZmZWN0OiBlZmZlY3QzLCBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBsZXQgYmluZGluZ1Byb3ZpZGVycyA9IHt9O1xuICAgIGluamVjdEJpbmRpbmdQcm92aWRlcnMoYmluZGluZ1Byb3ZpZGVycyk7XG4gICAgbGV0IGdldEJpbmRpbmdzID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gICAgZ2V0QmluZGluZ3MoKGJpbmRpbmdzKSA9PiB7XG4gICAgICBhcHBseUJpbmRpbmdzT2JqZWN0KGVsLCBiaW5kaW5ncywgb3JpZ2luYWwpO1xuICAgIH0sIHsgc2NvcGU6IGJpbmRpbmdQcm92aWRlcnMgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gXCJrZXlcIilcbiAgICByZXR1cm4gc3RvcmVLZXlGb3JYRm9yKGVsLCBleHByZXNzaW9uKTtcbiAgaWYgKGVsLl94X2lubGluZUJpbmRpbmdzICYmIGVsLl94X2lubGluZUJpbmRpbmdzW3ZhbHVlXSAmJiBlbC5feF9pbmxpbmVCaW5kaW5nc1t2YWx1ZV0uZXh0cmFjdCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGVmZmVjdDMoKCkgPT4gZXZhbHVhdGUyKChyZXN1bHQpID0+IHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDAgJiYgdHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIgJiYgZXhwcmVzc2lvbi5tYXRjaCgvXFwuLykpIHtcbiAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgfVxuICAgIG11dGF0ZURvbSgoKSA9PiBiaW5kKGVsLCB2YWx1ZSwgcmVzdWx0LCBtb2RpZmllcnMpKTtcbiAgfSkpO1xuICBjbGVhbnVwMigoKSA9PiB7XG4gICAgZWwuX3hfdW5kb0FkZGVkQ2xhc3NlcyAmJiBlbC5feF91bmRvQWRkZWRDbGFzc2VzKCk7XG4gICAgZWwuX3hfdW5kb0FkZGVkU3R5bGVzICYmIGVsLl94X3VuZG9BZGRlZFN0eWxlcygpO1xuICB9KTtcbn07XG5oYW5kbGVyMi5pbmxpbmUgPSAoZWwsIHsgdmFsdWUsIG1vZGlmaWVycywgZXhwcmVzc2lvbiB9KSA9PiB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuO1xuICBpZiAoIWVsLl94X2lubGluZUJpbmRpbmdzKVxuICAgIGVsLl94X2lubGluZUJpbmRpbmdzID0ge307XG4gIGVsLl94X2lubGluZUJpbmRpbmdzW3ZhbHVlXSA9IHsgZXhwcmVzc2lvbiwgZXh0cmFjdDogZmFsc2UgfTtcbn07XG5kaXJlY3RpdmUoXCJiaW5kXCIsIGhhbmRsZXIyKTtcbmZ1bmN0aW9uIHN0b3JlS2V5Rm9yWEZvcihlbCwgZXhwcmVzc2lvbikge1xuICBlbC5feF9rZXlFeHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1kYXRhLmpzXG5hZGRSb290U2VsZWN0b3IoKCkgPT4gYFske3ByZWZpeChcImRhdGFcIil9XWApO1xuZGlyZWN0aXZlKFwiZGF0YVwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgaWYgKHNob3VsZFNraXBSZWdpc3RlcmluZ0RhdGFEdXJpbmdDbG9uZShlbCkpXG4gICAgcmV0dXJuO1xuICBleHByZXNzaW9uID0gZXhwcmVzc2lvbiA9PT0gXCJcIiA/IFwie31cIiA6IGV4cHJlc3Npb247XG4gIGxldCBtYWdpY0NvbnRleHQgPSB7fTtcbiAgaW5qZWN0TWFnaWNzKG1hZ2ljQ29udGV4dCwgZWwpO1xuICBsZXQgZGF0YVByb3ZpZGVyQ29udGV4dCA9IHt9O1xuICBpbmplY3REYXRhUHJvdmlkZXJzKGRhdGFQcm92aWRlckNvbnRleHQsIG1hZ2ljQ29udGV4dCk7XG4gIGxldCBkYXRhMiA9IGV2YWx1YXRlKGVsLCBleHByZXNzaW9uLCB7IHNjb3BlOiBkYXRhUHJvdmlkZXJDb250ZXh0IH0pO1xuICBpZiAoZGF0YTIgPT09IHZvaWQgMCB8fCBkYXRhMiA9PT0gdHJ1ZSlcbiAgICBkYXRhMiA9IHt9O1xuICBpbmplY3RNYWdpY3MoZGF0YTIsIGVsKTtcbiAgbGV0IHJlYWN0aXZlRGF0YSA9IHJlYWN0aXZlKGRhdGEyKTtcbiAgaW5pdEludGVyY2VwdG9ycyhyZWFjdGl2ZURhdGEpO1xuICBsZXQgdW5kbyA9IGFkZFNjb3BlVG9Ob2RlKGVsLCByZWFjdGl2ZURhdGEpO1xuICByZWFjdGl2ZURhdGFbXCJpbml0XCJdICYmIGV2YWx1YXRlKGVsLCByZWFjdGl2ZURhdGFbXCJpbml0XCJdKTtcbiAgY2xlYW51cDIoKCkgPT4ge1xuICAgIHJlYWN0aXZlRGF0YVtcImRlc3Ryb3lcIl0gJiYgZXZhbHVhdGUoZWwsIHJlYWN0aXZlRGF0YVtcImRlc3Ryb3lcIl0pO1xuICAgIHVuZG8oKTtcbiAgfSk7XG59KTtcbmludGVyY2VwdENsb25lKChmcm9tLCB0bykgPT4ge1xuICBpZiAoZnJvbS5feF9kYXRhU3RhY2spIHtcbiAgICB0by5feF9kYXRhU3RhY2sgPSBmcm9tLl94X2RhdGFTdGFjaztcbiAgICB0by5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1hbHBpbmUtc3RhdGVcIiwgdHJ1ZSk7XG4gIH1cbn0pO1xuZnVuY3Rpb24gc2hvdWxkU2tpcFJlZ2lzdGVyaW5nRGF0YUR1cmluZ0Nsb25lKGVsKSB7XG4gIGlmICghaXNDbG9uaW5nKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGlzQ2xvbmluZ0xlZ2FjeSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShcImRhdGEtaGFzLWFscGluZS1zdGF0ZVwiKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1zaG93LmpzXG5kaXJlY3RpdmUoXCJzaG93XCIsIChlbCwgeyBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMgfSkgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGlmICghZWwuX3hfZG9IaWRlKVxuICAgIGVsLl94X2RvSGlkZSA9ICgpID0+IHtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcIm5vbmVcIiwgbW9kaWZpZXJzLmluY2x1ZGVzKFwiaW1wb3J0YW50XCIpID8gXCJpbXBvcnRhbnRcIiA6IHZvaWQgMCk7XG4gICAgICB9KTtcbiAgICB9O1xuICBpZiAoIWVsLl94X2RvU2hvdylcbiAgICBlbC5feF9kb1Nob3cgPSAoKSA9PiB7XG4gICAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgICBpZiAoZWwuc3R5bGUubGVuZ3RoID09PSAxICYmIGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICBsZXQgaGlkZSA9ICgpID0+IHtcbiAgICBlbC5feF9kb0hpZGUoKTtcbiAgICBlbC5feF9pc1Nob3duID0gZmFsc2U7XG4gIH07XG4gIGxldCBzaG93ID0gKCkgPT4ge1xuICAgIGVsLl94X2RvU2hvdygpO1xuICAgIGVsLl94X2lzU2hvd24gPSB0cnVlO1xuICB9O1xuICBsZXQgY2xpY2tBd2F5Q29tcGF0aWJsZVNob3cgPSAoKSA9PiBzZXRUaW1lb3V0KHNob3cpO1xuICBsZXQgdG9nZ2xlID0gb25jZShcbiAgICAodmFsdWUpID0+IHZhbHVlID8gc2hvdygpIDogaGlkZSgpLFxuICAgICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBlbC5feF90b2dnbGVBbmRDYXNjYWRlV2l0aFRyYW5zaXRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZWwuX3hfdG9nZ2xlQW5kQ2FzY2FkZVdpdGhUcmFuc2l0aW9ucyhlbCwgdmFsdWUsIHNob3csIGhpZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPyBjbGlja0F3YXlDb21wYXRpYmxlU2hvdygpIDogaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgbGV0IG9sZFZhbHVlO1xuICBsZXQgZmlyc3RUaW1lID0gdHJ1ZTtcbiAgZWZmZWN0MygoKSA9PiBldmFsdWF0ZTIoKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFmaXJzdFRpbWUgJiYgdmFsdWUgPT09IG9sZFZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJpbW1lZGlhdGVcIikpXG4gICAgICB2YWx1ZSA/IGNsaWNrQXdheUNvbXBhdGlibGVTaG93KCkgOiBoaWRlKCk7XG4gICAgdG9nZ2xlKHZhbHVlKTtcbiAgICBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICB9KSk7XG59KTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1mb3IuanNcbmRpcmVjdGl2ZShcImZvclwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGVmZmVjdDogZWZmZWN0MywgY2xlYW51cDogY2xlYW51cDIgfSkgPT4ge1xuICBsZXQgaXRlcmF0b3JOYW1lcyA9IHBhcnNlRm9yRXhwcmVzc2lvbihleHByZXNzaW9uKTtcbiAgbGV0IGV2YWx1YXRlSXRlbXMgPSBldmFsdWF0ZUxhdGVyKGVsLCBpdGVyYXRvck5hbWVzLml0ZW1zKTtcbiAgbGV0IGV2YWx1YXRlS2V5ID0gZXZhbHVhdGVMYXRlcihcbiAgICBlbCxcbiAgICAvLyB0aGUgeC1iaW5kOmtleSBleHByZXNzaW9uIGlzIHN0b3JlZCBmb3Igb3VyIHVzZSBpbnN0ZWFkIG9mIGV2YWx1YXRlZC5cbiAgICBlbC5feF9rZXlFeHByZXNzaW9uIHx8IFwiaW5kZXhcIlxuICApO1xuICBlbC5feF9wcmV2S2V5cyA9IFtdO1xuICBlbC5feF9sb29rdXAgPSB7fTtcbiAgZWZmZWN0MygoKSA9PiBsb29wKGVsLCBpdGVyYXRvck5hbWVzLCBldmFsdWF0ZUl0ZW1zLCBldmFsdWF0ZUtleSkpO1xuICBjbGVhbnVwMigoKSA9PiB7XG4gICAgT2JqZWN0LnZhbHVlcyhlbC5feF9sb29rdXApLmZvckVhY2goKGVsMikgPT4gbXV0YXRlRG9tKFxuICAgICAgKCkgPT4ge1xuICAgICAgICBkZXN0cm95VHJlZShlbDIpO1xuICAgICAgICBlbDIucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgKSk7XG4gICAgZGVsZXRlIGVsLl94X3ByZXZLZXlzO1xuICAgIGRlbGV0ZSBlbC5feF9sb29rdXA7XG4gIH0pO1xufSk7XG5mdW5jdGlvbiBsb29wKGVsLCBpdGVyYXRvck5hbWVzLCBldmFsdWF0ZUl0ZW1zLCBldmFsdWF0ZUtleSkge1xuICBsZXQgaXNPYmplY3QyID0gKGkpID0+IHR5cGVvZiBpID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGkpO1xuICBsZXQgdGVtcGxhdGVFbCA9IGVsO1xuICBldmFsdWF0ZUl0ZW1zKChpdGVtcykgPT4ge1xuICAgIGlmIChpc051bWVyaWMzKGl0ZW1zKSAmJiBpdGVtcyA+PSAwKSB7XG4gICAgICBpdGVtcyA9IEFycmF5LmZyb20oQXJyYXkoaXRlbXMpLmtleXMoKSwgKGkpID0+IGkgKyAxKTtcbiAgICB9XG4gICAgaWYgKGl0ZW1zID09PSB2b2lkIDApXG4gICAgICBpdGVtcyA9IFtdO1xuICAgIGxldCBsb29rdXAgPSBlbC5feF9sb29rdXA7XG4gICAgbGV0IHByZXZLZXlzID0gZWwuX3hfcHJldktleXM7XG4gICAgbGV0IHNjb3BlcyA9IFtdO1xuICAgIGxldCBrZXlzID0gW107XG4gICAgaWYgKGlzT2JqZWN0MihpdGVtcykpIHtcbiAgICAgIGl0ZW1zID0gT2JqZWN0LmVudHJpZXMoaXRlbXMpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGxldCBzY29wZTIgPSBnZXRJdGVyYXRpb25TY29wZVZhcmlhYmxlcyhpdGVyYXRvck5hbWVzLCB2YWx1ZSwga2V5LCBpdGVtcyk7XG4gICAgICAgIGV2YWx1YXRlS2V5KCh2YWx1ZTIpID0+IHtcbiAgICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyh2YWx1ZTIpKVxuICAgICAgICAgICAgd2FybihcIkR1cGxpY2F0ZSBrZXkgb24geC1mb3JcIiwgZWwpO1xuICAgICAgICAgIGtleXMucHVzaCh2YWx1ZTIpO1xuICAgICAgICB9LCB7IHNjb3BlOiB7IGluZGV4OiBrZXksIC4uLnNjb3BlMiB9IH0pO1xuICAgICAgICBzY29wZXMucHVzaChzY29wZTIpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IHNjb3BlMiA9IGdldEl0ZXJhdGlvblNjb3BlVmFyaWFibGVzKGl0ZXJhdG9yTmFtZXMsIGl0ZW1zW2ldLCBpLCBpdGVtcyk7XG4gICAgICAgIGV2YWx1YXRlS2V5KCh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGlmIChrZXlzLmluY2x1ZGVzKHZhbHVlKSlcbiAgICAgICAgICAgIHdhcm4oXCJEdXBsaWNhdGUga2V5IG9uIHgtZm9yXCIsIGVsKTtcbiAgICAgICAgICBrZXlzLnB1c2godmFsdWUpO1xuICAgICAgICB9LCB7IHNjb3BlOiB7IGluZGV4OiBpLCAuLi5zY29wZTIgfSB9KTtcbiAgICAgICAgc2NvcGVzLnB1c2goc2NvcGUyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGFkZHMgPSBbXTtcbiAgICBsZXQgbW92ZXMgPSBbXTtcbiAgICBsZXQgcmVtb3ZlcyA9IFtdO1xuICAgIGxldCBzYW1lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJldktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSBwcmV2S2V5c1tpXTtcbiAgICAgIGlmIChrZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTEpXG4gICAgICAgIHJlbW92ZXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBwcmV2S2V5cyA9IHByZXZLZXlzLmZpbHRlcigoa2V5KSA9PiAhcmVtb3Zlcy5pbmNsdWRlcyhrZXkpKTtcbiAgICBsZXQgbGFzdEtleSA9IFwidGVtcGxhdGVcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2ldO1xuICAgICAgbGV0IHByZXZJbmRleCA9IHByZXZLZXlzLmluZGV4T2Yoa2V5KTtcbiAgICAgIGlmIChwcmV2SW5kZXggPT09IC0xKSB7XG4gICAgICAgIHByZXZLZXlzLnNwbGljZShpLCAwLCBrZXkpO1xuICAgICAgICBhZGRzLnB1c2goW2xhc3RLZXksIGldKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldkluZGV4ICE9PSBpKSB7XG4gICAgICAgIGxldCBrZXlJblNwb3QgPSBwcmV2S2V5cy5zcGxpY2UoaSwgMSlbMF07XG4gICAgICAgIGxldCBrZXlGb3JTcG90ID0gcHJldktleXMuc3BsaWNlKHByZXZJbmRleCAtIDEsIDEpWzBdO1xuICAgICAgICBwcmV2S2V5cy5zcGxpY2UoaSwgMCwga2V5Rm9yU3BvdCk7XG4gICAgICAgIHByZXZLZXlzLnNwbGljZShwcmV2SW5kZXgsIDAsIGtleUluU3BvdCk7XG4gICAgICAgIG1vdmVzLnB1c2goW2tleUluU3BvdCwga2V5Rm9yU3BvdF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FtZXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgICAgbGFzdEtleSA9IGtleTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1vdmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQga2V5ID0gcmVtb3Zlc1tpXTtcbiAgICAgIGlmICghKGtleSBpbiBsb29rdXApKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGRlc3Ryb3lUcmVlKGxvb2t1cFtrZXldKTtcbiAgICAgICAgbG9va3VwW2tleV0ucmVtb3ZlKCk7XG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBsb29rdXBba2V5XTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3Zlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IFtrZXlJblNwb3QsIGtleUZvclNwb3RdID0gbW92ZXNbaV07XG4gICAgICBsZXQgZWxJblNwb3QgPSBsb29rdXBba2V5SW5TcG90XTtcbiAgICAgIGxldCBlbEZvclNwb3QgPSBsb29rdXBba2V5Rm9yU3BvdF07XG4gICAgICBsZXQgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGlmICghZWxGb3JTcG90KVxuICAgICAgICAgIHdhcm4oYHgtZm9yIFwiOmtleVwiIGlzIHVuZGVmaW5lZCBvciBpbnZhbGlkYCwgdGVtcGxhdGVFbCwga2V5Rm9yU3BvdCwgbG9va3VwKTtcbiAgICAgICAgZWxGb3JTcG90LmFmdGVyKG1hcmtlcik7XG4gICAgICAgIGVsSW5TcG90LmFmdGVyKGVsRm9yU3BvdCk7XG4gICAgICAgIGVsRm9yU3BvdC5feF9jdXJyZW50SWZFbCAmJiBlbEZvclNwb3QuYWZ0ZXIoZWxGb3JTcG90Ll94X2N1cnJlbnRJZkVsKTtcbiAgICAgICAgbWFya2VyLmJlZm9yZShlbEluU3BvdCk7XG4gICAgICAgIGVsSW5TcG90Ll94X2N1cnJlbnRJZkVsICYmIGVsSW5TcG90LmFmdGVyKGVsSW5TcG90Ll94X2N1cnJlbnRJZkVsKTtcbiAgICAgICAgbWFya2VyLnJlbW92ZSgpO1xuICAgICAgfSk7XG4gICAgICBlbEZvclNwb3QuX3hfcmVmcmVzaFhGb3JTY29wZShzY29wZXNba2V5cy5pbmRleE9mKGtleUZvclNwb3QpXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IFtsYXN0S2V5MiwgaW5kZXhdID0gYWRkc1tpXTtcbiAgICAgIGxldCBsYXN0RWwgPSBsYXN0S2V5MiA9PT0gXCJ0ZW1wbGF0ZVwiID8gdGVtcGxhdGVFbCA6IGxvb2t1cFtsYXN0S2V5Ml07XG4gICAgICBpZiAobGFzdEVsLl94X2N1cnJlbnRJZkVsKVxuICAgICAgICBsYXN0RWwgPSBsYXN0RWwuX3hfY3VycmVudElmRWw7XG4gICAgICBsZXQgc2NvcGUyID0gc2NvcGVzW2luZGV4XTtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIGxldCBjbG9uZTIgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlRWwuY29udGVudCwgdHJ1ZSkuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICBsZXQgcmVhY3RpdmVTY29wZSA9IHJlYWN0aXZlKHNjb3BlMik7XG4gICAgICBhZGRTY29wZVRvTm9kZShjbG9uZTIsIHJlYWN0aXZlU2NvcGUsIHRlbXBsYXRlRWwpO1xuICAgICAgY2xvbmUyLl94X3JlZnJlc2hYRm9yU2NvcGUgPSAobmV3U2NvcGUpID0+IHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobmV3U2NvcGUpLmZvckVhY2goKFtrZXkyLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICByZWFjdGl2ZVNjb3BlW2tleTJdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGxhc3RFbC5hZnRlcihjbG9uZTIpO1xuICAgICAgICBza2lwRHVyaW5nQ2xvbmUoKCkgPT4gaW5pdFRyZWUoY2xvbmUyKSkoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgd2FybihcIngtZm9yIGtleSBjYW5ub3QgYmUgYW4gb2JqZWN0LCBpdCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIGludGVnZXJcIiwgdGVtcGxhdGVFbCk7XG4gICAgICB9XG4gICAgICBsb29rdXBba2V5XSA9IGNsb25lMjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9va3VwW3NhbWVzW2ldXS5feF9yZWZyZXNoWEZvclNjb3BlKHNjb3Blc1trZXlzLmluZGV4T2Yoc2FtZXNbaV0pXSk7XG4gICAgfVxuICAgIHRlbXBsYXRlRWwuX3hfcHJldktleXMgPSBrZXlzO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlRm9yRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gIGxldCBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xuICBsZXQgc3RyaXBQYXJlbnNSRSA9IC9eXFxzKlxcKHxcXClcXHMqJC9nO1xuICBsZXQgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcbiAgbGV0IGluTWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKGZvckFsaWFzUkUpO1xuICBpZiAoIWluTWF0Y2gpXG4gICAgcmV0dXJuO1xuICBsZXQgcmVzID0ge307XG4gIHJlcy5pdGVtcyA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICBsZXQgaXRlbSA9IGluTWF0Y2hbMV0ucmVwbGFjZShzdHJpcFBhcmVuc1JFLCBcIlwiKS50cmltKCk7XG4gIGxldCBpdGVyYXRvck1hdGNoID0gaXRlbS5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuaXRlbSA9IGl0ZW0ucmVwbGFjZShmb3JJdGVyYXRvclJFLCBcIlwiKS50cmltKCk7XG4gICAgcmVzLmluZGV4ID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIHJlcy5jb2xsZWN0aW9uID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5pdGVtID0gaXRlbTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZ2V0SXRlcmF0aW9uU2NvcGVWYXJpYWJsZXMoaXRlcmF0b3JOYW1lcywgaXRlbSwgaW5kZXgsIGl0ZW1zKSB7XG4gIGxldCBzY29wZVZhcmlhYmxlcyA9IHt9O1xuICBpZiAoL15cXFsuKlxcXSQvLnRlc3QoaXRlcmF0b3JOYW1lcy5pdGVtKSAmJiBBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgbGV0IG5hbWVzID0gaXRlcmF0b3JOYW1lcy5pdGVtLnJlcGxhY2UoXCJbXCIsIFwiXCIpLnJlcGxhY2UoXCJdXCIsIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoKGkpID0+IGkudHJpbSgpKTtcbiAgICBuYW1lcy5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XG4gICAgICBzY29wZVZhcmlhYmxlc1tuYW1lXSA9IGl0ZW1baV07XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoL15cXHsuKlxcfSQvLnRlc3QoaXRlcmF0b3JOYW1lcy5pdGVtKSAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikge1xuICAgIGxldCBuYW1lcyA9IGl0ZXJhdG9yTmFtZXMuaXRlbS5yZXBsYWNlKFwie1wiLCBcIlwiKS5yZXBsYWNlKFwifVwiLCBcIlwiKS5zcGxpdChcIixcIikubWFwKChpKSA9PiBpLnRyaW0oKSk7XG4gICAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgc2NvcGVWYXJpYWJsZXNbbmFtZV0gPSBpdGVtW25hbWVdO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNjb3BlVmFyaWFibGVzW2l0ZXJhdG9yTmFtZXMuaXRlbV0gPSBpdGVtO1xuICB9XG4gIGlmIChpdGVyYXRvck5hbWVzLmluZGV4KVxuICAgIHNjb3BlVmFyaWFibGVzW2l0ZXJhdG9yTmFtZXMuaW5kZXhdID0gaW5kZXg7XG4gIGlmIChpdGVyYXRvck5hbWVzLmNvbGxlY3Rpb24pXG4gICAgc2NvcGVWYXJpYWJsZXNbaXRlcmF0b3JOYW1lcy5jb2xsZWN0aW9uXSA9IGl0ZW1zO1xuICByZXR1cm4gc2NvcGVWYXJpYWJsZXM7XG59XG5mdW5jdGlvbiBpc051bWVyaWMzKHN1YmplY3QpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KHN1YmplY3QpICYmICFpc05hTihzdWJqZWN0KTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1yZWYuanNcbmZ1bmN0aW9uIGhhbmRsZXIzKCkge1xufVxuaGFuZGxlcjMuaW5saW5lID0gKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGxldCByb290ID0gY2xvc2VzdFJvb3QoZWwpO1xuICBpZiAoIXJvb3QuX3hfcmVmcylcbiAgICByb290Ll94X3JlZnMgPSB7fTtcbiAgcm9vdC5feF9yZWZzW2V4cHJlc3Npb25dID0gZWw7XG4gIGNsZWFudXAyKCgpID0+IGRlbGV0ZSByb290Ll94X3JlZnNbZXhwcmVzc2lvbl0pO1xufTtcbmRpcmVjdGl2ZShcInJlZlwiLCBoYW5kbGVyMyk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaWYuanNcbmRpcmVjdGl2ZShcImlmXCIsIChlbCwgeyBleHByZXNzaW9uIH0sIHsgZWZmZWN0OiBlZmZlY3QzLCBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwidGVtcGxhdGVcIilcbiAgICB3YXJuKFwieC1pZiBjYW4gb25seSBiZSB1c2VkIG9uIGEgPHRlbXBsYXRlPiB0YWdcIiwgZWwpO1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGxldCBzaG93ID0gKCkgPT4ge1xuICAgIGlmIChlbC5feF9jdXJyZW50SWZFbClcbiAgICAgIHJldHVybiBlbC5feF9jdXJyZW50SWZFbDtcbiAgICBsZXQgY2xvbmUyID0gZWwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgYWRkU2NvcGVUb05vZGUoY2xvbmUyLCB7fSwgZWwpO1xuICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICBlbC5hZnRlcihjbG9uZTIpO1xuICAgICAgc2tpcER1cmluZ0Nsb25lKCgpID0+IGluaXRUcmVlKGNsb25lMikpKCk7XG4gICAgfSk7XG4gICAgZWwuX3hfY3VycmVudElmRWwgPSBjbG9uZTI7XG4gICAgZWwuX3hfdW5kb0lmID0gKCkgPT4ge1xuICAgICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgICAgZGVzdHJveVRyZWUoY2xvbmUyKTtcbiAgICAgICAgY2xvbmUyLnJlbW92ZSgpO1xuICAgICAgfSk7XG4gICAgICBkZWxldGUgZWwuX3hfY3VycmVudElmRWw7XG4gICAgfTtcbiAgICByZXR1cm4gY2xvbmUyO1xuICB9O1xuICBsZXQgaGlkZSA9ICgpID0+IHtcbiAgICBpZiAoIWVsLl94X3VuZG9JZilcbiAgICAgIHJldHVybjtcbiAgICBlbC5feF91bmRvSWYoKTtcbiAgICBkZWxldGUgZWwuX3hfdW5kb0lmO1xuICB9O1xuICBlZmZlY3QzKCgpID0+IGV2YWx1YXRlMigodmFsdWUpID0+IHtcbiAgICB2YWx1ZSA/IHNob3coKSA6IGhpZGUoKTtcbiAgfSkpO1xuICBjbGVhbnVwMigoKSA9PiBlbC5feF91bmRvSWYgJiYgZWwuX3hfdW5kb0lmKCkpO1xufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaWQuanNcbmRpcmVjdGl2ZShcImlkXCIsIChlbCwgeyBleHByZXNzaW9uIH0sIHsgZXZhbHVhdGU6IGV2YWx1YXRlMiB9KSA9PiB7XG4gIGxldCBuYW1lcyA9IGV2YWx1YXRlMihleHByZXNzaW9uKTtcbiAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4gc2V0SWRSb290KGVsLCBuYW1lKSk7XG59KTtcbmludGVyY2VwdENsb25lKChmcm9tLCB0bykgPT4ge1xuICBpZiAoZnJvbS5feF9pZHMpIHtcbiAgICB0by5feF9pZHMgPSBmcm9tLl94X2lkcztcbiAgfVxufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtb24uanNcbm1hcEF0dHJpYnV0ZXMoc3RhcnRpbmdXaXRoKFwiQFwiLCBpbnRvKHByZWZpeChcIm9uOlwiKSkpKTtcbmRpcmVjdGl2ZShcIm9uXCIsIHNraXBEdXJpbmdDbG9uZSgoZWwsIHsgdmFsdWUsIG1vZGlmaWVycywgZXhwcmVzc2lvbiB9LCB7IGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgbGV0IGV2YWx1YXRlMiA9IGV4cHJlc3Npb24gPyBldmFsdWF0ZUxhdGVyKGVsLCBleHByZXNzaW9uKSA6ICgpID0+IHtcbiAgfTtcbiAgaWYgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZW1wbGF0ZVwiKSB7XG4gICAgaWYgKCFlbC5feF9mb3J3YXJkRXZlbnRzKVxuICAgICAgZWwuX3hfZm9yd2FyZEV2ZW50cyA9IFtdO1xuICAgIGlmICghZWwuX3hfZm9yd2FyZEV2ZW50cy5pbmNsdWRlcyh2YWx1ZSkpXG4gICAgICBlbC5feF9mb3J3YXJkRXZlbnRzLnB1c2godmFsdWUpO1xuICB9XG4gIGxldCByZW1vdmVMaXN0ZW5lciA9IG9uKGVsLCB2YWx1ZSwgbW9kaWZpZXJzLCAoZSkgPT4ge1xuICAgIGV2YWx1YXRlMigoKSA9PiB7XG4gICAgfSwgeyBzY29wZTogeyBcIiRldmVudFwiOiBlIH0sIHBhcmFtczogW2VdIH0pO1xuICB9KTtcbiAgY2xlYW51cDIoKCkgPT4gcmVtb3ZlTGlzdGVuZXIoKSk7XG59KSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL2luZGV4LmpzXG53YXJuTWlzc2luZ1BsdWdpbkRpcmVjdGl2ZShcIkNvbGxhcHNlXCIsIFwiY29sbGFwc2VcIiwgXCJjb2xsYXBzZVwiKTtcbndhcm5NaXNzaW5nUGx1Z2luRGlyZWN0aXZlKFwiSW50ZXJzZWN0XCIsIFwiaW50ZXJzZWN0XCIsIFwiaW50ZXJzZWN0XCIpO1xud2Fybk1pc3NpbmdQbHVnaW5EaXJlY3RpdmUoXCJGb2N1c1wiLCBcInRyYXBcIiwgXCJmb2N1c1wiKTtcbndhcm5NaXNzaW5nUGx1Z2luRGlyZWN0aXZlKFwiTWFza1wiLCBcIm1hc2tcIiwgXCJtYXNrXCIpO1xuZnVuY3Rpb24gd2Fybk1pc3NpbmdQbHVnaW5EaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlTmFtZSwgc2x1Zykge1xuICBkaXJlY3RpdmUoZGlyZWN0aXZlTmFtZSwgKGVsKSA9PiB3YXJuKGBZb3UgY2FuJ3QgdXNlIFt4LSR7ZGlyZWN0aXZlTmFtZX1dIHdpdGhvdXQgZmlyc3QgaW5zdGFsbGluZyB0aGUgXCIke25hbWV9XCIgcGx1Z2luIGhlcmU6IGh0dHBzOi8vYWxwaW5lanMuZGV2L3BsdWdpbnMvJHtzbHVnfWAsIGVsKSk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9pbmRleC5qc1xuYWxwaW5lX2RlZmF1bHQuc2V0RXZhbHVhdG9yKG5vcm1hbEV2YWx1YXRvcik7XG5hbHBpbmVfZGVmYXVsdC5zZXRSZWFjdGl2aXR5RW5naW5lKHsgcmVhY3RpdmU6IHJlYWN0aXZlMiwgZWZmZWN0OiBlZmZlY3QyLCByZWxlYXNlOiBzdG9wLCByYXc6IHRvUmF3IH0pO1xudmFyIHNyY19kZWZhdWx0ID0gYWxwaW5lX2RlZmF1bHQ7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL2J1aWxkcy9tb2R1bGUuanNcbnZhciBtb2R1bGVfZGVmYXVsdCA9IHNyY19kZWZhdWx0O1xuZXhwb3J0IHtcbiAgc3JjX2RlZmF1bHQgYXMgQWxwaW5lLFxuICBtb2R1bGVfZGVmYXVsdCBhcyBkZWZhdWx0XG59O1xuIiwKICAgICJjbGFzcyBXb3JkIHtcbn1cblxuZXhwb3J0IGRlZmF1bHQgV29yZFxuIiwKICAgICJpbXBvcnQgQWxwaW5lIGZyb20gJ2FscGluZWpzJ1xuXG5pbXBvcnQgV29yZCBmcm9tICcuL3dvcmQuanMnXG5cbkFscGluZS5zdG9yZSgnd29yZHMnLCB7XG5cdHdvcmRzOiBbXSxcblxuXHRhZGQoKSB7XG5cdFx0dGhpcy53b3Jkcy5wdXNoKG5ldyBXb3JkKCkpXG5cdH0sXG5cblx0cmVtb3ZlKGluZGV4KSB7XG5cdFx0dGhpcy53b3Jkcy5zcGxpY2UoaW5kZXgsIDEpXG5cdH0sXG59KVxuXG53aW5kb3cuQWxwaW5lID0gQWxwaW5lXG5BbHBpbmUuc3RhcnQoKVxuIgogIF0sCiAgIm1hcHBpbmdzIjogIkFBQ0EsSUFBSSxHQUFlLEdBQ2YsR0FBVyxHQUNYLEVBQVEsQ0FBQyxFQUNULEdBQW1CLEdBQ3ZCLFNBQVMsRUFBUyxDQUFDLEVBQVUsQ0FDM0IsR0FBUyxDQUFRLEVBRW5CLFNBQVMsRUFBUSxDQUFDLEVBQUssQ0FDckIsSUFBSyxFQUFNLFNBQVMsQ0FBRyxFQUNyQixFQUFNLEtBQUssQ0FBRyxFQUNoQixHQUFXLEVBRWIsU0FBUyxFQUFVLENBQUMsRUFBSyxDQUN2QixJQUFJLEVBQVEsRUFBTSxRQUFRLENBQUcsRUFDN0IsR0FBSSxJQUFVLElBQU0sRUFBUSxHQUMxQixFQUFNLE9BQU8sRUFBTyxDQUFDLEVBRXpCLFNBQVMsRUFBVSxFQUFHLENBQ3BCLElBQUssS0FBYSxHQUNoQixHQUFlLEdBQ2YsZUFBZSxFQUFTLEVBRzVCLFNBQVMsRUFBUyxFQUFHLENBQ25CLEdBQWUsR0FDZixHQUFXLEdBQ1gsUUFBUyxFQUFJLEVBQUcsRUFBSSxFQUFNLE9BQVEsSUFDaEMsRUFBTSxHQUFHLEVBQ1QsR0FBbUIsRUFFckIsRUFBTSxPQUFTLEVBQ2YsR0FBbUIsR0FDbkIsR0FBVyxHQUliLElBQUksRUFDQSxFQUNBLEVBQ0Es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VSxDQUFFLEVBQUcsT0FBUSxDQUFDLENBQUMsQ0FBRSxDQUFDLEVBQzNDLEVBQ0QsRUFBUyxJQUFNLEVBQWUsQ0FBQyxFQUNoQyxDQUFDLEVBR0YsR0FBMkIsV0FBWSxXQUFZLFVBQVUsRUFDN0QsR0FBMkIsWUFBYSxZQUFhLFdBQVcsRUFDaEUsR0FBMkIsUUFBUyxPQUFRLE9BQU8sRUFDbkQsR0FBMkIsT0FBUSxPQUFRLE1BQU0sRUFDakQsU0FBUyxFQUEwQixDQUFDLEVBQU0sRUFBZSxFQUFNLENBQzdELEVBQVUsRUFBZSxDQUFDLElBQU8sRUFBSyxvQkFBb0Isb0NBQWdELGdEQUFtRCxJQUFRLENBQUUsQ0FBQyxFQUkxSyxHQUFlLGFBQWEsRUFBZSxFQUMzQyxHQUFlLG9CQUFvQixDQUFFLFNBQVUsR0FBVyxPQUFRLEdBQVMsUUFBUyxHQUFNLElBQUssQ0FBTSxDQUFDLEVBQ3RHLElBQUksR0FBYyxHQUdkLEdBQWlCLEdDMTBHckIsTUFBTSxFQUFLLENBQ1gsQ0FFQSxJQUFlLE1DQ2YsR0FBTyxNQUFNLFFBQVMsQ0FDckIsTUFBTyxDQUFDLEVBRVIsR0FBRyxFQUFHLENBQ0wsS0FBSyxNQUFNLEtBQUssSUFBSSxFQUFNLEdBRzNCLE1BQU0sQ0FBQyxFQUFPLENBQ2IsS0FBSyxNQUFNLE9BQU8sRUFBTyxDQUFDLEVBRTVCLENBQUMsRUFFRCxPQUFPLE9BQVMsR0FDaEIsR0FBTyxNQUFNIiwKICAiZGVidWdJZCI6ICI2MDgzOUQ1MUYzMkY0QTgzNjQ3NTZFMjE2NDc1NkUyMSIsCiAgIm5hbWVzIjogW10KfQ==
